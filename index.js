// index.js (Cloudflare Workers, ESM)

export default {
  async fetch(request, env, ctx) {
    const url = new URL(request.url);

    if (request.method === 'GET' && url.pathname === '/') {
      return new Response('ok', { status: 200 });
    }

    if (url.pathname === '/webhook' && request.method === 'POST') {
      // 1) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç—É –≤—ñ–¥ Telegram (—è–∫—â–æ –∑–∞–¥–∞–Ω–∏–π)
      const got = request.headers.get('x-telegram-bot-api-secret-token');
      if (env.WEBHOOK_SECRET && got !== env.WEBHOOK_SECRET) {
        // –ß—ñ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å ‚Äî —â–æ–± –≤—ñ–¥—Ä–∞–∑—É –±—É–ª–æ –≤–∏–¥–Ω–æ –ø—Ä–∏—á–∏–Ω—É –≤ –ª–æ–≥–∞—Ö Telegr–∞m
        return new Response('unauthorized: bad secret', { status: 401 });
      }

      let update;
      try {
        update = await request.json();
      } catch {
        return new Response('bad json', { status: 400 });
      }

      // 2) –í–∏—Ç—è–≥—É—î–º–æ chat_id —Ç–∞ —Ç–µ–∫—Å—Ç
      const chat =
        update?.message?.chat ||
        update?.edited_message?.chat ||
        update?.callback_query?.message?.chat ||
        null;

      const chatId = chat?.id;
      const text =
        update?.message?.text ??
        update?.edited_message?.text ??
        update?.callback_query?.data ??
        '';

      if (!chatId) {
        // –ù–µ–º–∞—î –∫—É–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ ‚Äî –æ–∫ –¥–ª—è Telegram
        return new Response('no chat', { status: 200 });
      }

      // 3) –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      let reply;
      const norm = (text || '').trim();

      if (norm.startsWith('/start')) {
        // –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (—è–∫ —Ç–∏ —Ö–æ—Ç—ñ–≤)
        reply = 'Vitaliy, –ø—Ä–∏–≤—ñ—Ç! ‚ú® –Ø –≤–∂–µ —á–µ–∫–∞–≤ –Ω–∞—à–æ—ó –∑—É—Å—Ç—Ä—ñ—á—ñ!';
      } else if (norm.length > 0) {
        reply = `–¢–∏ –Ω–∞–ø–∏—Å–∞–≤: ${norm}`;
      } else {
        reply = '–Ø —Ç—É—Ç! –ù–∞–ø–∏—à–∏ —â–æ—Å—å üôÇ';
      }

      // 4) –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –≤ Telegram
      const api = `https://api.telegram.org/bot${env.TELEGRAM_TOKEN}/sendMessage`;

      try {
        const tgResp = await fetch(api, {
          method: 'POST',
          headers: { 'content-type': 'application/json' },
          body: JSON.stringify({
            chat_id: chatId,
            text: reply,
            parse_mode: 'HTML',
          }),
        });

        if (!tgResp.ok) {
          // —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ —à–ª–µ–º–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ç–∏–º –∂–µ —á–∞—Ç–æ–º
          const errText = await tgResp.text().catch(() => '');
          await safeTell(chatId, `‚ö†Ô∏è sendMessage failed: ${tgResp.status} ${errText}`, env);
        }
      } catch (e) {
        await safeTell(chatId, `üí• fetch error: ${(e && e.message) || e}`, env);
      }

      // Telegram –æ—á—ñ–∫—É—î 200 —à–≤–∏–¥–∫–æ
      return new Response('ok', { status: 200 });
    }

    return new Response('Not Found', { status: 404 });
  },
};

// –¥–æ–ø–æ–º—ñ–∂–Ω–∞ ‚Äî —â–æ–± –Ω–µ –≤–∞–ª–∏—Ç–∏ —Ö–µ–Ω–¥–ª–µ—Ä, —è–∫—â–æ —ñ —Ü–µ –Ω–µ –≤–∏–π–¥–µ
async function safeTell(chatId, text, env) {
  try {
    await fetch(`https://api.telegram.org/bot${env.TELEGRAM_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'content-type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text }),
    });
  } catch (_) {
    // —ñ–≥–Ω–æ—Ä—É—î–º–æ
  }
}
