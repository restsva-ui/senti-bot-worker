// ========== Senti ‚Äî Cloudflare Worker (Telegram bot) ==========

const TG_API = (token) => `https://api.telegram.org/bot${token}`;
const TG_FILE = (token) => `https://api.telegram.org/file/bot${token}`;

// ---------- Helpers ----------
const json = (status, data) =>
  new Response(JSON.stringify(data), {
    status,
    headers: { "content-type": "application/json; charset=utf-8" },
  });

const b64 = (buf) =>
  typeof buf === "string"
    ? btoa(buf)
    : btoa(String.fromCharCode(...new Uint8Array(buf)));

function nowISO() {
  return new Date().toISOString();
}

// ---------- Upstash Redis (REST) ----------
async function redisSet(env, key, value, ttlSec = 60 * 60 * 24 * 3) {
  // JSON-—Ä—è–¥–æ–∫ –∑ —Ä–µ—Å—É—Ä—Å–∞–º–∏
  const body = JSON.stringify(value);
  const url = `${env.REDIS_URL}/set/${encodeURIComponent(key)}?EX=${ttlSec}`;
  const r = await fetch(url, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${env.REDIS_TOKEN}`,
      "Content-Type": "application/json",
    },
    body,
  });
  if (!r.ok) throw new Error(`Redis set failed: ${r.status}`);
}

async function redisGet(env, key) {
  const url = `${env.REDIS_URL}/get/${encodeURIComponent(key)}`;
  const r = await fetch(url, {
    headers: { Authorization: `Bearer ${env.REDIS_TOKEN}` },
  });
  if (!r.ok) return null;
  const data = await r.json(); // { result: "..." } | { result: null }
  if (!data || data.result == null) return null;
  try {
    return JSON.parse(data.result);
  } catch {
    return data.result;
  }
}

async function loadHistory(env, chatId) {
  const key = `chat:${chatId}:history`;
  const arr = (await redisGet(env, key)) || [];
  return Array.isArray(arr) ? arr : [];
}

async function pushHistory(env, chatId, role, content, max = 10) {
  const key = `chat:${chatId}:history`;
  const hist = (await loadHistory(env, chatId)) || [];
  hist.push({ role, content, ts: nowISO() });
  while (hist.length > max) hist.shift();
  await redisSet(env, key, hist);
  return hist;
}

// ---------- Telegram API ----------
async function tgSendAction(env, chatId, action = "typing") {
  await fetch(`${TG_API(env.TELEGRAM_TOKEN)}/sendChatAction`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, action }),
  });
}

async function tgSendMessage(env, chatId, text, replyTo) {
  return fetch(`${TG_API(env.TELEGRAM_TOKEN)}/sendMessage`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      parse_mode: "Markdown",
      reply_to_message_id: replyTo,
    }),
  });
}

async function tgSendPhoto(env, chatId, fileOrUrl, caption) {
  // fileOrUrl –º–æ–∂–µ –±—É—Ç–∏ URL –∞–±–æ data: URI
  return fetch(`${TG_API(env.TELEGRAM_TOKEN)}/sendPhoto`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      photo: fileOrUrl,
      caption,
    }),
  });
}

async function tgGetFile(env, fileId) {
  const r = await fetch(`${TG_API(env.TELEGRAM_TOKEN)}/getFile?file_id=${fileId}`);
  const j = await r.json();
  if (!j.ok) throw new Error("getFile failed");
  return `${TG_FILE(env.TELEGRAM_TOKEN)}/${j.result.file_path}`;
}
// ---------- AI Gateway ----------
async function aiGateway(env, model, payload) {
  const url = `${env.CF_AI_GATEWAY_BASE}/workers-ai/${encodeURIComponent(model)}`;
  const r = await fetch(url, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${env.CF_API_TOKEN}`,
      "content-type": "application/json",
    },
    body: JSON.stringify(payload),
  });
  if (!r.ok) {
    const t = await r.text().catch(() => "");
    throw new Error(`AI ${model} ${r.status}: ${t}`);
  }
  return r.json();
}

const CF_TEXT_FALLBACK = "@cf/llama-3.1-8b-instruct";
const CF_VISION_FALLBACK = "@cf/llava-1.5-7b";

// messages ‚Üí [{role, content}] | [{role, content:[{type:'input_text',text},...] }]
async function askText(env, messages) {
  try {
    // –≥–æ–ª–æ–≤–Ω–∞ —Å–ø—Ä–æ–±–∞ (—á–µ—Ä–µ–∑ gateway; —è–∫—â–æ –ø—Ä–æ–ø–∏—Å–∞–≤ Gemini —É gateway ‚Äî –ø—ñ–¥–µ —Ç—É–¥–∏)
    const res = await aiGateway(env, CF_TEXT_FALLBACK, { messages });
    // —É Workers AI –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±—É–≤–∞—é—Ç—å —É —Ä—ñ–∑–Ω–∏—Ö –∫–ª—é—á–∞—Ö; –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ
    const text =
      res?.response ??
      res?.result ??
      res?.choices?.[0]?.message?.content ??
      res?.output_text ??
      JSON.stringify(res);
    return String(text).trim();
  } catch (e) {
    return "–í–∏–±–∞—á, –∑–∞—Ä–∞–∑ —è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.";
  }
}

async function askVision(env, prompt, imageBytes) {
  // –ë—É–¥—É—î–º–æ multimodal –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Workers AI (llava)
  const content = [
    { type: "input_text", text: prompt || "–û–ø–∏—à–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é." },
    { type: "input_image", image: b64(imageBytes) },
  ];
  try {
    const res = await aiGateway(env, CF_VISION_FALLBACK, {
      messages: [{ role: "user", content }],
    });
    const text =
      res?.response ??
      res?.result ??
      res?.choices?.[0]?.message?.content ??
      res?.output_text ??
      JSON.stringify(res);
    return String(text).trim();
  } catch (e) {
    return "–Ø –æ—Ç—Ä–∏–º–∞–≤ —Ñ–æ—Ç–æ, –∞–ª–µ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ –º–æ–∂—É –π–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–µ —Ä–∞–∑.";
  }
}

// ---------- –†–æ—É—Ç–µ—Ä ----------
async function handleTelegramUpdate(env, update) {
  const msg = update.message;
  if (!msg) return;

  const chatId = msg.chat.id;
  const msgId = msg.message_id;
  const name =
    msg.from?.first_name ||
    msg.from?.username ||
    "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á";

  // –Ü–Ω–¥–∏–∫–∞—Ü—ñ—è "–¥—Ä—É–∫—É—é‚Ä¶"
  tgSendAction(env, chatId, "typing").catch(() => {});

  // –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è /start
  if (msg.text && /^\/start\b/i.test(msg.text)) {
    await tgSendMessage(
      env,
      chatId,
      "–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç —á–∏ *—Ñ–æ—Ç–æ* ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º ü§ñ\n\n" +
        "–©–æ–± –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: –Ω–∞–ø–∏—à–∏ `/imagine` –∞–±–æ `img:` —ñ –æ–ø–∏—Å (—Ñ—ñ—á–∞ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ).",
      msgId
    );
    return;
  }

  // –§–æ—Ç–æ
  if (msg.photo && msg.photo.length) {
    // –±–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ
    const best = msg.photo[msg.photo.length - 1];
    try {
      const fileUrl = await tgGetFile(env, best.file_id);
      const imgResp = await fetch(fileUrl);
      const bytes = new Uint8Array(await imgResp.arrayBuffer());

      const hist = await loadHistory(env, chatId);
      const userPrompt = msg.caption?.trim() || "";
      const sys = "–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π –≤—ñ–∑—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫. –ö–æ—Ä–æ—Ç–∫–æ —Ç–∞ —á—ñ—Ç–∫–æ –æ–ø–∏—à–∏, —â–æ –Ω–∞ —Ñ–æ—Ç–æ, —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é. –ó–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–æ–¥–∞–π 2‚Äì3 –≤–∏—Å–Ω–æ–≤–∫–∏ —Å–ø–∏—Å–∫–æ–º.";

      const answer = await askVision(env, `${sys}\n\n${userPrompt}`, bytes);
      await pushHistory(env, chatId, "user", "[image]");
      await pushHistory(env, chatId, "assistant", answer);
      await tgSendMessage(env, chatId, answer, msgId);
    } catch (e) {
      await tgSendMessage(env, chatId, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ üòÖ", msgId);
    }
    return;
  }

  // –¢–µ–∫—Å—Ç
  if (msg.text) {
    const text = msg.text.trim();

    // –ü—Ä–æ—Å—Ç–∞ –Ω–∞–≤—á–µ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞–ª—é—Ç—É (–±–µ–∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É)
    if (/–∫—É—Ä—Å\s+–¥–æ–ª–∞—Ä–∞/i.test(text)) {
      await tgSendMessage(
        env,
        chatId,
        "–Ø –Ω–µ –º–∞—é –¥–æ—Å—Ç—É–ø—É –¥–æ *–æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ñ–≤* —É —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ. –ü–µ—Ä–µ–≤—ñ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É –±–∞–Ω–∫—É –∞–±–æ –Ω–∞ —Å–∞–π—Ç—ñ –ù–ë–£.",
        msgId
      );
      return;
    }

    const hist = await loadHistory(env, chatId);
    const system =
      "–¢–∏ ‚Äî Senti, —É–≤–∞–∂–Ω–∏–π —ñ –¥—Ä—É–∂–Ω—ñ–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. " +
      "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –∫–æ—Ä–æ—Ç–∫–æ –π –ø–æ —Å—É—Ç—ñ, —è–∫—â–æ –Ω–µ –ø–æ–ø—Ä–æ—Å–∏–ª–∏ —ñ–Ω–∞–∫—à–µ. " +
      "–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Å–æ–±–∏—Å—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –±—É–¥—å —Ç–∞–∫—Ç–æ–≤–Ω–∏–º.";

    const messages = [
      { role: "system", content: system },
      ...hist.map((h) => ({ role: h.role, content: h.content })),
      { role: "user", content: text },
    ];

    const answer = await askText(env, messages);
    await pushHistory(env, chatId, "user", text);
    await pushHistory(env, chatId, "assistant", answer);

    await tgSendMessage(env, chatId, answer, msgId);
    return;
  }

  // –Ü–Ω—à—ñ —Ç–∏–ø–∏
  await tgSendMessage(env, chatId, "–ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç–µ–∫—Å—Ç –∞–±–æ —Ñ–æ—Ç–æ üôå", msgId);
}

// ---------- Worker entry ----------
export default {
  async fetch(request, env) {
    // Healthcheck
    const { pathname } = new URL(request.url);
    if (request.method === "GET" && pathname === "/health") {
      return json(200, { ok: true, service: "senti-bot", time: nowISO() });
    }

    // –ü—Ä–∏–π–º–∞—î–º–æ Telegram —Ç—ñ–ª—å–∫–∏ –∑ —Å–µ–∫—Ä–µ—Ç–Ω–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    if (request.method === "POST") {
      const sec = request.headers.get("X-Telegram-Bot-Api-Secret-Token");
      if (!sec || sec !== env.WEBHOOK_SECRET) {
        return json(401, { ok: false, error: "unauthorized" });
      }
      const update = await request.json().catch(() => ({}));
      // –û–±—Ä–æ–±–ª—è—î–º–æ update, –Ω–µ –ø–∞–¥–∞—î–º–æ –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö
      try {
        await handleTelegramUpdate(env, update);
      } catch (e) {
        // –ú–æ–≤—á–∞–∑–Ω–∏–π –ª–æ–≥ (—É –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—ñ Cloudflare –ª–æ–≥—ñ–≤ –º–∞–ª–æ)
      }
      return json(200, { ok: true });
    }

    return json(404, { ok: false, error: "Not Found" });
  },
};