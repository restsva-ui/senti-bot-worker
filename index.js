// Senti Telegram bot on Cloudflare Workers + AI Gateway (Workers AI -> Llama 3.1 8B Instruct)

const TG_API = (token) => `https://api.telegram.org/bot${token}`;
// –ú–æ–¥–µ–ª—å Workers AI —á–µ—Ä–µ–∑ AI Gateway
const WORKERS_AI_MODEL = "@cf/meta/llama-3.1-8b-instruct"; // –º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —ñ–Ω—à—É –º–æ–¥–µ–ª—å —ñ–∑ –∫–∞—Ç–∞–ª–æ–≥—É

export default {
  async fetch(request, env, ctx) {
    const url = new URL(request.url);

    // –ü—Ä–æ—Å—Ç–∏–π ping/health
    if (url.pathname === "/" || url.pathname === "/health") {
      return new Response("ok", { status: 200 });
    }

    if (url.pathname === "/webhook" && request.method === "POST") {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ–∫—Ä–µ—Ç (Telegram —à–ª–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É X-Telegram-Bot-Api-Secret-Token)
      const tgSecret = request.headers.get("X-Telegram-Bot-Api-Secret-Token");
      if (env.WEBHOOK_SECRET && tgSecret !== env.WEBHOOK_SECRET) {
        return new Response("forbidden", { status: 403 });
      }

      const update = await request.json().catch(() => null);
      if (!update) return new Response("bad json", { status: 400 });

      try {
        // –û–±—Ä–æ–±–∫–∞ only messages
        if (update.message && update.message.chat && (update.message.text || update.message.caption)) {
          const chatId = update.message.chat.id;
          const userText = (update.message.text ?? update.message.caption ?? "").trim();

          // –°–∏—Å—Ç–µ–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
          if (userText === "/start") {
            await sendMessage(env, chatId, "Vitaliy, –ø—Ä–∏–≤—ñ—Ç! ‚ú® –Ø –≤–∂–µ —á–µ–∫–∞–≤ –Ω–∞—à–æ—ó –∑—É—Å—Ç—Ä—ñ—á—ñ! –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ —â–æ—Å—å üòâ");
            return new Response("ok", { status: 200 });
          }
          if (userText === "/help") {
            await sendMessage(env, chatId, "–ù–∞–ø–∏—à–∏ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º. –ü—ñ–¥—Ç—Ä–∏–º—É—é —É–∫—Ä–∞—ó–Ω—Å—å–∫—É —Ç–∞ —ñ–Ω—à—ñ –º–æ–≤–∏ üåç");
            return new Response("ok", { status: 200 });
          }
          if (userText === "/ping") {
            await sendMessage(env, chatId, "pong ‚úÖ");
            return new Response("ok", { status: 200 });
          }

          // –ü–æ–∫–∞–∑—É—î–º–æ "typing‚Ä¶"
          ctx.waitUntil(sendChatAction(env, chatId, "typing"));

          // –ì–æ—Ç—É—î–º–æ –ø—Ä–æ–º–ø—Ç —Ç–∞ –ø–∏—Ç–∞—î–º–æ –º–æ–¥–µ–ª—å
          const prompt = buildPrompt(userText, update);
          const aiText = await runWorkersAIThroughGateway(env, prompt);

          // –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
          await sendMessage(env, chatId, aiText ?? "–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ üòø");

          return new Response("ok", { status: 200 });
        }

        // –Ü–Ω—à—ñ —Ç–∏–ø–∏ –∞–ø–¥–µ–π—Ç—ñ–≤ –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ
        return new Response("ignored", { status: 200 });
      } catch (err) {
        console.error("Webhook error:", err);
        // –°–ø—Ä–æ–±—É—î–º–æ –º‚Äô—è–∫–æ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –º–æ–∂–µ–º–æ
        try {
          if (update?.message?.chat?.id) {
            await sendMessage(env, update.message.chat.id, "–û–π! –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ üôè");
          }
        } catch (_) {}
        return new Response("error", { status: 500 });
      }
    }

    return new Response("not found", { status: 404 });
  },
};

/** –§–æ—Ä–º—É—î–º–æ –¥—Ä—É–∂–Ω—ñ–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç */
function buildPrompt(userText, update) {
  const name = update?.message?.from?.first_name ?? "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á";
  return [
    "–¢–∏ ‚Äî –ø–æ–º—ñ—á–Ω–∏–∫ Senti. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –¥—Ä—É–∂–Ω—å–æ, —Ç—ñ—î—é –∂ –º–æ–≤–æ—é, —è–∫–æ—é –ø–∏—à–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á.",
    "–Ø–∫—â–æ –∑–∞–¥–∞—é—Ç—å –∫—Ä–æ–∫–∏/—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å–ø–∏—Å–∫–æ–º.",
    "–£–Ω–∏–∫–∞–π –Ω–∞–¥—Ç–æ –ø–∞—Ñ–æ—Å–Ω–∏—Ö —Ñ—Ä–∞–∑. –ë—É–¥—å –∫–æ—Ä–∏—Å–Ω–∏–º —ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º.",
    "",
    `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á (${name}) –Ω–∞–ø–∏—Å–∞–≤: "${userText}"`,
  ].join("\n");
}

/** –í–∏–∫–ª–∏–∫ Workers AI —á–µ—Ä–µ–∑ Cloudflare AI Gateway */
async function runWorkersAIThroughGateway(env, prompt) {
  const base = env.CF_AI_GATEWAY_BASE; // –Ω–∞–ø—Ä. https://gateway.ai.cloudflare.com/v1/<account>/<gateway>
  if (!base) throw new Error("CF_AI_GATEWAY_BASE is not set");
  if (!env.CF_API_TOKEN) throw new Error("CF_API_TOKEN is not set");

  const endpoint = `${base}/workers-ai/run/${WORKERS_AI_MODEL}`;

  const body = {
    // Workers AI –æ—á—ñ–∫—É—î –ø–æ–ª–µ `prompt`
    prompt,
    // –ú–æ–∂–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ temperature / max_tokens, —è–∫—â–æ –º–æ–¥–µ–ª—å –ø—ñ–¥—Ç—Ä–∏–º—É—î
    // temperature: 0.3,
  };

  const res = await fetch(endpoint, {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${env.CF_API_TOKEN}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify(body),
  });

  if (!res.ok) {
    const text = await safeText(res);
    console.error("AI Gateway error:", res.status, text);
    return null;
  }

  // –§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Workers AI:
  // { result: { response: "..." }, ... }
  const data = await res.json().catch(() => null);
  const text = data?.result?.response ?? data?.response ?? null;
  return text;
}

/** –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram */
async function sendMessage(env, chatId, text) {
  // –©–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º –∑ Markdown, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTML –∞–±–æ plain
  const res = await fetch(`${TG_API(env.TELEGRAM_TOKEN)}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      // parse_mode: "HTML",
      disable_web_page_preview: true,
    }),
  });
  if (!res.ok) {
    const t = await safeText(res);
    console.error("sendMessage error:", res.status, t);
  }
}

/** –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Å—Ç—É (‚Äútyping‚Ä¶‚Äù) */
async function sendChatAction(env, chatId, action = "typing") {
  const res = await fetch(`${TG_API(env.TELEGRAM_TOKEN)}/sendChatAction`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, action }),
  });
  if (!res.ok) {
    const t = await safeText(res);
    console.warn("sendChatAction warn:", res.status, t);
  }
}

async function safeText(res) {
  try {
    return await res.text();
  } catch {
    return "";
  }
}
