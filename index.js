// index.js ‚Äî ES Module

const TG_API = (token, method, body) =>
  fetch(`https://api.telegram.org/bot${token}/${method}`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body),
  });

const ok = (data = { ok: true }) =>
  new Response(JSON.stringify(data), {
    status: 200,
    headers: { "content-type": "application/json; charset=utf-8" },
  });

const bad = (msg, code = 400) =>
  new Response(JSON.stringify({ ok: false, error: msg }), {
    status: code,
    headers: { "content-type": "application/json; charset=utf-8" },
  });

async function fxAuto(base = "UAH", symbols = "USD") {
  const url = `https://api.exchangerate.host/latest?base=${encodeURIComponent(
    base
  )}&symbols=${encodeURIComponent(symbols)}`;
  const r = await fetch(url, { cf: { cacheEverything: true, cacheTtl: 600 } });
  if (!r.ok) throw new Error("FX HTTP " + r.status);
  const j = await r.json();
  return j.rates?.[symbols];
}

function pickLang(text) {
  const t = (text || "").toLowerCase();
  if (/[–∞-—â—å—é—è—î—ñ—ó“ë]/.test(t)) return "uk";
  if (/[–∞-—è—ë]/.test(t)) return "ru";
  return "en";
}

function greet(name = "–¥—Ä—É–∂–µ", lang = "uk") {
  const map = {
    uk: [
      `–ü—Ä–∏–≤—ñ—Ç, ${name}! –î–∞–≤–∞–π –∑—Ä–æ–±–∏–º–æ –¥–µ–Ω—å —Ç—Ä—ñ—à–∫–∏ —è—Å–∫—Ä–∞–≤—ñ—à–∏–º ‚ú®`,
      `–ì–µ–π, ${name}! –Ø –≤–∂–µ —á–µ–∫–∞–≤ –Ω–∞ –Ω–∞—à—É –∑—É—Å—Ç—Ä—ñ—á üåü`,
      `${name}, –≤—ñ—Ç–∞—é! –ß–∏–º –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ? üôÇ`,
      `–ô–æ, ${name}! –ü–æ—ó—Ö–∞–ª–∏ —Ç–≤–æ—Ä–∏—Ç–∏ –º–∞–≥—ñ—é üí´`,
      `–í—ñ—Ç–∞—é, ${name}! –ì–æ—Ç–æ–≤–∏–π –ø—ñ–¥—Å—Ç—Ä–∞—Ö—É–≤–∞—Ç–∏ —É –≤—Å—å–æ–º—É ü§ù`,
      `${name}, —Ä–∞–¥–∏–π –±–∞—á–∏—Ç–∏! –ó–∞–ø–∏—Ç—É–π —â–æ –∑–∞–≤–≥–æ–¥–Ω–æ üôå`,
    ],
    en: [
      `Hey ${name}! Let‚Äôs make the day brighter ‚ú®`,
      `Hi ${name}! I‚Äôve been waiting for this moment üåü`,
      `Welcome, ${name}! What do you need today? üôÇ`,
      `Yo ${name}! Let‚Äôs make some magic üí´`,
      `Hi ${name}! I‚Äôve got your back ü§ù`,
      `${name}, great to see you! Ask me anything üôå`,
    ],
    ru: [
      `–ü—Ä–∏–≤–µ—Ç, ${name}! –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –¥–µ–Ω—å —è—Ä—á–µ ‚ú®`,
      `–•–µ–π, ${name}! –Ø —É–∂–µ –∂–¥–∞–ª –Ω–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏ üåü`,
      `${name}, –ø—Ä–∏–≤–µ—Ç! –ß–µ–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? üôÇ`,
      `–ô–æ, ${name}! –ü–æ–≥–Ω–∞–ª–∏ —Ç–≤–æ—Ä–∏—Ç—å –º–∞–≥–∏—é üí´`,
      `–ó–¥–æ—Ä–æ–≤–∞, ${name}! –ü–æ–¥—Å—Ç—Ä–∞—Ö—É—é –≤–æ –≤—Å—ë–º ü§ù`,
      `${name}, —Ä–∞–¥ –≤–∏–¥–µ—Ç—å! –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ üôå`,
    ],
  };
  const arr = map[lang] || map.en;
  return arr[Math.floor(Math.random() * arr.length)];
}

async function handleTelegram(update, env) {
  const token = env.TELEGRAM_TOKEN;
  if (!token) return;

  const msg = update.message || update.edited_message;
  if (!msg) return ok();

  const chatId = msg.chat.id;
  const userName = msg.from?.first_name || msg.chat?.first_name || "–¥—Ä—É–∂–µ";
  const lang = msg.from?.language_code || pickLang(msg.text);
  const text = (msg.text || "").trim();

  if (text === "/start") {
    const hi = greet(userName, lang);
    await TG_API(token, "sendMessage", { chat_id: chatId, text: hi });
    return ok();
  }

  if (/–∫—É—Ä—Å|–¥–æ–ª–∞—Ä|–¥–æ–ª–ª–∞—Ä–∞|usd|eur|—î–≤—Ä–æ/i.test(text)) {
    const isUSD = /usd|–¥–æ–ª–∞—Ä/i.test(text);
    const sym = isUSD ? "USD" : "EUR";
    try {
      const rate = await fxAuto("UAH", sym);
      const ans = rate
        ? `1 ${sym} ‚âà ${(rate).toFixed(2)} –≥—Ä–Ω`
        : `–°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –∑ –∫—É—Ä—Å–æ–º.`;
      await TG_API(token, "sendMessage", { chat_id: chatId, text: ans });
    } catch {
      await TG_API(token, "sendMessage", {
        chat_id: chatId,
        text: "–°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –∑ –∫—É—Ä—Å–æ–º.",
      });
    }
    return ok();
  }

  if (/^echo\s+/i.test(text)) {
    const echo = text.replace(/^echo\s+/i, "");
    await TG_API(token, "sendMessage", { chat_id: chatId, text: echo });
    return ok();
  }

  await TG_API(token, "sendMessage", {
    chat_id: chatId,
    text:
      lang === "uk"
        ? `–û–∫–µ–π, ${userName}. –°–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∞–±–æ –¥–∞–π –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π üòâ`
        : lang === "ru"
        ? `–û–∫–µ–π, ${userName}. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –¥–∞–π –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π üòâ`
        : `Okay, ${userName}. Try to rephrase or add more details üòâ`,
  });

  return ok();
}

export default {
  async fetch(request, env, ctx) {
    const url = new URL(request.url);
    const pathname = url.pathname;

    if (pathname === "/_status") {
      return ok({
        ok: true,
        worker: "senti-bot-worker",
        kv: !!env.AIMAGIC_SESS,
        time: new Date().toISOString(),
      });
    }

    if (pathname === "/setwebhook" && request.method === "POST") {
      const token = env.TELEGRAM_TOKEN;
      const hook = env.WEBHOOK_SECRET;
      if (!token || !hook) return bad("no tg secrets", 500);
      const r = await fetch(
        `https://api.telegram.org/bot${token}/setWebhook?url=${encodeURIComponent(
          `${url.origin}/${hook}`
        )}`
      );
      const j = await r.json();
      return ok(j);
    }

    if (pathname === `/${env.WEBHOOK_SECRET}` && request.method === "POST") {
      const update = await request.json();
      return handleTelegram(update, env);
    }

    return new Response("ok", { status: 200 });
  },
};