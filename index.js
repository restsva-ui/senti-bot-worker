// === util responses ===
const json = (obj, init = {}) =>
  new Response(JSON.stringify(obj), { headers: { "content-type": "application/json;charset=utf-8" }, ...init });
const text = (body, init = {}) =>
  new Response(body, { headers: { "content-type": "text/plain" }, ...init });
const ok = (body = "ok") => text(body, { status: 200 });
const bad = (status = 400, msg = "bad request") => text(msg, { status });

// === telegram helpers ===
async function tg(apiBase, method, payload) {
  const r = await fetch(`${apiBase}/${method}`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(payload),
  });
  const body = await r.text().catch(() => "");
  if (!r.ok) throw new Error(`TG ${method} ${r.status}: ${body}`);
  return JSON.parse(body || "{}");
}

async function tgTyping(apiBase, chatId) {
  try { await tg(apiBase, "sendChatAction", { chat_id: chatId, action: "typing" }); } catch (_) {}
}

function greet(name, lang) {
  const greetings = {
    uk: `–ü—Ä–∏–≤—ñ—Ç, ${name || "–¥—Ä—É–∂–µ"}! ‚ú® –î–∞–≤–∞–π –∑—Ä–æ–±–∏–º–æ —Å–≤—ñ—Ç —Ç—Ä—ñ—à–∫–∏ —è—Å–∫—Ä–∞–≤—ñ—à–∏–º!`,
    ru: `–ü—Ä–∏–≤–µ—Ç, ${name || "–¥—Ä—É–≥"}! ‚ú® –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –º–∏—Ä —è—Ä—á–µ!`,
    en: `Hi, ${name || "friend"}! ‚ú® Let's make the world a bit brighter!`,
    de: `Hallo, ${name || "Freund"}! ‚ú® Lass uns die Welt etwas heller machen!`,
    fr: `Salut, ${name || "ami"}! ‚ú® Rendons le monde un peu plus lumineux!`,
  };
  return greetings[lang] || greetings.en;
}

function funReply(lang) {
  const extras = { uk: "üôÇ‚ú®üéâ", ru: "üî•üòâüöÄ", en: "üòéüëçüî•", de: "üçªüá©üá™üòÅ", fr: "ü•ñ‚ù§Ô∏èüá´üá∑" };
  return extras[lang] || "ü§ñ";
}

// === KV helpers ===
async function kvGet(env, key) { return await env.AIMAGIC_SESS.get(key); }
async function kvPut(env, key, value, ttl = 1800) { return await env.AIMAGIC_SESS.put(key, value, { expirationTtl: ttl }); }
async function kvIncr(env, key) {
  // –ø—Ä–∏–º—ñ—Ç–∏–≤–Ω–∏–π —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç (read-modify-write); –æ–∫ –¥–ª—è –º–∞–ª–∏—Ö –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
  const cur = parseInt((await kvGet(env, key)) || "0", 10) || 0;
  const next = cur + 1;
  await kvPut(env, key, String(next), 24 * 3600);
  return next;
}

// === LLM: Gemini ===
async function llmGemini(apiKey, userText, lang = "en") {
  const sys = `–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –º–æ–≤–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (${lang}). –ë—É–¥—å —Å—Ç–∏—Å–ª–∏–º —ñ –∫–æ—Ä–∏—Å–Ω–∏–º. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥ ‚Äî –¥–æ–¥–∞–π –∫–æ—Ä–æ—Ç–∫—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ.`;
  const url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=" + apiKey;
  const resp = await fetch(url, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({
      systemInstruction: { role: "system", parts: [{ text: sys }] },
      contents: [{ role: "user", parts: [{ text: userText }]}],
      generationConfig: { temperature: 0.5 },
    }),
  });
  const data = await resp.json();
  if (!resp.ok) throw new Error(`Gemini ${resp.status}: ${JSON.stringify(data)}`);
  return data?.candidates?.[0]?.content?.parts?.[0]?.text?.trim() || "";
}

// === –æ–ø—Ü—ñ–π–Ω—ñ –º–µ–¥—ñ–∞-–≤—Å—Ç–∞–≤–∫–∏ (—Å—Ç–∏–∫–µ—Ä/–≥—ñ—Ñ) –∫–æ–∂–Ω–µ N-–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ===
function pickLangKey(lang) {
  const L = (lang || "en").toLowerCase();
  if (L.startsWith("uk")) return "UK";
  if (L.startsWith("ru")) return "RU";
  if (L.startsWith("de")) return "DE";
  if (L.startsWith("fr")) return "FR";
  return "EN";
}
async function maybeSendFlavorMedia(apiBase, env, chatId, lang, everyN = 4) {
  try {
    const n = await kvIncr(env, `cnt:${chatId}`);
    if (n % everyN !== 0) return;

    const key = pickLangKey(lang);
    // 1) gif (animation) —á–µ—Ä–µ–∑ URL (–∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –æ–ø—Ü—ñ–π–Ω—ñ)
    const gif = env[`GIF_${key}`]; // –Ω–∞–ø—Ä., GIF_UK
    if (gif) {
      await tg(apiBase, "sendAnimation", { chat_id: chatId, animation: gif });
      return;
    }
    // 2) sticker —á–µ—Ä–µ–∑ file_id (—è–∫—â–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –∑–±–µ—Ä—ñ–≥ —É —Å–µ–∫—Ä–µ—Ç–∞—Ö)
    const st = env[`STICKER_${key}`]; // –Ω–∞–ø—Ä., STICKER_EN
    if (st) {
      await tg(apiBase, "sendSticker", { chat_id: chatId, sticker: st });
      return;
    }
    // 3) —ñ–Ω–∞–∫—à–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω—ñ—á–æ–≥–æ –Ω–µ —à–ª–µ–º–æ (–µ–º–æ–¥–∑—ñ –≤–∂–µ —î –≤ —Ç–µ–∫—Å—Ç—ñ)
  } catch (_) {}
}

// === main worker ===
export default {
  async fetch(request, env) {
    const url = new URL(request.url);

    if (request.method === "GET" && url.pathname === "/") return ok("ok");

    const BOT_TOKEN = env.TELEGRAM_TOKEN;
    const WEBHOOK_SECRET = env.WEBHOOK_SECRET;
    if (!BOT_TOKEN) return bad(500, "TELEGRAM_TOKEN is missing");
    if (!WEBHOOK_SECRET) return bad(500, "WEBHOOK_SECRET is missing");
    const API = `https://api.telegram.org/bot${BOT_TOKEN}`;

    // —Ä—É—á–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    if (request.method === "GET" && url.pathname === "/setwebhook") {
      if (url.searchParams.get("secret") !== WEBHOOK_SECRET) return bad(403, "forbidden");
      const hookUrl = `${url.origin}/webhook`;
      const res = await tg(API, "setWebhook", {
        url: hookUrl, secret_token: WEBHOOK_SECRET,
        allowed_updates: ["message"], max_connections: 40,
      });
      return json({ status: "ok", set_to: hookUrl, tg: res });
    }

    // Telegram webhook
    if (request.method === "POST" && url.pathname === "/webhook") {
      const got = request.headers.get("x-telegram-bot-api-secret-token");
      if (got !== WEBHOOK_SECRET) return bad(403, "forbidden");

      const update = await request.json().catch(() => null);
      if (!update) return bad(400, "no update");

      const msg = update.message;
      if (!msg) return ok();

      const chatId = msg.chat?.id;
      const textIn = (msg.text || "").trim();

      // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –º–æ–≤—É
      if (msg.from?.language_code) {
        await kvPut(env, `lang:${chatId}`, msg.from.language_code, 3600);
      }
      let lang = await kvGet(env, `lang:${chatId}`);
      if (!lang) lang = msg.from?.language_code || "en";

      if (textIn === "/start") {
        const name = msg.from?.first_name || "";
        await tg(API, "sendMessage", { chat_id: chatId, text: greet(name, lang) });
        // –º–æ–∂–µ—à –æ–¥—Ä–∞–∑—É –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ –≤–∏—Å—Ç—Ä—ñ–ª–∏—Ç–∏ gif/sticker (–Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ):
        await maybeSendFlavorMedia(API, env, chatId, lang, 1); // 1 = –≤—ñ–¥—Ä–∞–∑—É
        return ok();
      }

      if (textIn === "/help") {
        const helps = {
          uk: "–ö–æ–º–∞–Ω–¥–∏:\n/start ‚Äî –≤—ñ—Ç–∞–Ω–Ω—è\n/help ‚Äî –¥–æ–ø–æ–º–æ–≥–∞\n–ë—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –°–µ–Ω—Ç—ñ (LLM).",
          ru: "–ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help ‚Äî –ø–æ–º–æ—â—å\n–õ—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–≤–µ—Ç –æ—Ç –°–µ–Ω—Ç–∏ (LLM).",
          en: "Commands:\n/start ‚Äî greeting\n/help ‚Äî help\nAny text ‚Äî answer from Senti (LLM).",
          de: "Befehle:\n/start ‚Äî Begr√º√üung\n/help ‚Äî Hilfe\nBeliebiger Text ‚Äî Antwort von Senti (LLM).",
          fr: "Commandes:\n/start ‚Äî salutation\n/help ‚Äî aide\nTout texte ‚Äî r√©ponse de Senti (LLM).",
        };
        await tg(API, "sendMessage", { chat_id: chatId, text: helps[lang] || helps.en });
        return ok();
      }

      if (textIn) {
        // –ø–æ–∫–∞–∑—É—î–º–æ "typing‚Ä¶"
        await tgTyping(API, chatId);

        // –∫–µ—à –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        const cacheKey = `resp:${chatId}:${textIn}`;
        let reply = await kvGet(env, cacheKey);
        if (!reply) {
          try {
            if (env.GEMINI_API_KEY) {
              reply = await llmGemini(env.GEMINI_API_KEY, textIn, lang);
            } else {
              reply = textIn; // fallback
            }
            await kvPut(env, cacheKey, reply, 120); // 2 —Ö–≤
          } catch (e) {
            reply = `AI error: ${e.message || e}`;
          }
        }

        const finalText = `${reply}\n\n${funReply(lang)}`;
        await tg(API, "sendMessage", { chat_id: chatId, text: finalText });

        // —ñ–Ω–æ–¥—ñ –¥–æ–¥–∞—î–º–æ —Å—Ç—ñ–∫–µ—Ä/–≥—ñ—Ñ (–∫–æ–∂–Ω–µ 4-—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
        await maybeSendFlavorMedia(API, env, chatId, lang, 4);

        return ok();
      }

      return ok();
    }

    return bad(404, "not found");
  },
};
