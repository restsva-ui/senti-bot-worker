// index.js ‚Äî Telegram bot + Vision (Gemini ‚Üí fallback LLaVA on Cloudflare Workers AI)

export default {
  async fetch(req, env) {
    const url = new URL(req.url);

    // Healthcheck
    if (req.method === "GET" && url.pathname === "/") {
      return new Response("ok", { status: 200 });
    }

    // Telegram webhook
    if (req.method === "POST" && url.pathname === "/webhook") {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç—É –≤–µ–±—Ö—É–∫–∞ (—è–∫—â–æ –≤ Telegram setWebhook –±—É–ª–æ –∑ secret_token)
      const got = req.headers.get("X-Telegram-Bot-Api-Secret-Token");
      if (env.WEBHOOK_SECRET && got !== env.WEBHOOK_SECRET) {
        return new Response("forbidden", { status: 403 });
      }

      const update = await req.json().catch(() => ({}));
      if (!update?.message) return new Response("no message", { status: 200 });

      const chatId = update.message.chat?.id;
      const text = update.message.text;
      const photos = update.message.photo;

      // –º–∞–ª–µ–Ω—å–∫–∏–π helper –¥–ª—è Telegram API
      const tg = async (method, body) => {
        const r = await fetch(`https://api.telegram.org/bot${env.TELEGRAM_TOKEN}/${method}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(body),
        });
        return r.json();
      };

      // –ø–æ–∫–∞–∑—É—î–º–æ "typing‚Ä¶" –ø—ñ–¥ —á–∞—Å –¥–æ–≤–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
      const sendTyping = () => tg("sendChatAction", { chat_id: chatId, action: "typing" });

      // –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π ‚Äî —è–∫—â–æ –ø—Ä–∏–π—à–ª–æ —Ñ–æ—Ç–æ
      if (Array.isArray(photos) && photos.length) {
        await sendTyping();

        try {
          // 1) –±–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ
          const largest = photos[photos.length - 1]; // –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–∑–≤–∏—á–∞–π –Ω–∞–π–±—ñ–ª—å—à–∏–π
          const fileId = largest.file_id;

          // 2) –æ—Ç—Ä–∏–º–∞—î–º–æ file_path
          const fileInfo = await tg("getFile", { file_id: fileId });
          const filePath = fileInfo?.result?.file_path;
          if (!filePath) throw new Error("No file_path from Telegram");

          // 3) –∫–∞—á–∞—î–º–æ –±–∞–π—Ç–∏ —Ñ–æ—Ç–æ
          const fileUrl = `https://api.telegram.org/file/bot${env.TELEGRAM_TOKEN}/${filePath}`;
          const imgRes = await fetch(fileUrl);
          if (!imgRes.ok) throw new Error("Failed to download Telegram file");
          const imageBuf = await imgRes.arrayBuffer();

          // 4) –ø—Ä–æ–º–ø—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—è–∫—â–æ —Ä–∞–∑–æ–º —ñ–∑ —Ñ–æ—Ç–æ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –ø—ñ–¥–ø–∏—Å)
          const userPrompt = update.message.caption || "–û–ø–∏—à–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —Ä–æ–∑–∫–∞–∂–∏ –≤–∞–∂–ª–∏–≤—ñ –¥–µ—Ç–∞–ª—ñ.";

          // 5) –ê–Ω–∞–ª—ñ–∑ (—Å–ø–æ—á–∞—Ç–∫—É Gemini ‚Üí fallback LLaVA)
          let answer;
          try {
            answer = await analyzeWithGemini(imageBuf, userPrompt, env.GEMINI_API_KEY);
          } catch (e) {
            console.error("Gemini error:", e);
            answer = await analyzeWithLLAVA(imageBuf, userPrompt, env);
          }

          // 6) –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
          await tg("sendMessage", { chat_id: chatId, text: answer || "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø–∏—Å ‚òπÔ∏è" });
        } catch (e) {
          console.error("Photo handling error:", e);
          await tg("sendMessage", { chat_id: chatId, text: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è." });
        }

        return new Response("ok", { status: 200 });
      }

      // –¢–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–ø—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç; –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º –º–æ–∂–Ω–∞ —Ç–µ–∂ –≤–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ Gemini)
      if (typeof text === "string" && text.trim()) {
        await sendTyping();

        // –±–∞–∑–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏
        if (text === "/start") {
          await tg("sendMessage", {
            chat_id: chatId,
            text: "Vitaliy, –ø—Ä–∏–≤—ñ—Ç! ‚ú® –Ø –≤–∂–µ —á–µ–∫–∞–≤ –Ω–∞—à–æ—ó –∑—É—Å—Ç—Ä—ñ—á—ñ! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ñ–æ—Ç–æ ‚Äî –æ–ø–∏—à—É, —â–æ –Ω–∞ –Ω—å–æ–º—É üòâ",
          });
          return new Response("ok", { status: 200 });
        }

        // echo/–∑–∞–≥–ª—É—à–∫–∞
        await tg("sendMessage", {
          chat_id: chatId,
          text: "–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–∞ –∑ –ø—ñ–¥–ø–∏—Å–æ–º), —ñ —è –æ–ø–∏—à—É –≤—Å–µ, —â–æ –ø–æ–±–∞—á—É üëÄ",
        });
        return new Response("ok", { status: 200 });
      }

      // —è–∫—â–æ –Ω–µ —Ñ–æ—Ç–æ —ñ –Ω–µ —Ç–µ–∫—Å—Ç ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
      return new Response("ignored", { status: 200 });
    }

    return new Response("not found", { status: 404 });
  },
};

/* =========================
   GEMINI (–æ—Å–Ω–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑)
   ========================= */
async function analyzeWithGemini(imageArrayBuffer, prompt, apiKey) {
  if (!apiKey) throw new Error("GEMINI_API_KEY is missing");

  const base64 = arrayBufferToBase64(imageArrayBuffer);
  const body = {
    contents: [
      {
        parts: [
          {
            inline_data: {
              mime_type: "image/jpeg", // Telegram JPG/WebP ‚Äî —è–∫—â–æ WebP, —Ç–µ–∂ –ø—Ä–∞—Ü—é—î
              data: base64,
            },
          },
          { text: prompt || "–û–ø–∏—à–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è." },
        ],
      },
    ],
    generationConfig: { temperature: 0.6, maxOutputTokens: 900 },
  };

  // –ú–æ–¥–µ–ª—å: gemini-1.5-flash (—à–≤–∏–¥–∫–∞ —ñ –¥–µ—à–µ–≤–∞), –º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ pro
  const url =
    "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=" +
    encodeURIComponent(apiKey);

  const r = await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body),
  });
  if (!r.ok) {
    const txt = await r.text();
    throw new Error("Gemini HTTP " + r.status + ": " + txt);
  }
  const data = await r.json();
  // –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ candidates ‚Üí content ‚Üí parts
  const text =
    data?.candidates?.[0]?.content?.parts?.map((p) => p.text).join("\n").trim() ||
    data?.candidates?.[0]?.content?.parts?.[0]?.text ||
    "";
  if (!text) throw new Error("Gemini returned empty text");
  return text;
}

/* =====================================
   LLaVA (fallback —á–µ—Ä–µ–∑ Workers AI / AI)
   ===================================== */
async function analyzeWithLLAVA(imageArrayBuffer, prompt, env) {
  // –ú–æ–¥–µ–ª—å: –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –¥–æ—Å—Ç—É–ø–Ω—ñ "@cf/llava" –∞–±–æ "@cf/llava-hf/llava-1.5-7b"
  const modelCandidates = ["@cf/llava", "@cf/llava-hf/llava-1.5-7b", "@cf/llava-1.5-13b"];

  const imageUint8 = new Uint8Array(imageArrayBuffer);
  let lastErr;

  for (const model of modelCandidates) {
    try {
      const out = await env.AI.run(model, {
        prompt: prompt || "–û–ø–∏—à–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.",
        image: imageUint8, // Workers AI –ø—Ä–∏–π–º–∞—î Uint8Array
      });

      // –§–æ—Ä–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É LLaVA –≤—ñ–¥—Ä—ñ–∑–Ω—è—é—Ç—å—Å—è ‚Äî –ø—ñ–¥—Å—Ç—Ä–∞—Ö—É—î–º–æ—Å—è
      const text =
        out?.text ||
        out?.description ||
        out?.result ||
        (Array.isArray(out?.results) ? out.results.map((x) => x.text || x.description).join("\n") : "");

      if (text && text.trim()) return text.trim();
      throw new Error("Empty LLaVA response");
    } catch (e) {
      lastErr = e;
      // –ø—Ä–æ–±—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É –º–æ–¥–µ–ª—å
    }
  }

  throw lastErr || new Error("No LLaVA models worked");
}

/* ============
   helpers
   ============ */
function arrayBufferToBase64(buf) {
  let binary = "";
  const bytes = new Uint8Array(buf);
  const len = bytes.byteLength;
  for (let i = 0; i < len; i++) binary += String.fromCharCode(bytes[i]);
  return btoa(binary);
}