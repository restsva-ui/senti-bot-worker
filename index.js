// Cloudflare Workers ‚Äî ESM only
// env: { TELEGRAM_TOKEN, WEBHOOK_SECRET, AIMAGIC_SESS, AI }
const TG = {
  api(token, method, params) {
    const url = `https://api.telegram.org/bot${token}/${method}`;
    return fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(params),
    });
  },
};

async function replyTelegram(env, chatId, text, extra = {}) {
  return TG.api(env.TELEGRAM_TOKEN, "sendMessage", {
    chat_id: chatId,
    text,
    parse_mode: "HTML",
    ...extra,
  });
}

function todayUA() {
  const now = new Date();
  const fmt = new Intl.DateTimeFormat("uk-UA", {
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    weekday: "long",
    timeZone: "Europe/Kyiv",
  });
  return fmt.format(now);
}

async function usdToUah() {
  // –ø—Ä–æ—Å—Ç–∏–π —Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π AUTO (exchangerate.host)
  const r = await fetch("https://api.exchangerate.host/latest?base=USD&symbols=UAH");
  const j = await r.json().catch(() => ({}));
  return j?.rates?.UAH ?? null;
}

function pickStartGreeting(name) {
  const n = name || "–¥—Ä—É–∂–µ";
  const opts = [
    `${n}, –ø—Ä–∏–≤—ñ—Ç! üåü –Ø –≤–∂–µ —á–µ–∫–∞–≤ –Ω–∞—à–æ—ó –∑—É—Å—Ç—Ä—ñ—á—ñ!`,
    `–†–∞–¥–∏–π —Ç–µ–±–µ –±–∞—á–∏—Ç–∏, ${n}! üöÄ –ß–∏–º –¥–æ–ø–æ–º–æ–≥—Ç–∏?`,
    `${n}, –¥–∞–≤–∞–π –∑—Ä–æ–±–∏–º–æ –¥–µ–Ω—å —Ç—Ä—ñ—à–∫–∏ —è—Å–∫—Ä–∞–≤—ñ—à–∏–º ‚ú®`,
    `–ì–µ–π, ${n}! üòâ –ü–∏—à–∏, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äî —É—Å–µ –∑—Ä–æ–±–∏–º–æ.`,
    `${n}, –≤—ñ—Ç–∞—é! üî• –ì–æ—Ç–æ–≤–∏–π –ø—ñ–¥—Ö–æ–ø–∏—Ç–∏ –±—É–¥—å-—è–∫—É –∑–∞–¥–∞—á—É.`,
  ];
  return opts[Math.floor(Math.random() * opts.length)];
}

async function handleTelegramUpdate(env, update) {
  const msg = update.message || update.edited_message;
  if (!msg || !msg.chat) return new Response("ok");

  const chatId = msg.chat.id;
  const name =
    msg.from?.first_name ||
    msg.chat?.first_name ||
    msg.from?.username ||
    "–¥—Ä—É–∂–µ";

  const text = (msg.text || "").trim();

  // /start ‚Äî –æ–¥—Ä–∞–∑—É –º–æ–≤–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  if (text.startsWith("/start")) {
    const greet = pickStartGreeting(name);
    await replyTelegram(env, chatId, `${greet}\n\n–ù–∞–ø–∏—à–∏ –∑–∞–ø–∏—Ç —Å–≤–æ—ó–º–∏ —Å–ª–æ–≤–∞–º–∏ –∞–±–æ –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ üòâ`);
    return new Response("ok");
  }

  // –ø—Ä–∏–∫–ª–∞–¥: "–ö—É—Ä—Å –¥–æ–ª–∞—Ä–∞"
  if (/–∫—É—Ä—Å\s+–¥–æ–ª–∞—Ä/iu.test(text)) {
    const rate = await usdToUah();
    if (rate) {
      await replyTelegram(env, chatId, `–°—å–æ–≥–æ–¥–Ω—ñ: ${todayUA()}\n$1 ‚âà ${rate.toFixed(2)} –≥—Ä–Ω`);
    } else {
      await replyTelegram(env, chatId, `–°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –∑ –∫—É—Ä—Å–æ–º. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.`);
    }
    return new Response("ok");
  }

  // –¥–µ—Ñ–æ–ª—Ç
  await replyTelegram(env, chatId, `–û–∫–µ–π, ${name}. –°–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∞–±–æ –¥–∞–π –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π üòâ`);
  return new Response("ok");
}

export default {
  async fetch(request, env, ctx) {
    const url = new URL(request.url);

    // healthcheck
    if (request.method === "GET" && url.pathname === "/_status") {
      return new Response(
        JSON.stringify({ ok: true, service: "senti-bot-worker", version: "v4.1.4-esm" }),
        { headers: { "Content-Type": "application/json; charset=utf-8" } }
      );
    }

    // Telegram –≤–µ–±—Ö—É–∫: /<WEBHOOK_SECRET>
    if (url.pathname === `/${env.WEBHOOK_SECRET}` && request.method === "POST") {
      const update = await request.json().catch(() => ({}));
      return handleTelegramUpdate(env, update);
    }

    // —ñ–Ω—à—ñ –∑–∞–ø–∏—Ç–∏
    return new Response("ok");
  },
};