// src/index.ts
import { setEnv } from "./config";
import { handleUpdate } from "./router";

export default {
  async fetch(request: Request, env: any, ctx: ExecutionContext): Promise<Response> {
    try {
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (KV, —Ç–æ–∫–µ–Ω, baseUrl —Ç–æ—â–æ)
      setEnv(env);

      const url = new URL(request.url);

      // –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —â–æ –≤–æ—Ä–∫–µ—Ä –∂–∏–≤–∏–π
      if (url.pathname === "/") {
        return new Response("Senti bot online üöÄ", {
          headers: { "content-type": "text/plain; charset=UTF-8" },
        });
      }

      // –û–±—Ä–æ–±–∫–∞ Telegram webhook
      if (url.pathname.startsWith("/webhook")) {
        if (request.method !== "POST") {
          return new Response("Method Not Allowed", { status: 405 });
        }

        const update = await request.json<any>();
        // –¥–µ–ª–µ–≥—É—î–º–æ —Ä–æ—É—Ç–µ—Ä—É
        await handleUpdate(update, ctx);
        return new Response("OK");
      }

      return new Response("Not found", { status: 404 });
    } catch (err: any) {
      console.error("Worker error:", err);
      return new Response("Internal Error: " + (err?.message || err), { status: 500 });
    }
  },
} satisfies ExportedHandler;