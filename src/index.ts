// src/index.ts

/* --------------------------- Env & Types --------------------------- */
export type Env = {
  BOT_TOKEN: string;             // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ: —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
  API_BASE_URL?: string;         // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: –±–∞–∑–æ–≤–∏–π URL Telegram API
};

type TgChat = { id: number };
type TgUser = { id: number; language_code?: string };
type TgMessage = { message_id: number; text?: string; chat: TgChat; from?: TgUser };
type TgUpdate = { update_id: number; message?: TgMessage };

/* --------------------------- Consts ------------------------------- */
const WEBHOOK_PATH = "/webhook/senti1984";

/* --------------------------- Telegram utils ----------------------- */
function tgBase(env: Env) {
  const base = env.API_BASE_URL?.replace(/\/+$/, "") || "https://api.telegram.org";
  return `${base}/bot${env.BOT_TOKEN}`;
}

async function tgCall<T>(env: Env, method: string, payload: Record<string, unknown>): Promise<T> {
  const res = await fetch(`${tgBase(env)}/${method}`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(payload),
  });
  if (!res.ok) {
    const text = await res.text().catch(() => "");
    throw new Error(`tg ${method} HTTP ${res.status}: ${text}`);
  }
  const data = await res.json<any>();
  if (!data?.ok) throw new Error(`tg ${method} not ok: ${JSON.stringify(data)}`);
  return data.result as T;
}

async function sendMessage(env: Env, chat_id: number, text: string, extra?: Record<string, unknown>) {
  return tgCall(env, "sendMessage", {
    chat_id,
    text,
    // –Ω–µ –≤–∫–∞–∑—É—î–º–æ parse_mode, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–∞–¥—ñ–Ω—å —á–µ—Ä–µ–∑ —Ä–æ–∑–º—ñ—Ç–∫—É
    disable_web_page_preview: true,
    ...extra,
  });
}

/* --------------------------- Helpers ------------------------------ */
function isCommand(msg: TgMessage | undefined, name: string): boolean {
  const t = msg?.text ?? "";
  const re = new RegExp(`^\\/${name}(?:@\\w+)?(?:\\s|$)`, "i");
  return re.test(t);
}
function afterCommandText(msg: TgMessage, name: string): string {
  const t = msg.text ?? "";
  return t.replace(new RegExp(`^\\/${name}(?:@\\w+)?\\s*`, "i"), "");
}

function helpText(): string {
  return [
    "üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:",
    "",
    "/start ‚Äì –∑–∞–ø—É—Å–∫ —ñ –≤—ñ—Ç–∞–Ω–Ω—è",
    "/ping ‚Äì –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤ º—è–∑–∫—É (pong)",
    "/health ‚Äì –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤–µ—Ä–∞",
    "/help ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
    "/wiki <–∑–∞–ø–∏—Ç> ‚Äì –∫–æ—Ä–æ—Ç–∫–∞ –¥–æ–≤—ñ–¥–∫–∞ –∑ –í—ñ–∫—ñ–ø–µ–¥—ñ—ó",
    "",
    "‚ö° –ù–∞–¥–∞–ª—ñ –±—É–¥—É—Ç—å –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (AI, —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó —Ç–æ—â–æ).",
  ].join("\n");
}

/* --------------------------- Wiki (uk) ---------------------------- */
async function wikiLookup(query: string, lang = "uk") {
  // 1) –ü–æ—à—É–∫ –ø–µ—Ä—à–æ–≥–æ –∑–±—ñ–≥—É
  const searchUrl =
    `https://${lang}.wikipedia.org/w/api.php?action=opensearch&limit=1&namespace=0&format=json&origin=*&search=` +
    encodeURIComponent(query);
  const searchRes = await fetch(searchUrl);
  if (!searchRes.ok) throw new Error(`wiki search HTTP ${searchRes.status}`);
  const arr = (await searchRes.json()) as [string, string[], string[], string[]];
  const title = arr?.[1]?.[0];
  if (!title) return null;

  // 2) –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å
  const sumUrl =
    `https://${lang}.wikipedia.org/api/rest_v1/page/summary/` + encodeURIComponent(title);
  const sumRes = await fetch(sumUrl, { headers: { "accept": "application/json" } });
  if (!sumRes.ok) throw new Error(`wiki summary HTTP ${sumRes.status}`);
  const sum = await sumRes.json<any>();
  const extract: string = sum.extract || "";
  const url: string = sum.content_urls?.desktop?.page || `https://${lang}.wikipedia.org/wiki/${encodeURIComponent(title)}`;

  return { title, extract, url };
}

/* --------------------------- Handlers ----------------------------- */
async function handleStart(env: Env, msg: TgMessage) {
  return sendMessage(
    env,
    msg.chat.id,
    "‚úÖ Senti –æ–Ω–ª–∞–π–Ω\n–ù–∞–¥—ñ—à–ª–∏ /ping —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
  );
}
async function handlePing(env: Env, msg: TgMessage) {
  return sendMessage(env, msg.chat.id, "pong ‚úÖ");
}
async function handleHealth(env: Env, msg: TgMessage) {
  return sendMessage(env, msg.chat.id, "ok ‚úÖ");
}
async function handleHelp(env: Env, msg: TgMessage) {
  return sendMessage(env, msg.chat.id, helpText());
}
async function handleWiki(env: Env, msg: TgMessage) {
  const q = afterCommandText(msg, "wiki").trim();
  if (!q) {
    return sendMessage(env, msg.chat.id, "‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /wiki <–∑–∞–ø–∏—Ç>\n–ù–∞–ø—Ä.: /wiki –ö–∏—ó–≤");
  }
  try {
    const res = await wikiLookup(q, (msg.from?.language_code || "uk").split("-")[0] || "uk");
    if (!res) return sendMessage(env, msg.chat.id, `–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º ‚Äú${q}‚Äù`);
    const text =
      `üìñ <b>${res.title}</b>\n\n` +
      `${res.extract}\n\n` +
      `${res.url}`;
    // –±–µ–∑ parse_mode ‚Äî —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º –∑ HTML, –ø—Ä–æ—Å—Ç–æ —à–ª–µ–º–æ —Ç–µ–∫—Å—Ç
    return sendMessage(env, msg.chat.id, text);
  } catch (e) {
    console.error("wiki error:", e);
    return sendMessage(env, msg.chat.id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –í—ñ–∫—ñ–ø–µ–¥—ñ—ó.");
  }
}

/* --------------------------- Webhook router ----------------------- */
async function handleWebhook(env: Env, req: Request): Promise<Response> {
  const update = (await req.json()) as TgUpdate;
  console.log("[webhook] raw update:", JSON.stringify(update));
  const msg = update.message;
  if (!msg) return new Response("OK");

  try {
    if (isCommand(msg, "start"))  await handleStart(env, msg);
    else if (isCommand(msg, "ping"))   await handlePing(env, msg);
    else if (isCommand(msg, "health")) await handleHealth(env, msg);
    else if (isCommand(msg, "help"))   await handleHelp(env, msg);
    else if (isCommand(msg, "wiki"))   await handleWiki(env, msg);
    // —ñ–Ω—à—ñ ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ —Ç–∏—Ö–æ
  } catch (e) {
    console.error("handler error:", e);
    // –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ 200, —â–æ–± TG –Ω–µ —Ä–µ—Ç—Ä–∞—ó–≤
  }
  return new Response("OK");
}

/* --------------------------- Worker entry ------------------------- */
function json(data: unknown, init?: ResponseInit) {
  return new Response(JSON.stringify(data), {
    headers: { "content-type": "application/json; charset=utf-8" },
    ...init,
  });
}

export default {
  async fetch(req: Request, env: Env): Promise<Response> {
    const url = new URL(req.url);

    // GET /health
    if (req.method === "GET" && url.pathname === "/health") {
      return json({ ok: true, ts: Date.now() });
    }

    // POST /webhook/senti1984
    if (req.method === "POST" && url.pathname === WEBHOOK_PATH) {
      return handleWebhook(env, req);
    }

    // –º–µ—Ç–æ–¥ –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ
    if (!["GET", "POST"].includes(req.method)) {
      return new Response("Method not allowed", { status: 405 });
    }

    return new Response("Not found", { status: 404 });
  },
} satisfies ExportedHandler<Env>;