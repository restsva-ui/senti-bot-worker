// src/commands/likepanel.ts
import { CFG } from "../config";
import { sendMessage, editMessageText, answerCallbackQuery } from "../telegram/api";

// –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ç–∏–ø–∏ –∑ Telegram
type TGUser = { id: number };
type TGChat = { id: number };
type TGMessage = { message_id: number; chat: TGChat };
type TGCallbackQuery = { id: string; from: TGUser; data?: string; message?: TGMessage };
type TGUpdate = { callback_query?: TGCallbackQuery };

type StateUnique = { up: number; down: number; voters: Record<string, "up" | "down"> };
type StateCumulative = { up: number; down: number };

const PREFIX = "likes";

function kvKey(chatId: number, messageId: number) {
  return `${PREFIX}:${chatId}:${messageId}`;
}

function likeText(up: number, down: number) {
  return `–û—Ü—ñ–Ω–∫–∏: üëç ${up} | üëé ${down}`;
}

function keyboard() {
  return {
    inline_keyboard: [
      [{ text: "üëç", callback_data: "like:up" }, { text: "üëé", callback_data: "like:down" }],
    ],
  };
}

async function getUniqueState(chatId: number, messageId: number): Promise<StateUnique> {
  const raw = await CFG.KV.get(kvKey(chatId, messageId));
  if (!raw) return { up: 0, down: 0, voters: {} };
  try {
    const parsed = JSON.parse(raw) as StateUnique;
    // Backward-compat guard
    return { up: parsed.up || 0, down: parsed.down || 0, voters: parsed.voters || {} };
  } catch {
    return { up: 0, down: 0, voters: {} };
  }
}

async function getCumulativeState(chatId: number, messageId: number): Promise<StateCumulative> {
  const raw = await CFG.KV.get(kvKey(chatId, messageId));
  if (!raw) return { up: 0, down: 0 };
  try {
    const parsed = JSON.parse(raw) as StateCumulative;
    return { up: parsed.up || 0, down: parsed.down || 0 };
  } catch {
    return { up: 0, down: 0 };
  }
}

async function putState(chatId: number, messageId: number, obj: unknown) {
  await CFG.KV.put(kvKey(chatId, messageId), JSON.stringify(obj));
}

/** –í–∏–≤–æ–¥–∏—Ç—å –ø–∞–Ω–µ–ª—å –ª–∞–π–∫—ñ–≤ –∑ –Ω—É–ª—è–º–∏ (—Ä–∞—Ö—É–Ω–æ–∫ –ø—ñ–¥—Ç—è–≥–Ω–µ—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∫–ª—ñ–∫—É) */
export async function likepanel(chatId: number) {
  await sendMessage(chatId, likeText(0, 0), { reply_markup: keyboard() });
}

/** –û–±—Ä–æ–±–∫–∞ callback‚Äô—ñ–≤ –≤—ñ–¥ –∫–Ω–æ–ø–æ–∫ üëç / üëé. –ü–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ. */
export async function handleLikeCallback(update: TGUpdate): Promise<boolean> {
  const cq = update.callback_query;
  if (!cq || !cq.data || !cq.message) return false;

  const data = cq.data;
  if (data !== "like:up" && data !== "like:down") return false;

  const chatId = cq.message.chat.id;
  const messageId = cq.message.message_id;
  const direction = data === "like:up" ? "up" : "down";

  // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è ¬´–≥–æ–¥–∏–Ω–Ω–∏–∫–∞¬ª
  await answerCallbackQuery(cq.id).catch(() => {});

  const mode = (CFG.LIKE_MODE || "unique").toLowerCase(); // "unique" | "cumulative"

  if (mode === "cumulative") {
    // –ö–æ–∂–µ–Ω –∫–ª—ñ–∫ ‚Äî +1 (–Ω–∞–≤—ñ—Ç—å –≤—ñ–¥ —Ç–æ–≥–æ —Å–∞–º–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
    const st = await getCumulativeState(chatId, messageId);
    if (direction === "up") st.up += 1;
    else st.down += 1;

    await putState(chatId, messageId, st);
    await editMessageText(chatId, messageId, likeText(st.up, st.down), { reply_markup: keyboard() });
    return true;
  }

  // UNIQUE: –æ–¥–∏–Ω –≥–æ–ª–æ—Å –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–∏ –º—ñ–∂ up/down
  const st = await getUniqueState(chatId, messageId);
  const uid = String(cq.from.id);
  const prev = st.voters[uid];

  if (!prev) {
    // –ü–µ—Ä—à–∏–π –≥–æ–ª–æ—Å
    if (direction === "up") st.up += 1;
    else st.down += 1;
    st.voters[uid] = direction;
  } else if (prev !== direction) {
    // –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É
    if (prev === "up") st.up = Math.max(0, st.up - 1);
    else st.down = Math.max(0, st.down - 1);

    if (direction === "up") st.up += 1;
    else st.down += 1;

    st.voters[uid] = direction;
  } // —è–∫—â–æ –∫–ª—ñ–∫ —É —Ç–æ–π —Å–∞–º–∏–π –±—ñ–∫ ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω—é—î–º–æ

  await putState(chatId, messageId, st);
  await editMessageText(chatId, messageId, likeText(st.up, st.down), { reply_markup: keyboard() });
  return true;
}