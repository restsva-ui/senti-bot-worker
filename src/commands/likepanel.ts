// src/commands/likepanel.ts
// –õ–µ–≥–∫–∞ —Ç–∞ –Ω–∞–¥—ñ–π–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–∞–Ω–µ–ª—ñ –ª–∞–π–∫—ñ–≤ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º 1 —é–∑–µ—Ä -> 1 –≥–æ–ª–æ—Å

import { sendMessage, editMessageReplyMarkup } from "../telegram/api";
import { getEnv } from "../config"; // —É –Ω–∞—Å —î getEnv() –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø—Ä–∞–≤–æ–∫

type TGUser = { id: number };
type TGMessage = { message_id: number; chat: { id: number } };
type TGCallbackQuery = { id: string; from: TGUser; message?: TGMessage; data?: string };
type TGUpdate = { callback_query?: TGCallbackQuery };

type Counters = { like: number; dislike: number };

const PANEL_ID = "global"; // –æ–¥–Ω–∞ –ø–∞–Ω–µ–ª—å –Ω–∞ –±–æ—Ç–∞; –ø—Ä–∏ –±–∞–∂–∞–Ω–Ω—ñ –º–æ–∂–Ω–∞ `${chatId}`

function cKey(panelId: string) {
  return `likes:${panelId}`;                       // JSON { like, dislike }
}
function uKey(panelId: string, userId: number) {
  return `likes:${panelId}:u:${userId}`;          // "up" | "down"
}

function buttons() {
  return {
    inline_keyboard: [
      [{ text: "üëç", callback_data: "like:up" }, { text: "üëé", callback_data: "like:down" }],
    ],
  };
}

async function readJSON<T>(ns: KVNamespace, key: string, fallback: T): Promise<T> {
  const raw = await ns.get(key);
  if (!raw) return fallback;
  try {
    return JSON.parse(raw) as T;
  } catch {
    return fallback;
  }
}

async function writeJSON(ns: KVNamespace, key: string, val: unknown): Promise<void> {
  await ns.put(key, JSON.stringify(val));
}

// –ü—É–±–ª—ñ—á–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–∞–Ω–µ–ª—å –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
export async function likepanel(chatId: number) {
  const env = getEnv();
  const ns = env.KV;
  const counters = await readJSON<Counters>(ns, cKey(PANEL_ID), { like: 0, dislike: 0 });
  const text = `–û—Ü—ñ–Ω–∫–∏: üëç ${counters.like} | üëé ${counters.dislike}`;
  await sendMessage(chatId, text, buttons());
}

// –û–±—Ä–æ–±–Ω–∏–∫ callback –∑ –∫–Ω–æ–ø–æ–∫ üëç/üëé
// –ü–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ —Ü–µ –Ω–∞—à callback —ñ –º–∏ –π–æ–≥–æ –æ–±—Ä–æ–±–∏–ª–∏
export async function handleLikeCallback(update: TGUpdate): Promise<boolean> {
  const cq = update.callback_query;
  if (!cq || !cq.data) return false;
  if (!cq.data.startsWith("like:")) return false;

  const env = getEnv();
  const ns = env.KV;

  const choice = cq.data.split(":")[1]; // "up" | "down"
  if (choice !== "up" && choice !== "down") return false;

  // –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏
  const panelId = PANEL_ID;
  const chatId = cq.message?.chat.id;
  if (!chatId) return true; // —á—É–∂—ñ callback-–∏ —ñ–≥–Ω–æ—Ä—É—î–º–æ –±–µ–∑ –ø–æ–º–∏–ª–∫–∏

  // –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
  const counters = await readJSON<Counters>(ns, cKey(panelId), { like: 0, dislike: 0 });
  const prev = (await ns.get(uKey(panelId, cq.from.id))) as "up" | "down" | null;

  // –ù–æ–≤–∞ –¥—ñ—è == –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≥–æ–ª–æ—Å -> –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω—é—î–º–æ
  if (prev === choice) {
    // –ø—Ä–æ—Å—Ç–æ –æ—Å–≤—ñ–∂–∏–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —â–æ–± –Ω–µ –±—É–ª–æ ‚Äú–∑–∞–≤–∏—Å–∞–Ω—å‚Äù
    if (cq.message) {
      await editMessageReplyMarkup(chatId, cq.message.message_id, buttons()).catch(() => {});
    }
    return true;
  }

  // –ó–∞–±–µ–∑–ø–µ—á–∏–º–æ –∫–æ—Ä–µ–∫—Ç–Ω—ñ –º–µ–∂—ñ
  const safe = (n: number) => (n < 0 ? 0 : n);

  // –ó–Ω—è—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≥–æ–ª–æ—Å, —è–∫—â–æ –±—É–≤
  if (prev === "up") counters.like = safe(counters.like - 1);
  if (prev === "down") counters.dislike = safe(counters.dislike - 1);

  // –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –Ω–æ–≤–∏–π –≥–æ–ª–æ—Å
  if (choice === "up") counters.like = safe(counters.like + 1);
  else counters.dislike = safe(counters.dislike + 1);

  // –ó–±–µ—Ä–µ–≥—Ç–∏
  await writeJSON(ns, cKey(panelId), counters);
  await ns.put(uKey(panelId, cq.from.id), choice);

  // –ü–µ—Ä–µ-–ø–æ–∫–∞–∑–∞—Ç–∏ –ø–∞–Ω–µ–ª—å (–ø—Ä–æ—Å—Ç–∏–π —à–ª—è—Ö –±–µ–∑ editMessageText)
  const text = `–û—Ü—ñ–Ω–∫–∏: üëç ${counters.like} | üëé ${counters.dislike}`;
  await sendMessage(chatId, text, buttons());

  return true;
}