// src/commands/kvdebug.ts
// –î–µ–±–∞–≥-–∫–æ–º–∞–Ω–¥–∏ –¥–ª—è KV —Å—Ö–æ–≤–∏—â–∞ –ª–∞–π–∫—ñ–≤.

import { sendMessage } from "../telegram/api";

// –û–≥–æ–ª–æ—à—É—î–º–æ KV binding, —â–æ–± TypeScript –Ω–µ —Å–≤–∞—Ä–∏–≤—Å—è –ø—ñ–¥ —á–∞—Å –±—ñ–ª–¥—É.
// –£ —Ä–∞–Ω—Ç–∞–π–º—ñ —Ü–µ–π binding –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î Cloudflare Workers.
declare const LIKES_KV: any;

// –î–æ–ø–æ–º—ñ–∂–Ω–µ: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ binding'—É
function hasKv(): boolean {
  return typeof (globalThis as any).LIKES_KV !== "undefined" && LIKES_KV;
}

// –ü—Ä–æ–±—É—î–º–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ —Ä—ñ–∑–Ω—ñ –º–æ–∂–ª–∏–≤—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è
function parseLikesValue(raw: string | null): { like: number; dislike: number } {
  if (!raw) return { like: 0, dislike: 0 };
  try {
    const v = JSON.parse(raw);
    // –ø—ñ–¥—Ç—Ä–∏–º—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç–∏:
    // {like: N, dislike: M} –∞–±–æ {"like":N,"dislike":M}
    if (
      typeof v === "object" &&
      v !== null &&
      typeof v.like !== "undefined" &&
      typeof v.dislike !== "undefined"
    ) {
      const like = Number(v.like) || 0;
      const dislike = Number(v.dislike) || 0;
      return { like, dislike };
    }
  } catch {}
  // fallback: –∫–æ–ª–∏ –∑–±–µ—Ä—ñ–≥–∞–ª–∏ –ø—Ä–æ—Å—Ç–æ "like" / "dislike" –∞–±–æ —á–∏—Å–ª–æ
  if (raw === "like") return { like: 1, dislike: 0 };
  if (raw === "dislike") return { like: 0, dislike: 1 };
  const n = Number(raw);
  if (!Number.isNaN(n)) return { like: n, dislike: 0 };
  return { like: 0, dislike: 0 };
}

// /kvtest ‚Äî –ø–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å KV, —Å—É–º–∞—Ä–Ω—ñ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ —Ç–∞ –ø—Ä–∏–∫–ª–∞–¥–∏ –∫–ª—é—á—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
export async function cmdKvTest(chatId: number): Promise<void> {
  if (!hasKv()) {
    await sendMessage(chatId, "‚ùå KV –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π");
    return;
  }

  // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∫–ª—é—á—ñ –≥–æ–ª–æ—Å—ñ–≤
  const allKeys: string[] = [];
  let cursor: string | undefined = undefined;
  do {
    // list –º–æ–∂–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –ø–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–æ
    const page = await LIKES_KV.list({ prefix: "likes:", cursor });
    (page.keys as Array<{ name: string }>).forEach((k) => allKeys.push(k.name));
    cursor = page.cursor || undefined;
    if (!page.list_complete && !cursor) break;
  } while (cursor);

  // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—É–º–∞—Ä–Ω–∏—Ö like/dislike
  let like = 0;
  let dislike = 0;

  // –©–æ–± –Ω–µ —Ä–æ–±–∏—Ç–∏ —Å–æ—Ç–Ω—ñ get, –≤—ñ–∑—å–º–µ–º–æ –ø–µ—Ä—à—ñ –¥–æ 30 –∫–ª—é—á—ñ–≤ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É,
  // –∞ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ —Å–ø—Ä–æ–±—É—î–º–æ –ø–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ç–µ–∂ –ø–æ —Ü–∏–º –∫–ª—é—á–∞–º (—Ü—å–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–ª—è –¥–µ–±–∞–≥-–∫–æ–º–∞–Ω–¥–∏).
  const sampleKeys = allKeys.slice(0, 10);
  for (const k of allKeys) {
    const v = await LIKES_KV.get(k); // –∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ JSON/—Ä—è–¥–æ–∫
    const p = parseLikesValue(v);
    like += p.like;
    dislike += p.dislike;
  }

  const userExamples =
    sampleKeys
      .map((k: string) => k.replace(/^likes:/, "")) // –ª–∏—à–∞—î–º–æ id
      .filter(Boolean)
      .join(", ") || "‚Äî";

  const text =
    `KV —Å—Ç–∞—Ç—É—Å\n` +
    `LIKES_KV: OK\n\n` +
    `–õ—ñ—á–∏–ª—å–Ω–∏–∫–∏\n` +
    `üëç like: ${like}\n` +
    `üëé dislike: ${dislike}\n\n` +
    `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ –≥–æ–ª–æ—Å–æ–º (–ø—Ä–∏–∫–ª–∞–¥–∏):\n` +
    `${userExamples}`;

  await sendMessage(chatId, text);
}

// /resetlikes ‚Äî –≤–∏–¥–∞–ª—è—î –≤—Å—ñ –∫–ª—é—á—ñ –≥–æ–ª–æ—Å—ñ–≤ —Ç–∞ –æ–±–Ω—É–ª—è—î –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
export async function cmdResetLikes(chatId: number): Promise<void> {
  if (!hasKv()) {
    await sendMessage(chatId, "‚ùå KV –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π");
    return;
  }

  // –ó—ñ–±—Ä–∞—Ç–∏ –≤—Å—ñ –∫–ª—é—á—ñ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º likes:
  const keys: string[] = [];
  let cursor: string | undefined = undefined;
  do {
    const page = await LIKES_KV.list({ prefix: "likes:", cursor });
    (page.keys as Array<{ name: string }>).forEach((k) => keys.push(k.name));
    cursor = page.cursor || undefined;
    if (!page.list_complete && !cursor) break;
  } while (cursor);

  // –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ
  let removed = 0;
  for (const k of keys) {
    await LIKES_KV.delete(k);
    removed++;
  }

  await sendMessage(
    chatId,
    `‚úÖ –°–∫–∏–Ω—É—Ç–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ (üëç0 | üëé0) —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –≥–æ–ª–æ—Å—ñ–≤: ${removed}`
  );
}