// src/commands/kvdebug.ts

import { getEnv } from "../config";
import { sendMessage } from "../telegram/api";

const COUNTS_KEY = "likes:counts";
const USER_PREFIX = "likes:user:";

type Counts = { like: number; dislike: number };

// –î–æ–ø–æ–º—ñ–∂–Ω–µ: –±–µ–∑–ø–µ—á–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
async function readCounts(kv: KVNamespace): Promise<Counts> {
  try {
    const raw = await kv.get(COUNTS_KEY);
    if (!raw) return { like: 0, dislike: 0 };
    const j = JSON.parse(raw) as Partial<Counts>;
    return {
      like: Number(j.like ?? 0),
      dislike: Number(j.dislike ?? 0),
    };
  } catch {
    return { like: 0, dislike: 0 };
  }
}

// –î–æ–ø–æ–º—ñ–∂–Ω–µ: –∑–∞–ø–∏—Å–∞—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
async function writeCounts(kv: KVNamespace, c: Counts) {
  await kv.put(COUNTS_KEY, JSON.stringify(c));
}

/**
 * /kvtest ‚Äî –ø–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤‚Äô—è–∑–∫–∏ LIKES_KV, –ø–æ—Ç–æ—á–Ω—ñ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
 * —Ç–∞ –ø—Ä–∏–∫–ª–∞–¥–∏ –∫–ª—é—á—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —â–æ –≥–æ–ª–æ—Å—É–≤–∞–ª–∏
 */
export async function cmdKvTest(chatId: number) {
  const env = getEnv();

  if (!env.LIKES_KV) {
    await sendMessage(chatId, "‚ùå KV –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π (LIKES_KV)");
    return;
  }

  const kv = env.LIKES_KV;
  const counts = await readCounts(kv);

  // –ó–±–µ—Ä–µ–º–æ –∫—ñ–ª—å–∫–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –∫–ª—é—á—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
  const examples: string[] = [];
  let cursor: string | undefined = undefined;
  do {
    const page = await kv.list({ prefix: USER_PREFIX, cursor });
    for (const k of page.keys) {
      if (examples.length < 3) examples.push(k.name);
    }
    cursor = page.list_complete ? undefined : page.cursor;
    // –¥–æ—Å–∏—Ç—å –æ–¥–Ω—ñ—î—ó-–¥–≤–æ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –¥–ª—è –ø—Ä–µ–≤‚Äô—é
  } while (cursor && examples.length < 3);

  const votersInfo =
    examples.length === 0
      ? "–Ω–µ–º–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤"
      : examples.map((k) => k.replace(USER_PREFIX, "")).join(", ");

  const text =
    `KV —Å—Ç–∞—Ç—É—Å\n` +
    `LIKES_KV: OK\n\n` +
    `–õ—ñ—á–∏–ª—å–Ω–∏–∫–∏\n` +
    `üëç like: ${counts.like}\n` +
    `üëé dislike: ${counts.dislike}\n\n` +
    `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ –≥–æ–ª–æ—Å–æ–º (–ø—Ä–∏–∫–ª–∞–¥–∏): ${votersInfo}`;

  await sendMessage(chatId, text);
}

/**
 * /resetlikes ‚Äî —Å–∫–∏–¥–∞—î –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ —Ç–∞ –≤—Å—ñ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –≥–æ–ª–æ—Å–∏
 * (–≤–∏–¥–∞–ª—è—î –∫–ª—é—á—ñ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º likes:user:)
 */
export async function cmdResetLikes(chatId: number) {
  const env = getEnv();

  if (!env.LIKES_KV) {
    await sendMessage(chatId, "‚ùå KV –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π (LIKES_KV)");
    return;
  }

  const kv = env.LIKES_KV;

  // 1) –°–∫–∏–Ω—É—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—ñ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
  await writeCounts(kv, { like: 0, dislike: 0 });

  // 2) –í–∏–¥–∞–ª–∏—Ç–∏ —É—Å—ñ –≥–æ–ª–æ—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ø–∞–≥—ñ–Ω–∞—Ü—ñ—è)
  let deleted = 0;
  let cursor: string | undefined = undefined;
  do {
    const page = await kv.list({ prefix: USER_PREFIX, cursor });
    for (const k of page.keys) {
      await kv.delete(k.name);
      deleted++;
    }
    cursor = page.list_complete ? undefined : page.cursor;
  } while (cursor);

  await sendMessage(
    chatId,
    `‚úÖ –°–∫–∏–Ω—É—Ç–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ (üëç0 | üëé0) —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –≥–æ–ª–æ—Å—ñ–≤: ${deleted}`
  );
}