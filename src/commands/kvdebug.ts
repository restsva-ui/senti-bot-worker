// src/commands/kvdebug.ts
// –£—Å—ñ —Å–ª—É–∂–±–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –∑ KV: /kvtest, /resetlikes, /stats, /export

import { getEnv, type Env } from "../config";
import { sendMessage } from "../telegram/api";

type Counts = { like: number; dislike: number };

const COUNTS_KEY = "likes:counts";
const USER_PREFIX = "likes:user:";

async function readCounts(kv: KVNamespace): Promise<Counts> {
  try {
    const raw = await kv.get(COUNTS_KEY);
    if (!raw) return { like: 0, dislike: 0 };
    const parsed = JSON.parse(raw) as Partial<Counts>;
    return {
      like: Number(parsed.like ?? 0),
      dislike: Number(parsed.dislike ?? 0),
    };
  } catch {
    return { like: 0, dislike: 0 };
  }
}

export async function cmdKvList(chatId: number) {
  const env = getEnv();
  const kv = env.KV;
  if (!kv) {
    await sendMessage(chatId, "‚ùå KV –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π");
    return;
  }

  const counts = await readCounts(kv);
  const users = await kv.list({ prefix: USER_PREFIX });

  const examples =
    users.keys
      .slice(0, 5)
      .map((k) => k.name.replace(USER_PREFIX, "likes:user:"))
      .join("\n") || "‚Äî";

  const text =
    `KV —Å—Ç–∞—Ç—É—Å\nLIKES_KV: OK\n\n` +
    `–õ—ñ—á–∏–ª—å–Ω–∏–∫–∏\nüëç like: ${counts.like}\nüëé dislike: ${counts.dislike}\n\n` +
    `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ –≥–æ–ª–æ—Å–æ–º (–ø—Ä–∏–∫–ª–∞–¥–∏):\n${examples}`;

  await sendMessage(chatId, text);
}

export async function cmdResetLikes(chatId: number) {
  const env = getEnv();
  const kv = env.KV;
  if (!kv) {
    await sendMessage(chatId, "‚ùå KV –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π");
    return;
  }

  // –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–¥—Å—É–º–∫–∏
  await kv.delete(COUNTS_KEY);

  // –≤–∏–¥–∞–ª–∏—Ç–∏ –≥–æ–ª–æ—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
  const users = await kv.list({ prefix: USER_PREFIX });
  let deleted = 0;
  for (const k of users.keys) {
    await kv.delete(k.name);
    deleted++;
  }

  await sendMessage(
    chatId,
    `‚úÖ –°–∫–∏–Ω—É—Ç–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ (üëç0 | üëé0) —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –≥–æ–ª–æ—Å—ñ–≤: ${deleted}`
  );
}

// ===== –ù–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏: /stats —ñ /export (–ª–∏—à–µ OWNER) =====

/** –ö–æ—Ä–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */
export async function cmdStats(chatId: number) {
  const env = getEnv();
  const kv = env.KV;
  if (!kv) {
    await sendMessage(chatId, "‚ùå KV –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π");
    return;
  }

  const counts = await readCounts(kv);
  const users = await kv.list({ prefix: USER_PREFIX });
  const voters = users.keys.length;

  const text =
    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∞–π–∫—ñ–≤\n" +
    `–£—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –≥–æ–ª–æ—Å–æ–º: ${voters}\n` +
    `üëç: ${counts.like} | üëé: ${counts.dislike}\n` +
    (voters > 0
      ? `–ü—Ä–∏–∫–ª–∞–¥–∏ –∫–ª—é—á—ñ–≤:\n` +
        users.keys
          .slice(0, 5)
          .map((k) => k.name.replace(USER_PREFIX, "likes:user:"))
          .join("\n")
      : "");

  await sendMessage(chatId, text || "–ü–æ–∫–∏ —â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î.");
}

/** –ï–∫—Å–ø–æ—Ä—Ç —É –∫–æ–º–ø–∞–∫—Ç–Ω–∏–π JSON (–∑ –ø—ñ–¥—Ä—ñ–∑–∞–Ω–Ω—è–º, —è–∫—â–æ –¥—É–∂–µ –≤–µ–ª–∏–∫–∏–π) */
export async function cmdExport(chatId: number) {
  const env = getEnv();
  const kv = env.KV;
  if (!kv) {
    await sendMessage(chatId, "‚ùå KV –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π");
    return;
  }

  const counts = await readCounts(kv);
  const users = await kv.list({ prefix: USER_PREFIX });

  // –ó–±–µ—Ä–µ–º–æ –ø—Ä–æ—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ —ó—Ö–Ω—ñ–π –≥–æ–ª–æ—Å
  const voters: Record<string, "like" | "dislike"> = {};
  for (const k of users.keys) {
    const userId = k.name.replace(USER_PREFIX, "");
    const v = await kv.get(k.name);
    if (v === "like" || v === "dislike") voters[userId] = v;
  }

  const payload = {
    counts,
    voters_total: Object.keys(voters).length,
    voters, // –º–æ–∂–µ –±—É—Ç–∏ –≤–µ–ª–∏–∫–∏–º
  };

  let json = JSON.stringify(payload);
  // Telegram –æ–±–º–µ–∂—É—î ~4096 —Å–∏–º–≤–æ–ª—ñ–≤ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ ‚Äî –∑–∞–ª–∏—à–∏–º–æ –∑–∞–ø–∞—Å
  const LIMIT = 3800;
  if (json.length > LIMIT) {
    // —è–∫—â–æ –∑–∞–±–∞–≥–∞—Ç–æ ‚Äî –≤—ñ–¥—Ä—ñ–∂–µ–º–æ –¥–µ—Ç–∞–ª—ñ, –∞–ª–µ –∑–∞–ª–∏—à–∏–º–æ –ø—ñ–¥—Å—É–º–∫–∏
    json = JSON.stringify({
      counts,
      voters_total: Object.keys(voters).length,
      note:
        "payload —Å–∫–æ—Ä–æ—á–µ–Ω–æ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π). –î–ª—è –ø–æ–≤–Ω–æ–≥–æ –¥–∞–º–ø—É –¥–æ–≤–µ–¥–µ—Ç—å—Å—è –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ñ–∞–π–ª–æ–º.",
    });
  }

  await sendMessage(chatId, "üì§ –ï–∫—Å–ø–æ—Ä—Ç JSON:\n<pre>" + json + "</pre>", {
    parse_mode: "HTML",
  });
}