// src/commands/ai.ts
type Env = {
  BOT_TOKEN: string;
  API_BASE_URL: string;
};

type Update = {
  message?: {
    message_id: number;
    chat: { id: number };
    text?: string;
  };
};

async function reply(env: Env, chatId: number, text: string, replyTo?: number) {
  const url = `${env.API_BASE_URL}/bot${env.BOT_TOKEN}/sendMessage`;
  const body = {
    chat_id: chatId,
    text,
    parse_mode: "Markdown",
    reply_to_message_id: replyTo,
  };
  await fetch(url, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(body),
  });
}

/** –Ü–º–µ–Ω–æ–≤–∞–Ω–∏–π –µ–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ä–µ—î—Å—Ç—Ä—É */
export async function ai(update: Update, env: Env) {
  const msg = update.message;
  if (!msg) return;

  const chatId = msg.chat.id;
  const text = msg.text ?? "";
  const args = text.split(/\s+/).slice(1).join(" ").trim();

  if (!args) {
    await reply(
      env,
      chatId,
      "ü§ñ *AI —Ä–µ–∂–∏–º* (–±–µ—Ç–∞)\n–ù–∞–¥—ñ—à–ª–∏: `/ai <–∑–∞–ø–∏—Ç>`",
      msg.message_id
    );
    return;
  }

  // –ü–æ–∫–∏ —â–æ —Ü–µ –∑–∞–≥–ª—É—à–∫–∞. –ü—ñ–∑–Ω—ñ—à–µ –ø—ñ–¥‚Äô—î–¥–Ω–∞—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—é –¥–æ –º–æ–¥–µ–ª–µ–π.
  await reply(
    env,
    chatId,
    `‚úÖ –ü—Ä–∏–π–Ω—è–≤ –∑–∞–ø–∏—Ç: _${args}_\n(–ø–æ–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞–≥–ª—É—à–∫–∞)`,
    msg.message_id
  );
}

/** default-–µ–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ—Å–Ω—É—é—á–∏–º —Ä–æ—É—Ç–µ—Ä–æ–º */
export default ai;