// src/commands/stats.ts
import type { TgUpdate } from "../types";

/**
 * /stats ‚Äî –ø—ñ–¥—Å—É–º–æ–∫ –ª–∞–π–∫—ñ–≤ —É –ø–æ—Ç–æ—á–Ω–æ–º—É —á–∞—Ç—ñ.
 * –§–æ—Ä–º–∞—Ç –∫–ª—é—á—ñ–≤ —É KV: likes:<chatId>:<messageId>
 */
export const statsCommand = {
  name: "stats",
  description: "–ü–æ–∫–∞–∑—É—î —Å—É–º—É –≤—Å—ñ—Ö ‚ù§Ô∏è —É —á–∞—Ç—ñ —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ–∑ –ª–∞–π–∫–∞–º–∏",
  async execute(
    env: { BOT_TOKEN: string; API_BASE_URL?: string; LIKES_KV: KVNamespace },
    update: TgUpdate
  ) {
    const msg = update.message;
    const chatId = msg?.chat?.id;
    if (!chatId) return;

    const prefix = `likes:${chatId}:`;
    let totalLikes = 0;
    let messagesWithLikes = 0;

    // –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è KV.list
    let cursor: string | undefined = undefined;
    const LIMIT = 100;      // –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑–∞ –æ–¥–∏–Ω list
    const MAX_KEYS = 1000;  // –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –Ω–∞–¥–º—ñ—Ä–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç
    let scanned = 0;

    outer: while (true) {
      const page = await env.LIKES_KV.list({ prefix, cursor, limit: LIMIT });
      for (const k of page.keys) {
        if (scanned >= MAX_KEYS) break outer;
        scanned++;

        try {
          const val = await env.LIKES_KV.get(k.name);
          if (!val) continue;
          const parsed = JSON.parse(val);
          const n = Number(parsed?.count);
          if (Number.isFinite(n) && n > 0) {
            totalLikes += n;
            messagesWithLikes++;
          }
        } catch {
          // —ñ–≥–Ω–æ—Ä—É—î–º–æ –∑–ª–∞–º–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        }
      }
      if (page.list_complete || scanned >= MAX_KEYS) break;
      cursor = page.cursor;
    }

    const truncated = scanned >= MAX_KEYS ? "\n(‚ö†Ô∏è –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –æ–±—Ä—ñ–∑–∞–Ω–æ –Ω–∞ 1000 –∫–ª—é—á–∞—Ö)" : "";
    const text = [
      "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∞–π–∫—ñ–≤</b>",
      `–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ–∑ –ª–∞–π–∫–∞–º–∏: <b>${messagesWithLikes}</b>`,
      `–£—Å—å–æ–≥–æ ‚ù§Ô∏è: <b>${totalLikes}</b>`,
      truncated,
    ].join("\n");

    await sendMessage(env, chatId, text, { parse_mode: "HTML" });
  },
} as const;

/* -------------------- low-level telegram -------------------- */
async function sendMessage(
  env: { BOT_TOKEN: string; API_BASE_URL?: string },
  chatId: number,
  text: string,
  extra?: Record<string, unknown>
) {
  const apiBase = env.API_BASE_URL || "https://api.telegram.org";
  const url = `${apiBase}/bot${env.BOT_TOKEN}/sendMessage`;
  const body = JSON.stringify({ chat_id: chatId, text, ...extra });

  const res = await fetch(url, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body,
  });

  if (!res.ok) {
    const errText = await res.text().catch(() => "");
    console.error("sendMessage error:", res.status, errText);
  }
}