// src/commands/menu.ts
import type { TgUpdate } from "../types";

type Env = { BOT_TOKEN: string; API_BASE_URL?: string };

export const menuCommand = {
  name: "menu",
  description: "–ü–æ–∫–∞–∑—É—î —Å–ø—Ä–æ—â–µ–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏ (Help, Wiki)",
  async execute(env: Env, update: TgUpdate) {
    const chatId = update.message?.chat?.id;
    if (!chatId) return;

    await sendMessage(env, chatId, "üóÇÔ∏è –ú–µ–Ω—é:", {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "‚ÑπÔ∏è Help", callback_data: "menu:help" },
            { text: "üìö Wiki", callback_data: "menu:wiki" },
          ],
        ],
      },
    });
  },
} as const;

// –ß–∏ –º–æ–∂–µ–º–æ –æ–±—Ä–æ–±–∏—Ç–∏ callback –≤—ñ–¥ –º–µ–Ω—é
export function menuCanHandleCallback(data: string) {
  return data?.startsWith("menu:");
}

// –û–±—Ä–æ–±–∫–∞ callback‚Äô—ñ–≤
export async function menuOnCallback(env: Env, update: TgUpdate) {
  const cb = update.callback_query;
  if (!cb?.data) return;
  const chatId = cb.message?.chat?.id;
  if (!chatId) return;

  const action = cb.data.slice("menu:".length);

  if (action === "help") {
    const text =
      "‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n" +
      "‚Ä¢ /start ‚Äî –ü–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n" +
      "‚Ä¢ /ping ‚Äî –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤ º—è–∑–∫—É\n" +
      "‚Ä¢ /health ‚Äî –°—Ç–∞—Ç—É—Å OK\n" +
      "‚Ä¢ /menu ‚Äî –°–ø—Ä–æ—â–µ–Ω–µ –º–µ–Ω—é (Help, Wiki)\n" +
      "‚Ä¢ /echo ‚Äî –ü–æ–≤—Ç–æ—Ä—é—î —Ç–µ–∫—Å—Ç\n" +
      "‚Ä¢ /likes ‚Äî –ü–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫—É ‚ù§Ô∏è —Ç–∞ —Ä–∞—Ö—É—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è\n" +
      "‚Ä¢ /stats ‚Äî –ü–æ–∫–∞–∑—É—î —Å—É–º—É –≤—Å—ñ—Ö ‚ù§Ô∏è —É —á–∞—Ç—ñ —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ–∑ –ª–∞–π–∫–∞–º–∏\n" +
      "‚Ä¢ /wiki ‚Äî –î–æ–≤—ñ–¥–∫–∞ –∑ –í—ñ–∫—ñ: /wiki <lang?> <–∑–∞–ø–∏—Ç> (uk/ru/en/de/fr)";
    await editMessage(env, chatId, cb.message!.message_id, text, {});
    return;
  }

  if (action === "wiki") {
    await editMessage(env, chatId, cb.message!.message_id,
      "üîé –í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è /wiki:", {});
    return;
  }
}

/* -------------------- low-level telegram -------------------- */
async function sendMessage(
  env: Env,
  chatId: number,
  text: string,
  extra?: Record<string, unknown>
) {
  const apiBase = env.API_BASE_URL || "https://api.telegram.org";
  const url = `${apiBase}/bot${env.BOT_TOKEN}/sendMessage`;
  const body = JSON.stringify({ chat_id: chatId, text, ...extra });

  await fetch(url, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body,
  }).catch(() => {});
}

async function editMessage(
  env: Env,
  chatId: number,
  messageId: number,
  text: string,
  extra?: Record<string, unknown>
) {
  const apiBase = env.API_BASE_URL || "https://api.telegram.org";
  const url = `${apiBase}/bot${env.BOT_TOKEN}/editMessageText`;
  const body = JSON.stringify({
    chat_id: chatId,
    message_id: messageId,
    text,
    ...extra,
  });

  await fetch(url, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body,
  }).catch(() => {});
}