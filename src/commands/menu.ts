import type { TgUpdate } from "../types";

const MENU_CB_WIKI = "menu:wiki";
const MENU_CB_HELP = "menu:help";

export function menuCanHandleCallback(data: string) {
  return data === MENU_CB_WIKI || data === MENU_CB_HELP;
}

async function tgCall(
  env: { BOT_TOKEN: string; API_BASE_URL?: string },
  method: string,
  payload: Record<string, unknown>
) {
  const api = env.API_BASE_URL || "https://api.telegram.org";
  const res = await fetch(`${api}/bot${env.BOT_TOKEN}/${method}`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(payload),
  });
  if (!res.ok) {
    const t = await res.text().catch(() => "");
    console.error("tgCall error", method, res.status, t);
  }
  return res.json().catch(() => ({}));
}

export const menuCommand = {
  name: "menu",
  description: "–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é",
  async execute(env: { BOT_TOKEN: string; API_BASE_URL?: string }, update: TgUpdate) {
    const chatId = update.message?.chat?.id;
    if (!chatId) return;
    await tgCall(env, "sendMessage", {
      chat_id: chatId,
      text: "–ú–µ–Ω—é:",
      reply_markup: {
        inline_keyboard: [
          [{ text: "üîé Wiki", callback_data: MENU_CB_WIKI }],
          [{ text: "‚ùì Help", callback_data: MENU_CB_HELP }],
        ],
      },
    });
  },
} as const;

export async function menuOnCallback(
  env: { BOT_TOKEN: string; API_BASE_URL?: string },
  update: TgUpdate
) {
  const cb = update.callback_query!;
  const chatId = cb.message?.chat?.id;
  if (!chatId) return;

  if (cb.data === MENU_CB_HELP) {
    const msg = [
      "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:",
      "‚Ä¢ /wiki <–∑–∞–ø–∏—Ç> ‚Äî –ø–æ—à—É–∫ —É –≤—ñ–∫—ñ. –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ ‚Äî –≤—ñ–¥–∫—Ä–∏—î –∑–∞–ø–∏—Ç.",
      "‚Ä¢ /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫",
      "‚Ä¢ /likes ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ ‚ù§Ô∏è",
      "‚Ä¢ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∞–π–∫—ñ–≤",
    ].join("\n");
    await tgCall(env, "answerCallbackQuery", { callback_query_id: cb.id });
    await tgCall(env, "sendMessage", { chat_id: chatId, text: msg });
    return;
  }

  if (cb.data === MENU_CB_WIKI) {
    await tgCall(env, "answerCallbackQuery", { callback_query_id: cb.id });
    await tgCall(env, "sendMessage", {
      chat_id: chatId,
      text: "‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç –¥–ª—è Wiki –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º-–≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ —Ü–µ.",
      reply_markup: { force_reply: true, selective: true },
    });
  }
}