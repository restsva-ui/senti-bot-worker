// src/commands/wiki.ts
// –õ–µ–≥–∫–∞, –∞–ª–µ –Ω–∞–¥—ñ–π–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è /wiki –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é "–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" —á–µ—Ä–µ–∑ KV.
// –ï–∫—Å–ø–æ—Ä—Ç—É—î —ñ–º–µ–Ω–æ–≤–∞–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏: wiki, wikiSetAwait, wikiMaybeHandleFreeText.
// –¢–∞–∫–æ–∂ –∑–∞–ª–∏—à–µ–Ω–æ export default –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ (—è–∫—â–æ –¥–µ—Å—å –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º).

// –¢–∏–ø–∏ –Ω–∞–≤–º–∏—Å–Ω–æ "any", —â–æ–± –Ω–µ –ª–∞–º–∞—Ç–∏ –∑–±—ñ—Ä–∫—É –≤ esbuild –±–µ–∑ TS typecheck.
type Ctx = any;

const AWAIT_KEY = (chatId: string | number) => `await:wiki:${chatId}`;
const AWAIT_TTL_SECONDS = 60 * 5; // 5 —Ö–≤–∏–ª–∏–Ω

async function fetchWikiSummary(lang: string, query: string) {
  const q = query.trim();
  const safeTitle = encodeURIComponent(q.replace(/\s+/g, "_"));
  const url = `https://${lang}.wikipedia.org/api/rest_v1/page/summary/${safeTitle}`;

  const r = await fetch(url, { headers: { "accept": "application/json" } });
  if (!r.ok) throw new Error(`wiki ${lang} ${q}: ${r.status}`);
  const data = await r.json() as any;

  const title = data.title || q;
  const extract: string = data.extract || "";
  const link = data.content_urls?.desktop?.page
    ?? `https://${lang}.wikipedia.org/wiki/${safeTitle}`;

  return { title, extract, link };
}

function detectLangAndQuery(text: string) {
  // –í–∞—Ä—ñ–∞–Ω—Ç–∏:
  // 1) "en Albert Einstein"
  // 2) "–ö–∏—ó–≤"
  const parts = text.trim().split(/\s+/);
  const maybeLang = (parts[0] || "").toLowerCase();
  const supported = new Set(["uk", "ru", "en", "de", "fr"]);

  if (supported.has(maybeLang) && parts.length > 1) {
    return { lang: maybeLang, query: parts.slice(1).join(" ") };
  }
  return { lang: "uk", query: text.trim() };
}

async function reply(ctx: Ctx, text: string, opts?: any) {
  // –£–∑–≥–æ–¥–∂–µ–Ω–æ –∑ —ñ–Ω—à–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏: –≤ –Ω–∏—Ö –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ —î ctx.reply
  if (typeof ctx?.reply === "function") return ctx.reply(text, opts);

  // –ë–µ–∫–∞–ø: —è–∫—â–æ —î chatId + send, —Å–ø—Ä–æ–±—É—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —à–ª—è—Ö
  if (ctx?.chatId && typeof ctx?.send === "function") return ctx.send(ctx.chatId, text);

  // –û—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ, —â–æ–± –Ω–µ –∑–ª–∞–º–∞—Ç–∏ –∑–±—ñ—Ä–∫—É
}

/** –£–≤—ñ–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º "—á–µ–∫–∞—é –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –∑–∞–ø–∏—Ç wiki" */
export async function wikiSetAwait(ctx: Ctx) {
  const chatId = ctx?.chat?.id ?? ctx?.chatId ?? ctx?.update?.message?.chat?.id;
  if (!chatId) return;

  const kv = ctx?.env?.LIKES_KV || ctx?.env?.KV || ctx?.LIKES_KV;
  if (kv?.put) {
    await kv.put(AWAIT_KEY(chatId), "1", { expirationTtl: AWAIT_TTL_SECONDS });
  }
}

/** –Ø–∫—â–æ —é–∑–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º ‚Äî –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ —Ç–∞ –≤–∏–∫–æ–Ω—É—î–º–æ wiki */
export async function wikiMaybeHandleFreeText(ctx: Ctx, text: string) {
  const chatId = ctx?.chat?.id ?? ctx?.chatId ?? ctx?.update?.message?.chat?.id;
  if (!chatId) return false;

  const kv = ctx?.env?.LIKES_KV || ctx?.env?.KV || ctx?.LIKES_KV;
  if (!kv?.get) return false;

  const flag = await kv.get(AWAIT_KEY(chatId));
  if (!flag) return false;

  // –ó–Ω—è—Ç–∏ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å, —â–æ–± –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç–∏—Å—å
  if (kv?.delete) await kv.delete(AWAIT_KEY(chatId));

  await wiki(ctx, text);
  return true;
}

/** –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /wiki */
export async function wiki(ctx: Ctx, argLine?: string) {
  const argsRaw =
    argLine ??
    ctx?.args?.join?.(" ") ??
    ctx?.text?.trim?.() ??
    "";

  const trimmed = (argsRaw || "").trim();

  // –Ø–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –Ω–µ–º–∞ ‚Äî –≤–º–∏–∫–∞—î–º–æ "–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è" —Ç–∞ –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–ø–∏—Ç
  if (!trimmed) {
    await wikiSetAwait(ctx);
    await reply(
      ctx,
      "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è Wiki —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ (–≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é)."
    );
    return;
  }

  const { lang, query } = detectLangAndQuery(trimmed);

  try {
    // 1) –°–ø—Ä–æ–±–∞ –≤–∏–±—Ä–∞–Ω–æ—é –º–æ–≤–æ—é
    let res = await fetchWikiSummary(lang, query);

    // –Ø–∫—â–æ —Ç–µ–∫—Å—Ç—É –º–∞–π–∂–µ –Ω–µ–º–∞—î ‚Äî fallback –Ω–∞ en
    if (!res.extract || res.extract.length < 20) {
      if (lang !== "en") {
        res = await fetchWikiSummary("en", query);
      }
    }

    const titleLine = `üìö <b>${res.title}</b>`;
    const body = res.extract?.trim()
      ? res.extract.trim().slice(0, 1800) // —Ç—Ä—ñ—à–∫–∏ –æ–±—Ä—ñ–∑–∞—î–º–æ, —â–æ–± –Ω–µ —Å–ø–∞–º–∏—Ç–∏
      : "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤ —É —Å—Ç–∞—Ç—Ç—ñ.";

    const linkLine = `\n\nüîó <a href="${res.link}">${res.link}</a>`;

    await reply(ctx, `${titleLine}\n\n${body}${linkLine}`, {
      parse_mode: "HTML",
      disable_web_page_preview: false,
    });
  } catch (e) {
    // –°–∞–º–∞ –ø—Ä–æ—Å—Ç–∞ —ñ –¥—Ä—É–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    await reply(ctx, `–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é –∑–∞ –∑–∞–ø–∏—Ç–æ–º: ${query}`);
  }
}

// –°—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑ –º–æ–∂–ª–∏–≤–∏–º default-—ñ–º–ø–æ—Ä—Ç–æ–º –≤ —ñ–Ω—à–∏—Ö –º—ñ—Å—Ü—è—Ö
export default wiki;