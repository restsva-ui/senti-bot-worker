import type { TgUpdate } from "../types";

async function tgCall(
  env: { BOT_TOKEN: string; API_BASE_URL?: string },
  method: string,
  payload: Record<string, unknown>
) {
  const api = env.API_BASE_URL || "https://api.telegram.org";
  const res = await fetch(`${api}/bot${env.BOT_TOKEN}/${method}`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(payload),
  });
  if (!res.ok) {
    const t = await res.text().catch(() => "");
    console.error("tgCall error", method, res.status, t);
  }
  return res.json().catch(() => ({}));
}

function detectLang(code?: string, text?: string) {
  const t = (text || "").toLowerCase();
  if (code && ["uk", "en", "ru", "de", "fr"].includes(code.slice(0,2))) return code.slice(0,2);
  if (/[–∞-—è—ñ—ó—î“ë]/i.test(t)) {
    if (/[—ñ—î—ó“ë]/i.test(t)) return "uk";
    return "ru";
  }
  if (/[√§√∂√º√ü]/i.test(t)) return "de";
  if (/[√†√¢√ß√©√®√™√´√Æ√Ø√¥√π√ª√º√ø≈ì√¶]/i.test(t)) return "fr";
  return "en";
}

function extractArg(text: string) {
  const m = text.trim().match(/^\/\w+\s*(.*)$/);
  return (m?.[1] || "").trim();
}

function escapeHtml(s: string) {
  return s.replace(/[&<>]/g, (c) => ({ "&": "&amp;", "<": "&lt;", ">": "&gt;" }[c] as string));
}

export const wikiCommand = {
  name: "wiki",
  description: "–ü–æ—à—É–∫ —É –í—ñ–∫—ñ. /wiki <–∑–∞–ø–∏—Ç> –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Wiki —É –º–µ–Ω—é —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–∞–ø–∏—Ç —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å",
  async execute(env: { BOT_TOKEN: string; API_BASE_URL?: string }, update: TgUpdate) {
    const chatId = update.message?.chat?.id;
    const text = update.message?.text || "";
    if (!chatId) return;

    const arg = extractArg(text);
    if (arg) {
      const lang = detectLang(update.message?.from?.language_code, arg);
      const reply = [
        `üîé <b>Wiki (${lang})</b>`,
        `–ó–∞–ø–∏—Ç: <i>${escapeHtml(arg)}</i>`,
        "",
        "–î–µ–º–æ-–≤—ñ–¥–ø–æ–≤—ñ–¥—å: (—Ç—É—Ç –º–∞–≤ –±–∏ –±—É—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É)",
      ].join("\n");
      await tgCall(env, "sendMessage", { chat_id: chatId, text: reply, parse_mode: "HTML" });
      return;
    }

    await tgCall(env, "sendMessage", {
      chat_id: chatId,
      text: "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è Wiki —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ (–≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é).",
      reply_markup: { force_reply: true, selective: true },
    });
  },
} as const;

/** –Ø–∫—â–æ –ø—Ä–∏–π—à–æ–≤ —Ç–µ–∫—Å—Ç-–≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –Ω–∞—à prompt ‚Äî —Ü–µ –∑–∞–ø–∏—Ç –¥–æ Wiki */
export function wikiMaybeHandleFreeText(
  env: { BOT_TOKEN: string; API_BASE_URL?: string },
  update: TgUpdate
) {
  const msg = update.message;
  if (!msg?.text) return false;
  const isReplyToBot = !!msg.reply_to_message?.from?.is_bot;
  const repliedText = msg.reply_to_message?.text || "";
  if (!isReplyToBot) return false;
  if (!/–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç|–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç|Write your wiki query|–ó–∞–ø—Ä–æ—Å –¥–ª—è Wiki/i.test(repliedText)) {
    return false;
  }
  const lang = detectLang(msg.from?.language_code, msg.text);
  const reply = [
    `üîé <b>Wiki (${lang})</b>`,
    `–ó–∞–ø–∏—Ç: <i>${escapeHtml(msg.text)}</i>`,
    "",
    "–î–µ–º–æ-–≤—ñ–¥–ø–æ–≤—ñ–¥—å: (—Ç—É—Ç –º–∞–≤ –±–∏ –±—É—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É)",
  ].join("\n");
  tgCall(env, "sendMessage", { chat_id: msg.chat.id, text: reply, parse_mode: "HTML" });
  return true;
}