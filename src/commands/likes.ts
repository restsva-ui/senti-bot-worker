// src/commands/likes.ts
import type { TgUpdate } from "../types";

/** –ö–Ω–æ–ø–∫–∞ –∑ –Ω—É–ª—å–æ–≤–∏–º –ª—ñ—á–∏–ª—å–Ω–∏–∫–æ–º */
function likeKeyboard(count: number) {
  return {
    inline_keyboard: [[{ text: `‚ù§Ô∏è ${count}`, callback_data: "like" }]],
  };
}

async function tgCall(
  env: { BOT_TOKEN: string; API_BASE_URL?: string },
  method: string,
  payload: Record<string, unknown>
) {
  const api = env.API_BASE_URL || "https://api.telegram.org";
  const res = await fetch(`${api}/bot${env.BOT_TOKEN}/${method}`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(payload),
  });
  if (!res.ok) {
    const t = await res.text().catch(() => "");
    console.error("tgCall error", method, res.status, t);
  }
  return res.json().catch(() => ({}));
}

export const likesCommand = {
  name: "likes",
  description: "–ü–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫—É ‚ù§Ô∏è —Ç–∞ —Ä–∞—Ö—É—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è",
  async execute(
    env: { BOT_TOKEN: string; API_BASE_URL?: string },
    update: TgUpdate
  ) {
    const chatId = update.message?.chat?.id;
    if (!chatId) return;

    await tgCall(env, "sendMessage", {
      chat_id: chatId,
      text: "–õ–∞–π–∫–Ω–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
      reply_markup: likeKeyboard(0),
    });
  },
} as const;

/** –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ ‚ù§Ô∏è */
export function likesCanHandleCallback(data: string) {
  return data === "like";
}

export async function likesOnCallback(
  env: { BOT_TOKEN: string; API_BASE_URL?: string; LIKES_KV: any },
  update: TgUpdate
) {
  const cb = update.callback_query!;
  const msg = cb.message;
  const chatId = msg?.chat?.id;
  const msgId = msg?.message_id;
  if (!chatId || !msgId) return;

  const key = `likes:${chatId}:${msgId}`;

  // –ø–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
  const raw = (await env.LIKES_KV.get(key)) ?? "0";
  const current = Number.parseInt(raw) || 0;
  const next = current + 1;

  await env.LIKES_KV.put(key, String(next));

  // –æ–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥–ø–∏—Å –∫–Ω–æ–ø–∫–∏
  await tgCall(env, "editMessageReplyMarkup", {
    chat_id: chatId,
    message_id: msgId,
    reply_markup: likeKeyboard(next),
  });

  // –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ "–≥–æ–¥–∏–Ω–Ω–∏–∫"
  await tgCall(env, "answerCallbackQuery", {
    callback_query_id: cb.id,
    text: `‚ù§Ô∏è ${next}`,
    show_alert: false,
  });
}

/** /stats ‚Äî –∑–≤–µ–¥–µ–Ω–Ω—è –ø–æ —á–∞—Ç—É */
export const likesStatsCommand = {
  name: "stats",
  description: "–ü–æ–∫–∞–∑—É—î —Å—É–º—É –≤—Å—ñ—Ö ‚ù§Ô∏è —É —á–∞—Ç—ñ —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ–∑ –ª–∞–π–∫–∞–º–∏",
  async execute(
    env: { BOT_TOKEN: string; API_BASE_URL?: string; LIKES_KV: any },
    update: TgUpdate
  ) {
    const chatId = update.message?.chat?.id;
    if (!chatId) return;

    let total = 0;
    let messagesWithLikes = 0;

    // –∑—á–∏—Ç—É—î–º–æ –≤—Å—ñ –∫–ª—é—á—ñ —Ü—å–æ–≥–æ —á–∞—Ç—É
    const prefix = `likes:${chatId}:`;
    let cursor: string | undefined = undefined;
    do {
      const page = await env.LIKES_KV.list({ prefix, cursor });
      cursor = page.cursor;
      for (const key of page.keys) {
        const val = await env.LIKES_KV.get(key.name);
        const n = Number.parseInt(val ?? "0") || 0;
        if (n > 0) messagesWithLikes += 1;
        total += n;
      }
    } while (cursor);

    const text = [
      "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∞–π–∫—ñ–≤</b>",
      `–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ–∑ –ª–∞–π–∫–∞–º–∏: <b>${messagesWithLikes}</b>`,
      `–£—Å—å–æ–≥–æ ‚ù§Ô∏è: <b>${total}</b>`,
    ].join("\n");

    await tgCall(env, "sendMessage", {
      chat_id: chatId,
      text,
      parse_mode: "HTML",
    });
  },
} as const;