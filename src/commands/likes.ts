// src/commands/likes.ts
import type { TgUpdate } from "../types";

/**
 * –ö–æ–º–∞–Ω–¥–∞ /likes ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é "‚ù§Ô∏è <count>".
 * –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —É KV –∑–∞ –∫–ª—é—á–µ–º: likes:<chatId>:<messageId>
 * –ê–Ω—Ç–∏—Å–ø–∞–º: 1 –∫–ª—ñ–∫ / –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á / 5—Å —á–µ—Ä–µ–∑ –∫–ª—é—á:
 * likes_users:<chatId>:<messageId>:<userId>
 */
const CB_PREFIX = "likes:";
const CB_INC = `${CB_PREFIX}inc`;

// –ê–Ω—Ç–∏—Å–ø–∞–º: TTL (—Å–µ–∫—É–Ω–¥–∏). –ú—ñ–Ω—ñ–º—É–º 1, –º–∞–∫—Å–∏–º—É–º 1 —Ö–≤. (–∫–ª–µ–º–ø)
const SPAM_TTL_SEC = 5;

export const likesCommand = {
  name: "likes",
  description: "–ü–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫—É ‚ù§Ô∏è —Ç–∞ —Ä–∞—Ö—É—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è",
  async execute(
    env: { BOT_TOKEN: string; API_BASE_URL?: string; LIKES_KV: KVNamespace },
    update: TgUpdate
  ) {
    const msg = update.message;
    const chatId = msg?.chat?.id;
    if (!chatId) return;

    // –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é "‚ù§Ô∏è 0".
    const keyboard = {
      inline_keyboard: [[{ text: "‚ù§Ô∏è 0", callback_data: CB_INC }]],
    };

    const sent = await sendMessage(env, chatId, "–õ–∞–π–∫–Ω–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", {
      reply_markup: keyboard,
    });

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —É KV (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø–µ—Ä—à–æ–≥–æ –∫–ª—ñ–∫—É)
    const messageId = sent?.result?.message_id as number | undefined;
    if (typeof messageId === "number") {
      const key = kvLikesKey(chatId, messageId);
      const existed = await env.LIKES_KV.get(key);
      if (!existed) {
        await env.LIKES_KV.put(key, JSON.stringify({ count: 0 }));
      }
    }
  },
} as const;

/** –ß–∏ –º–æ–∂–µ–º–æ –º–∏ –æ–±—Ä–æ–±–∏—Ç–∏ —Ü–µ–π callback */
export function likesCanHandleCallback(data: string | undefined): boolean {
  return data === CB_INC;
}

/** –û–±—Ä–æ–±–∫–∞ callback: –∞–Ω—Ç–∏—Å–ø–∞–º + —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç —É KV —ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ */
export async function likesOnCallback(
  env: { BOT_TOKEN: string; API_BASE_URL?: string; LIKES_KV: KVNamespace },
  update: TgUpdate
): Promise<void> {
  const cq: any = (update as any).callback_query;
  const data: string | undefined = cq?.data;
  const chatId: number | undefined = cq?.message?.chat?.id;
  const messageId: number | undefined = cq?.message?.message_id;
  const cqId: string | undefined = cq?.id;
  const userId: number | undefined = cq?.from?.id;

  if (!data || !chatId || !messageId || !cqId || !userId) return;

  // ---- –ê–Ω—Ç–∏—Å–ø–∞–º ----
  const spamKey = kvSpamKey(chatId, messageId, userId);
  const ttl = clampTtl(SPAM_TTL_SEC, 1, 60);
  const recent = await env.LIKES_KV.get(spamKey);
  if (recent) {
    // –õ—ñ–º—ñ—Ç: –æ–¥–∏–Ω –∫–ª—ñ–∫ —É –≤—ñ–∫–Ω—ñ TTL
    await answerCallbackQuery(env, cqId, "–ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–æ üôÇ –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥");
    return;
  }
  // –°—Ç–∞–≤–∏–º–æ –º–∞—Ä–∫–µ—Ä –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ TTL
  await env.LIKES_KV.put(spamKey, "1", { expirationTtl: ttl });
  // -------------------

  const key = kvLikesKey(chatId, messageId);

  // 1) –ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
  let count = 0;
  try {
    const val = await env.LIKES_KV.get(key);
    if (val) {
      const parsed = JSON.parse(val);
      const num = Number(parsed?.count);
      if (Number.isFinite(num) && num >= 0) count = num;
    }
  } catch (e) {
    console.warn("likes: parse KV error", e);
  }

  // 2) –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç
  count += 1;
  await env.LIKES_KV.put(key, JSON.stringify({ count }));

  // 3) –û–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥–ø–∏—Å –∫–Ω–æ–ø–∫–∏
  const keyboard = {
    inline_keyboard: [[{ text: `‚ù§Ô∏è ${count}`, callback_data: CB_INC }]],
  };
  await editMessageReplyMarkup(env, chatId, messageId, keyboard);

  // 4) –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback (–±–µ–∑ —Å–ø–ª–∏–≤–∞—é—á–æ–≥–æ —Ç–µ–∫—Å—Ç—É)
  await answerCallbackQuery(env, cqId);
}

/* ===================== helpers ===================== */

function kvLikesKey(chatId: number, messageId: number) {
  return `likes:${chatId}:${messageId}`;
}
function kvSpamKey(chatId: number, messageId: number, userId: number) {
  return `likes_users:${chatId}:${messageId}:${userId}`;
}
function clampTtl(ttl: number, min: number, max: number) {
  const t = Math.floor(ttl);
  return Math.max(min, Math.min(max, t));
}

async function sendMessage(
  env: { BOT_TOKEN: string; API_BASE_URL?: string },
  chatId: number,
  text: string,
  extra?: Record<string, unknown>
): Promise<any | null> {
  const apiBase = env.API_BASE_URL || "https://api.telegram.org";
  const url = `${apiBase}/bot${env.BOT_TOKEN}/sendMessage`;
  const body = JSON.stringify({ chat_id: chatId, text, ...extra });

  const res = await fetch(url, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body,
  });

  let json: any | null = null;
  try {
    json = await res.json();
  } catch (_) {
    // ignore
  }

  if (!res.ok) {
    console.error("sendMessage error:", res.status, json ?? (await res.text().catch(() => "")));
  }
  return json;
}

async function editMessageReplyMarkup(
  env: { BOT_TOKEN: string; API_BASE_URL?: string },
  chatId: number,
  messageId: number,
  replyMarkup: any
) {
  const apiBase = env.API_BASE_URL || "https://api.telegram.org";
  const url = `${apiBase}/bot${env.BOT_TOKEN}/editMessageReplyMarkup`;
  const body = JSON.stringify({
    chat_id: chatId,
    message_id: messageId,
    reply_markup: replyMarkup,
  });

  const res = await fetch(url, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body,
  });

  if (!res.ok) {
    const errText = await res.text().catch(() => "");
    console.error("editMessageReplyMarkup error:", res.status, errText);
  }
}

async function answerCallbackQuery(
  env: { BOT_TOKEN: string; API_BASE_URL?: string },
  callbackQueryId: string,
  text?: string
) {
  const apiBase = env.API_BASE_URL || "https://api.telegram.org";
  const url = `${apiBase}/bot${env.BOT_TOKEN}/answerCallbackQuery`;
  const body = JSON.stringify(
    text ? { callback_query_id: callbackQueryId, text, show_alert: false } : { callback_query_id: callbackQueryId }
  );

  const res = await fetch(url, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body,
  });

  if (!res.ok) {
    const errText = await res.text().catch(() => "");
    console.error("answerCallbackQuery error:", res.status, errText);
  }
}