// src/commands/start.ts
import type { TgUpdate } from "../types";

type Env = { BOT_TOKEN: string; API_BASE_URL?: string };
type TgCmd = { command: string; description: string };

const MINIMAL_CMDS: TgCmd[] = [
  { command: "help", description: "–î–æ–≤—ñ–¥–∫–∞" },
  { command: "wiki", description: "–ü–æ—à—É–∫ —É –í—ñ–∫—ñ–ø–µ–¥—ñ—ó" },
];

function apiBase(env: Env) {
  return env.API_BASE_URL || "https://api.telegram.org";
}

async function tgCall<T = any>(
  env: Env,
  method: string,
  payload: Record<string, unknown>
): Promise<T> {
  const r = await fetch(`${apiBase(env)}/bot${env.BOT_TOKEN}/${method}`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(payload),
  });
  return (await r.json().catch(() => ({}))) as T;
}

async function deleteCommands(env: Env, scope: Record<string, unknown>) {
  await tgCall(env, "deleteMyCommands", { scope });
}
async function setCommands(env: Env, scope: Record<string, unknown>) {
  await tgCall(env, "setMyCommands", { commands: MINIMAL_CMDS, scope });
}

export const startCommand = {
  name: "start",
  description: "–ü–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
  async execute(env: Env, update: TgUpdate) {
    const chatId = update.message?.chat?.id;
    if (!chatId) return;

    // –í—ñ—Ç–∞–Ω–Ω—è
    await tgCall(env, "sendMessage", {
      chat_id: chatId,
      parse_mode: "HTML",
      text:
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø <b>Senti</b> ‚Äî –±–æ—Ç-–∞—Å–∏—Å—Ç–µ–Ω—Ç.\n\n" +
        "–ö–æ—Ä–∏—Å–Ω–µ:\n" +
        "‚Ä¢ /menu ‚Äî –∫–Ω–æ–ø–∫–∏ –∫–æ–º–∞–Ω–¥\n" +
        "‚Ä¢ /help ‚Äî –¥–æ–≤—ñ–¥–∫–∞\n" +
        "‚Ä¢ /wiki ‚Äî –≤–≤–µ–¥–∏ –∑–∞–ø–∏—Ç —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–±–æ –æ–¥—Ä–∞–∑—É —Ç–∞–∫: <code>/wiki  –ö–∏—ó–≤</code>, <code>/wiki  en  Albert Einstein</code>",
    });

    // 1) –ü–æ—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å–ø–∏—Å–∫–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö
    await deleteCommands(env, { type: "default" }).catch(() => {});
    await deleteCommands(env, { type: "all_private_chats" }).catch(() => {});
    await deleteCommands(env, { type: "all_group_chats" }).catch(() => {});
    await deleteCommands(env, { type: "all_chat_administrators" }).catch(() => {});

    // 2) –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –º–µ–Ω—é –≥–ª–æ–±–∞–ª—å–Ω–æ (–Ω–∞ –º–∞–π–±—É—Ç–Ω—ñ —á–∞—Ç–∏)
    await setCommands(env, { type: "default" }).catch(() => {});
    await setCommands(env, { type: "all_private_chats" }).catch(() => {});

    // 3) –ì–æ–ª–æ–≤–Ω–µ: –ü–†–ò–¶–Ü–õ–¨–ù–û –æ–Ω–æ–≤–∏—Ç–∏ –º–µ–Ω—é —Å–∞–º–µ –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ (–µ—Ñ–µ–∫—Ç –æ–¥—Ä–∞–∑—É)
    await setCommands(env, { type: "chat", chat_id: chatId }).catch(() => {});
  },
} as const;