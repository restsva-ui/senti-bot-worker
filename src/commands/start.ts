// src/commands/start.ts
import type { TgUpdate } from "../types";

type Env = {
  BOT_TOKEN: string;
  API_BASE_URL?: string;
};

type TgCmd = { command: string; description: string };

function apiBase(env: Env) {
  return env.API_BASE_URL || "https://api.telegram.org";
}

async function tgCall<T = any>(
  env: Env,
  method: string,
  payload: Record<string, unknown>
): Promise<T> {
  const res = await fetch(`${apiBase(env)}/bot${env.BOT_TOKEN}/${method}`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(payload),
  });
  if (!res.ok) {
    const t = await res.text().catch(() => "");
    console.error("tgCall error", method, res.status, t);
  }
  return res.json().catch(() => ({} as T));
}

/** –ó–∞–ª–∏—à–∞—î–º–æ –ª–∏—à–µ 2 –∫–æ–º–∞–Ω–¥–∏ —É –º–µ–Ω—é */
const MINIMAL_CMDS: TgCmd[] = [
  { command: "help", description: "–î–æ–≤—ñ–¥–∫–∞" },
  { command: "wiki", description: "–ü–æ—à—É–∫ —É –í—ñ–∫—ñ–ø–µ–¥—ñ—ó" },
];

/** –û–Ω–æ–≤–ª—é—î–º–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ */
async function setCommandsForScope(env: Env, scope: Record<string, unknown>) {
  await tgCall(env, "setMyCommands", {
    commands: MINIMAL_CMDS,
    scope,
    language_code: "", // —É—Å—ñ –º–æ–≤–∏
  });
}

/** –ù–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫ —á–∏—Å—Ç–∏–º–æ —ñ–Ω—à—ñ –æ–±–ª–∞—Å—Ç—ñ */
async function deleteCommandsForScope(env: Env, scope: Record<string, unknown>) {
  await tgCall(env, "deleteMyCommands", { scope });
}

async function configureMinimalMenu(env: Env) {
  // –æ—Å–Ω–æ–≤–Ω—ñ –æ–±–ª–∞—Å—Ç—ñ, –¥–µ Telegram –ø–æ–∫–∞–∑—É—î –º–µ–Ω—é
  const defaultScope = { type: "default" };
  const privateScope = { type: "all_private_chats" };
  const groupsScope = { type: "all_group_chats" };
  const adminsScope = { type: "all_chat_administrators" };

  // —Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –±—É–¥—å-—è–∫—ñ —Å—Ç–∞—Ä—ñ —Å–ø–∏—Å–∫–∏
  await Promise.all([
    deleteCommandsForScope(env, defaultScope),
    deleteCommandsForScope(env, privateScope),
    deleteCommandsForScope(env, groupsScope),
    deleteCommandsForScope(env, adminsScope),
  ]).catch(() => {});

  // –¥–∞–ª—ñ —Å—Ç–∞–≤–∏–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ç–∞–º, –¥–µ —Ç—Ä–µ–±–∞
  await Promise.all([
    setCommandsForScope(env, defaultScope),
    setCommandsForScope(env, privateScope),
  ]);
}

export const startCommand = {
  name: "start",
  description: "–ü–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
  async execute(env: Env, update: TgUpdate) {
    const chatId = update.message?.chat?.id;
    if (!chatId) return;

    // 1) –í—ñ—Ç–∞–Ω–Ω—è
    const text =
      "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø <b>Senti</b> ‚Äî –±–æ—Ç-–∞—Å–∏—Å—Ç–µ–Ω—Ç.\n\n" +
      "–ö–æ—Ä–∏—Å–Ω–µ:\n" +
      "‚Ä¢ /menu ‚Äî –∫–Ω–æ–ø–∫–∏ –∫–æ–º–∞–Ω–¥\n" +
      "‚Ä¢ /help ‚Äî –¥–æ–≤—ñ–¥–∫–∞\n" +
      "‚Ä¢ /wiki ‚Äî –≤–≤–µ–¥–∏ –∑–∞–ø–∏—Ç —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–±–æ –æ–¥—Ä–∞–∑—É —Ç–∞–∫: <code>/wiki  –ö–∏—ó–≤</code>, <code>/wiki  en  Albert Einstein</code>";
    await tgCall(env, "sendMessage", {
      chat_id: chatId,
      text,
      parse_mode: "HTML",
    });

    // 2) –°—Ç–∞–≤–∏–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –º–µ–Ω—é (help + wiki)
    await configureMinimalMenu(env).catch((e) =>
      console.warn("configureMinimalMenu failed", e)
    );
  },
} as const;