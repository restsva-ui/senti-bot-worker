/**
 * –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∏ –®–Ü.
 * –ü–æ—Ä—è–¥–æ–∫: Gemini ‚Üí DeepSeek ‚Üí Groq (fallback).
 * Vision ‚Äî –ª–∏—à–µ Gemini (–Ω–∞–π—Å—Ç–∞–±—ñ–ª—å–Ω—ñ—à–µ –∑ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö).
 *
 * –ü–æ—Ç—Ä—ñ–±–Ω—ñ –∑–º—ñ–Ω–Ω—ñ:
 *  GEMINI_API_KEY (secret)
 *  DEEPSEEK_API_KEY (secret, –æ–ø—Ü—ñ–π–Ω–æ)
 *  GROQ_API_KEY (secret, –æ–ø—Ü—ñ–π–Ω–æ)
 *  AI_MODEL (plaintext, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "gemini-1.5-flash")
 */

const GEMINI_TEXT_URL = (model) =>
  `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=`;
const GEMINI_VISION_URL = GEMINI_TEXT_URL; // —Ç–æ–π —Å–∞–º–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç

export async function aiText({ prompt }, env) {
  // 1) Gemini
  if (env.GEMINI_API_KEY) {
    const model = env.AI_MODEL || "gemini-1.5-flash";
    try {
      const r = await fetch(GEMINI_TEXT_URL(model) + env.GEMINI_API_KEY, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          contents: [{ parts: [{ text: prompt }] }],
        }),
      });
      const j = await r.json();
      const text =
        j?.candidates?.[0]?.content?.parts?.map((p) => p.text).join("") ??
        j?.candidates?.[0]?.content?.parts?.[0]?.text ??
        "";
      if (text) return text.trim();
    } catch (_e) {}
  }

  // 2) DeepSeek (—Å—É–º—ñ—Å–Ω–∏–π –∑ OpenAI chat.completions)
  if (env.DEEPSEEK_API_KEY) {
    try {
      const r = await fetch("https://api.deepseek.com/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${env.DEEPSEEK_API_KEY}`,
        },
        body: JSON.stringify({
          model: "deepseek-chat",
          messages: [
            { role: "system", content: "You are a helpful assistant." },
            { role: "user", content: prompt },
          ],
          temperature: 0.7,
        }),
      });
      const j = await r.json();
      const text = j?.choices?.[0]?.message?.content ?? "";
      if (text) return text.trim();
    } catch (_e) {}
  }

  // 3) Groq (fallback, —à–≤–∏–¥–∫–æ/—Å—Ç–∞–±—ñ–ª—å–Ω–æ)
  if (env.GROQ_API_KEY) {
    try {
      const r = await fetch("https://api.groq.com/openai/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${env.GROQ_API_KEY}`,
        },
        body: JSON.stringify({
          model: "llama-3.1-8b-instant",
          messages: [
            { role: "system", content: "You are a helpful assistant." },
            { role: "user", content: prompt },
          ],
          temperature: 0.7,
        }),
      });
      const j = await r.json();
      const text = j?.choices?.[0]?.message?.content ?? "";
      if (text) return text.trim();
    } catch (_e) {}
  }

  // –Ø–∫—â–æ –≤—Å–µ –≤–ø–∞–ª–æ ‚Äî –ø–æ–≤–µ—Ä–Ω–µ–º–æ –¥—Ä—É–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å
  return "–í–∏–±–∞—á, –∑–∞—Ä–∞–∑ —è –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω–∫—É üôè";
}

export async function aiVision({ prompt, imageUrl }, env) {
  // Vision —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ Gemini
  if (!env.GEMINI_API_KEY) {
    return "–ó–∞—Ä–∞–∑ –∞–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (–Ω–µ –∑–∞–¥–∞–Ω–æ GEMINI_API_KEY).";
  }
  const model = env.AI_MODEL || "gemini-1.5-flash";

  // Google Gemini Vision –ø—Ä–∏–π–º–∞—î parts –∑ text + inline_data/url_data.
  // –ß–µ—Ä–µ–∑ URL –ø—Ä–æ—Å—Ç—ñ—à–µ:
  try {
    const r = await fetch(GEMINI_VISION_URL(model) + env.GEMINI_API_KEY, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              { text: prompt || "–û–ø–∏—à–∏ –¥–µ—Ç–∞–ª—å–Ω–æ, —â–æ –Ω–∞ —Ñ–æ—Ç–æ. –î–æ–¥–∞–π –≤–∏—Å–Ω–æ–≤–∫–∏." },
              {
                file_data: {
                  mime_type: "image/jpeg",
                  file_uri: imageUrl,
                },
              },
            ],
          },
        ],
      }),
    });

    const j = await r.json();
    const text =
      j?.candidates?.[0]?.content?.parts?.map((p) => p.text).join("") ??
      j?.candidates?.[0]?.content?.parts?.[0]?.text ??
      "";

    return text?.trim() || "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è üòï";
  } catch (_e) {
    return "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.";
  }
}