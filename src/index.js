export default {
  async fetch(request, env, ctx) {
    if (request.method === "POST") {
      const update = await request.json();

      if (update.message) {
        const chatId = update.message.chat.id;
        const text = update.message.text || "";

        // ---- /start ----
        if (text === "/start") {
          return sendMessage(
            chatId,
            "üëã –ü—Ä–∏–≤—ñ—Ç! –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Cloudflare Workers.\n" +
            "–°–ø—Ä–æ–±—É–π: /ping, –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∞–±–æ /kvset –∫–ª—é—á –∑–Ω–∞—á–µ–Ω–Ω—è, /kvget –∫–ª—é—á"
          );
        }

        // ---- /ping ----
        if (text === "/ping") {
          return sendMessage(chatId, "pong ‚úÖ");
        }

        // ---- /menu ----
        if (text === "/menu") {
          const keyboard = {
            inline_keyboard: [
              [{ text: "üëç –ü–∞–Ω–µ–ª—å –ª–∞–π–∫—ñ–≤", callback_data: "likepanel" }],
              [{ text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "stats" }]
            ]
          };
          return sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", keyboard);
        }

        // ---- /likepanel ----
        if (text === "/likepanel") {
          const keyboard = {
            inline_keyboard: [
              [{ text: "üëç", callback_data: "like" }, { text: "üëé", callback_data: "dislike" }]
            ]
          };
          return sendMessage(chatId, "–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:", keyboard);
        }

        // ---- /stats ----
        if (text === "/stats") {
          const likes = await env.KV.get("likes") || 0;
          const dislikes = await env.KV.get("dislikes") || 0;
          return sendMessage(
            chatId,
            `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç—É:\nüëç –í–ø–æ–¥–æ–±–∞–π–æ–∫: ${likes}\nüëé –î–∏–∑–ª–∞–π–∫—ñ–≤: ${dislikes}`
          );
        }

        // ---- /kvset ----
        if (text.startsWith("/kvset")) {
          const parts = text.split(" ");
          if (parts.length < 3) {
            return sendMessage(chatId, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /kvset <–∫–ª—é—á> <–∑–Ω–∞—á–µ–Ω–Ω—è>");
          }
          const key = parts[1];
          const value = parts.slice(2).join(" ");
          await env.KV.put(key, value);
          return sendMessage(chatId, `‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: ${key} = ${value}`);
        }

        // ---- /kvget ----
        if (text.startsWith("/kvget")) {
          const parts = text.split(" ");
          if (parts.length < 2) {
            return sendMessage(chatId, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /kvget <–∫–ª—é—á>");
          }
          const key = parts[1];
          const value = await env.KV.get(key);
          if (value === null) {
            return sendMessage(chatId, `‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∫–ª—é—á–∞: ${key}`);
          }
          return sendMessage(chatId, `üì¶ ${key} = ${value}`);
        }
      }

      // ---- callback_query ----
      if (update.callback_query) {
        const chatId = update.callback_query.message.chat.id;
        const data = update.callback_query.data;

        if (data === "like") {
          let likes = parseInt(await env.KV.get("likes") || "0", 10);
          likes++;
          await env.KV.put("likes", likes.toString());
          return sendMessage(chatId, "‚úÖ –û—Ç—Ä–∏–º–∞–≤ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.");
        }

        if (data === "dislike") {
          let dislikes = parseInt(await env.KV.get("dislikes") || "0", 10);
          dislikes++;
          await env.KV.put("dislikes", dislikes.toString());
          return sendMessage(chatId, "‚úÖ –û—Ç—Ä–∏–º–∞–≤ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.");
        }

        if (data === "stats") {
          const likes = await env.KV.get("likes") || 0;
          const dislikes = await env.KV.get("dislikes") || 0;
          return sendMessage(
            chatId,
            `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç—É:\nüëç –í–ø–æ–¥–æ–±–∞–π–æ–∫: ${likes}\nüëé –î–∏–∑–ª–∞–π–∫—ñ–≤: ${dislikes}`
          );
        }
      }

      return new Response("ok");
    }

    return new Response("Hello from Worker!");
  }
};

// ---- Helper –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ----
async function sendMessage(chatId, text, keyboard) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
  const body = {
    chat_id: chatId,
    text: text,
    parse_mode: "HTML"
  };
  if (keyboard) {
    body.reply_markup = keyboard;
  }

  await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body)
  });
  return new Response("ok");
}