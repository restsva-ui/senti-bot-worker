// src/index.js
import { handleUpdate } from "./router.js";
import { tgSendMessage } from "./adapters/telegram.js";

export default {
  async fetch(request, env, ctx) {
    try {
      const url = new URL(request.url);
      const pathname = url.pathname || "/";

      // –®–ª—è—Ö –≤–µ–±—Ö—É–∫–∞: –±–µ—Ä–µ–º–æ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ –ø—Ä–∏–π–º–∞—î–º–æ –±—É–¥—å-—è–∫–∏–π
      const hookPath = (env.BOT_PATH || "/senti1984").trim();
      const match = pathname === hookPath || hookPath === "/*";

      if (request.method === "POST" && match) {
        const update = await request.json().catch(() => null);

        // –±–∞–∑–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è (–≤–∏–¥–Ω–æ —É Tail)
        console.log("TG update:", update && Object.keys(update));

        if (!update) return new Response("bad json", { status: 400 });

        // –≥–æ–ª–æ–≤–Ω–µ: –ß–ï–ö–ê–Ñ–ú–û —Ä–æ—É—Ç–µ—Ä
        await handleUpdate(update, env);

        // Telegram –æ—á—ñ–∫—É—î —à–≤–∏–¥–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å 200/‚Äúok‚Äù
        return new Response("ok", { status: 200 });
      }

      // healthcheck / –ø—Ä–æ—Å—Ç–∏–π –ø—ñ–Ω–≥
      if (request.method === "GET") {
        return new Response("Senti bot worker OK", { status: 200 });
      }

      return new Response("not found", { status: 404 });
    } catch (e) {
      console.error("fetch error:", e?.stack || e);
      // –°–ø—Ä–æ–±—É—î–º–æ —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫–∞, —è–∫—â–æ –≤ –∞–ø–¥–µ–π—Ç—ñ –±—É–≤ chat_id
      try {
        const cached = await request.clone().json().catch(() => null);
        const chatId =
          cached?.message?.chat?.id ||
          cached?.callback_query?.message?.chat?.id;
        if (chatId && typeof tgSendMessage === "function") {
          await tgSendMessage(chatId, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ –±–æ—Ü—ñ —Å–µ—Ä–≤–µ—Ä–∞ üõ†Ô∏è. –ú–∏ –≤–∂–µ –¥–∏–≤–∏–º–æ—Å—å.");
        }
      } catch (_) {}
      return new Response("error", { status: 500 });
    }
  },
};