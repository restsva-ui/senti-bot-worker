import webhook from "./routes/webhook.js";
import { loadTodos, formatTodos } from "./lib/todo.js";
import { getBaseSnapshot, setBaseSnapshot, getHistory } from "./lib/snapshot-manager.js";

function textResponse(text, status = 200, type = "text/plain") {
  return new Response(text, { status, headers: { "content-type": type } });
}

export default {
  async fetch(request, env, ctx) {
    const url = new URL(request.url);
    const path = url.pathname;

    // Webhook –≤—ñ–¥ Telegram
    if (path === "/webhook" && request.method === "POST") {
      return await webhook(request, env, ctx);
    }

    // ---- Snapshot API (–¥–ª—è –º–µ–Ω–µ/CI; –∑–∞—Ö–∏—â–µ–Ω–æ WEBHOOK_SECRET) ----

    // 1) –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–∑–æ–≤–∏–π —Å–Ω–µ–ø—à–æ—Ç
    // GET /snapshot.json?key=SECRET
    if (path === "/snapshot.json" && request.method === "GET") {
      const key = url.searchParams.get("key");
      if (!key || key !== (env.WEBHOOK_SECRET ?? "")) return textResponse("forbidden", 403);
      const base = await getBaseSnapshot(env);
      const history = await getHistory(env);
      return textResponse(JSON.stringify({ base, history }), 200, "application/json; charset=utf-8");
    }

    // 2) –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏/–æ–Ω–æ–≤–∏—Ç–∏ –±–∞–∑–æ–≤–∏–π —Å–Ω–µ–ø—à–æ—Ç (–Ω–∞–ø—Ä., —Ç–≤—ñ–π Google Drive –∞—Ä—Ö—ñ–≤)
    // POST /snapshot.set?key=SECRET  body: { sha?, url, note? }
    if (path === "/snapshot.set" && request.method === "POST") {
      const key = url.searchParams.get("key");
      if (!key || key !== (env.WEBHOOK_SECRET ?? "")) return textResponse("forbidden", 403);
      let payload = {};
      try { payload = await request.json(); } catch {}
      const sha = payload.sha ? String(payload.sha) : "";
      const urlIn = String(payload.url || "");
      const note = payload.note ? String(payload.note) : "manual set";
      const snap = await setBaseSnapshot(env, { sha, url: urlIn, note });
      return textResponse(JSON.stringify({ ok: true, snap }), 200, "application/json; charset=utf-8");
    }

    // 3) –ì–∞—á–æ–∫ –∑ GitHub Actions –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –¥–µ–ø–ª–æ—é
    //    GET /postdeploy?key=SECRET&repo=owner/name&sha=...   (url –∞–≤—Ç–æ –∑–±–µ—Ä–µ–º–æ)
    if (path === "/postdeploy" && request.method === "GET") {
      const key = url.searchParams.get("key");
      if (!key || key !== (env.WEBHOOK_SECRET ?? "")) return textResponse("forbidden", 403);
      const repo = url.searchParams.get("repo") || "";
      const sha = url.searchParams.get("sha") || "";
      if (!repo || !sha) return textResponse("missing repo or sha", 400);

      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∞—Ä—Ö—ñ–≤ GitHub –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º—ñ—Ç—É:
      // https://github.com/<owner>/<repo>/archive/<sha>.zip
      const zipURL = `https://github.com/${repo}/archive/${sha}.zip`;
      const note = "post-deploy snapshot";
      const snap = await setBaseSnapshot(env, { sha, url: zipURL, note });
      return textResponse(JSON.stringify({ ok: true, snap }), 200, "application/json; charset=utf-8");
    }

    // ---- –î–æ–ø–æ–º—ñ–∂–Ω—ñ –µ–Ω–¥–ø–æ—ó–Ω—Ç–∏, —è–∫ –±—É–ª–∏ ----

    // –ï–∫—Å–ø–æ—Ä—Ç todo (–¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π)
    if (path === "/todo.json" && request.method === "GET") {
      const key = url.searchParams.get("key");
      if (!key || key !== (env.WEBHOOK_SECRET ?? "")) return textResponse("forbidden", 403);
      const list = await loadTodos(env, env.OWNER_ID);
      return textResponse(JSON.stringify({ items: list }), 200, "application/json; charset=utf-8");
    }

    // –Ü–º–ø–æ—Ä—Ç todo
    if (path === "/todo.import" && request.method === "POST") {
      const key = url.searchParams.get("key");
      if (!key || key !== (env.WEBHOOK_SECRET ?? "")) return textResponse("forbidden", 403);
      let payload = {};
      try { payload = await request.json(); } catch {}
      const items = Array.isArray(payload.items) ? payload.items : [];
      const list = items.map((t) => ({ text: String(t), ts: Date.now() }));
      await env.TODO_KV.put(`todo:${env.OWNER_ID}`, JSON.stringify(list));
      return textResponse("ok");
    }

    if (path === "/ping") return textResponse("pong üü¢");
    return textResponse("Senti Worker Active");
  },
};
