/**
 * Cloudflare Workers ‚Äî Telegram bot webhook (—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π, –º–æ–¥—É–ª—å–Ω–∏–π).
 * Env:
 *  - BOT_TOKEN (required)
 *  - WEBHOOK_SECRET (required)
 *  - API_BASE_URL (optional, default https://api.telegram.org)
 *  - STATE (KV, optional)
 */

// === –ù–æ–≤—ñ –º–æ–¥—É–ª—ñ –∑ –∫–Ω–æ–ø–∫–∞–º–∏/–º–µ–Ω—é (—Ç–∏ —ó—Ö –¥–æ–¥–∞–≤ —É src/commands/...) ===
import { onMenu } from "./commands/menu.js";
import { handleLikeCallback } from "./commands/likepanel.js";
import { showStats } from "./commands/stats.js";

/** @typedef {import('@cloudflare/workers-types').KVNamespace} KVNamespace */
/** @typedef {{BOT_TOKEN:string, WEBHOOK_SECRET:string, API_BASE_URL?:string, STATE?:KVNamespace}} Env */

const JSON_HEADERS = { "content-type": "application/json; charset=utf-8" };

const ok  = (data={}) =>
  new Response(JSON.stringify({ ok: true, ...data }), { headers: JSON_HEADERS });

const err = (message, status = 200) =>
  // 200 ‚Äî —â–æ–± Telegram –Ω–µ —Ä–µ—Ç—Ä–∞—ó–≤; –ø–æ–º–∏–ª–∫—É –≤–∏–¥–Ω–æ –≤ –ª–æ–≥–∞—Ö
  new Response(JSON.stringify({ ok: false, error: String(message) }), {
    headers: JSON_HEADERS, status
  });

function apiBase(env) {
  return (env.API_BASE_URL || "https://api.telegram.org").replace(/\/+$/, "");
}

/** –í–∏–∫–ª–∏–∫ Telegram Bot API (–ù–ï —á—ñ–ø–∞—î–º–æ naming: BOT_TOKEN) */
async function tg(env, method, body) {
  const token = env.BOT_TOKEN;
  if (!token) {
    console.error("BOT_TOKEN is missing");
    return new Response(null, { status: 500 });
  }
  const url = `${apiBase(env)}/bot${token}/${method}`;
  const res = await fetch(url, {
    method: "POST",
    headers: JSON_HEADERS,
    body: JSON.stringify(body),
  });
  if (!res.ok) {
    const text = await res.text().catch(() => "<no body>");
    console.error("TG API error:", method, res.status, text);
  }
  return res;
}

/** –ë–µ–∑–ø–µ—á–Ω–∏–π JSON */
async function readJson(req) {
  try { return await req.json(); } catch { return null; }
}

/** === –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∞–ø–¥–µ–π—Ç–∞ ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É === */
async function handleUpdate(update, env) {
  // ‚ûä Callback-–∫–Ω–æ–ø–∫–∏ (–Ω–æ–≤–µ): —è–∫—â–æ —î callback_query ‚Äî –≤—ñ–¥–¥–∞—î–º–æ –π–æ–≥–æ –º–æ–¥—É–ª—é —ñ –í–ò–•–û–î–ò–ú–û
  if (update?.callback_query?.data) {
    try { await handleLikeCallback(env, update); } catch (e) { console.error("handleLikeCallback", e); }
    return;
  }

  const msg = update.message || update.edited_message || update.callback_query?.message;
  const chatId = msg?.chat?.id;
  if (!chatId) return;

  // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞: —Ç–µ–∫—Å—Ç, KV —Ç–æ—â–æ
  const text = (update.message?.text || "").trim();
  const kv = env.STATE;

  // ‚ûã –ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é (–Ω–æ–≤–µ) ‚Äî –æ–∫—Ä–µ–º–∏–π –º–æ–¥—É–ª—å, –Ω–µ —á—ñ–ø–∞—î–º–æ –±–∞–∑—É
  if (text === "/menu") {
    await onMenu(env, chatId);
    return;
  }

  // ‚ûå –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–Ω–æ–≤–µ)
  if (text === "/stats") {
    await showStats(env, chatId);
    return;
  }

  // ==== –î–ê–õ–Ü ‚Äî –¢–í–û–á –ü–†–ê–¶–Æ–Æ–ß–Ü –ö–û–ú–ê–ù–î–ò (–±–µ–∑ –∑–º—ñ–Ω) ====

  if (text === "/start") {
    await tg(env, "sendMessage", {
      chat_id: chatId,
      text:
        "üëã –ü—Ä–∏–≤—ñ—Ç! –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Cloudflare Workers.\n" +
        "–°–ø—Ä–æ–±—É–π: /ping, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∞–±–æ /kvset <key> <value>, /kvget <key>",
    });
    return;
  }

  if (text === "/ping") {
    await tg(env, "sendMessage", { chat_id: chatId, text: "pong ‚úÖ" });
    return;
  }

  if (text.startsWith("/kvset")) {
    const [, key, ...rest] = text.split(/\s+/);
    const value = rest.join(" ");
    if (!kv) {
      await tg(env, "sendMessage", { chat_id: chatId, text: "‚ùå KV –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–æ (STATE)." });
      return;
    }
    if (!key || !value) {
      await tg(env, "sendMessage", { chat_id: chatId, text: "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /kvset <key> <value>" });
      return;
    }
    await kv.put(key, value);
    await tg(env, "sendMessage", { chat_id: chatId, text: `‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: ${key} = ${value}` });
    return;
  }

  if (text.startsWith("/kvget")) {
    const [, key] = text.split(/\s+/);
    if (!kv) {
      await tg(env, "sendMessage", { chat_id: chatId, text: "‚ùå KV –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–æ (STATE)." });
      return;
    }
    if (!key) {
      await tg(env, "sendMessage", { chat_id: chatId, text: "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /kvget <key>" });
      return;
    }
    const value = await kv.get(key);
    await tg(env, "sendMessage", {
      chat_id: chatId,
      text: value != null ? `üóÑ ${key} = ${value}` : `üòï –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á: ${key}`,
    });
    return;
  }

  // –§–∞–π–ª–∏/—Ñ–æ—Ç–æ ‚Äî —è–∫ –±—É–ª–æ
  if (msg?.photo || msg?.document) {
    await tg(env, "sendMessage", {
      chat_id: chatId,
      text: "üì∏ –î—è–∫—É—é! –û—Ç—Ä–∏–º–∞–≤ —Ñ–∞–π–ª.",
      reply_to_message_id: msg.message_id,
    });
    return;
  }

  // Echo ‚Äî —è–∫ –±—É–ª–æ
  if (text) {
    await tg(env, "sendMessage", {
      chat_id: chatId,
      text: `–¢–∏ –Ω–∞–ø–∏—Å–∞–≤: ${text}`,
      reply_to_message_id: msg.message_id,
    });
  }
}

export default {
  /**
   * @param {Request} request
   * @param {Env} env
   * @param {ExecutionContext} ctx
   */
  async fetch(request, env, ctx) {
    const url = new URL(request.url);

    // Health ‚Äî —è–∫ –±—É–ª–æ
    if (request.method === "GET" && (url.pathname === "/" || url.pathname === "/healthz")) {
      return ok({ service: "senti-bot-worker", env: "ok" });
    }

    // Webhook ‚Äî —è–∫ –±—É–ª–æ, –ø–ª—é—Å –≥–∞—Ä–∞–Ω—Ç—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è handleUpdate —á–µ—Ä–µ–∑ waitUntil
    if (url.pathname === `/webhook/${env.WEBHOOK_SECRET}`) {
      if (request.method !== "POST") return err("Method must be POST");
      const update = await readJson(request);
      if (!update) return err("Invalid JSON");

      // –ù–ï –º—ñ–Ω—è—î–º–æ —Ç–≤–æ—é –º–æ–¥–µ–ª—å: –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ 200 –º–∏—Ç—Ç—î–≤–æ, —Ä–æ–±–æ—Ç—É ‚Äî —É —Ñ–æ–Ω (–∞–ª–µ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ waitUntil)
      ctx.waitUntil(handleUpdate(update, env));

      return ok({ received: true });
    }

    return new Response("Not found", { status: 404, headers: { "content-type": "text/plain" } });
  },
};