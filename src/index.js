export default {
  async fetch(request, env, ctx) {
    try {
      const url = new URL(request.url);

      // Root route
      if (url.pathname === "/") {
        return new Response("Hello from Worker!", { status: 200 });
      }

      // Webhook route
      if (url.pathname === `/webhook/${env.WEBHOOK_SECRET}` && request.method === "POST") {
        let update;
        try {
          update = await request.json();
        } catch (e) {
          console.error("‚ùå JSON parse error:", e);
          return new Response("Invalid JSON", { status: 200 }); // Telegram –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –±–∞—á–∏—Ç–∏ 500
        }

        try {
          // –ì–æ–ª–æ–≤–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∞–ø–¥–µ–π—Ç—É
          if (update.message) {
            console.log("üì© New message:", update.message);

            if (update.message.text === "/ping") {
              await sendMessage(env.BOT_TOKEN, update.message.chat.id, "pong ‚úÖ");
            }

            if (update.message.text === "/start") {
              await sendMessage(
                env.BOT_TOKEN,
                update.message.chat.id,
                "üëã –ü—Ä–∏–≤—ñ—Ç! –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Cloudflare Workers."
              );
            }
          }

          if (update.callback_query) {
            console.log("üîò Callback query:", update.callback_query);
          }
        } catch (err) {
          console.error("‚ùå Update handling error:", err);
        }

        return new Response("OK", { status: 200 });
      }

      return new Response("Not found", { status: 404 });
    } catch (err) {
      console.error("‚ùå Global error:", err);
      return new Response("Internal Error", { status: 200 }); // –Ω–∞–≤—ñ—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–µ –ª–∞–º–∞—î
    }
  },
};

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function sendMessage(token, chatId, text) {
  const url = `https://api.telegram.org/bot${token}/sendMessage`;
  await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, text }),
  });
}