// src/index.js
import { tgSendMessage } from "./adapters/telegram.js";

function extractChat(update) {
  return (
    update?.message?.chat?.id ??
    update?.edited_message?.chat?.id ??
    update?.callback_query?.message?.chat?.id ??
    null
  );
}

export default {
  async fetch(request, env, ctx) {
    try {
      const url = new URL(request.url);

      // 1) Healthcheck
      if (request.method === "GET") {
        if (url.pathname === "/ping") {
          // —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ OWNER_ID (–∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ)
          const owner = env.OWNER_ID;
          if (owner) await tgSendMessage(owner, "‚úÖ Ping –≤—ñ–¥ –≤–æ—Ä–∫–µ—Ä–∞", env);
          return new Response("pong", { status: 200 });
        }
        return new Response("Senti worker alive", { status: 200 });
      }

      // 2) –ü—Ä–∏–π–º–∞—î–º–æ POST –∑ Telegram –Ω–∞ –ë–£–î–¨-–Ø–ö–ò–ô —à–ª—è—Ö
      if (request.method === "POST") {
        let update = null;
        try {
          update = await request.json();
        } catch {
          return new Response("bad json", { status: 400 });
        }

        // –ª–æ–≥ –∫–ª—é—á—ñ–≤ –∞–ø–¥–µ–π—Ç–∞ —É Tail
        console.log("TG update keys:", Object.keys(update || {}));

        const chatId = extractChat(update);
        if (!chatId) {
          console.log("No chatId in update");
          return new Response("ok", { status: 200 });
        }

        // –ú–∏—Ç—Ç—î–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (–±–µ–∑ —Ä–æ—É—Ç–µ—Ä–∞)
        await tgSendMessage(
          chatId,
          "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –Ω–∞ –∑–≤ º—è–∑–∫—É. –¶–µ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –ø—ñ–Ω–≥ –≤—ñ–¥ –≤–æ—Ä–∫–µ—Ä–∞.",
          env
        );

        // –û–±–æ–≤ º—è–∑–∫–æ–≤–æ —à–≤–∏–¥–∫–∏–π 200
        return new Response("ok", { status: 200 });
      }

      return new Response("not found", { status: 404 });
    } catch (e) {
      console.error("fetch error:", e?.stack || e);
      return new Response("error", { status: 500 });
    }
  },
};