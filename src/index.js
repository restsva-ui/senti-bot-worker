// src/index.js
import { drivePing, driveList, saveUrlToDrive, appendToChecklist, getAccessToken } from "./lib/drive.js";
import { TG } from "./lib/tg.js";
import { getUserTokens, putUserTokens, userListFiles, userSaveUrl } from "./lib/userDrive.js";

const ADMIN = (env, userId) => String(userId) === String(env.TELEGRAM_ADMIN_ID);

function html(s){ return new Response(s, {headers:{ "content-type":"text/html; charset=utf-8" }}) }
function json(o, status=200){ return new Response(JSON.stringify(o,null,2), {status, headers:{ "content-type":"application/json" }}) }

export default {
  async fetch(req, env) {
    const url = new URL(req.url);
    const p = url.pathname;

    try {
      // ---- Health & helpers ----
      if (p === "/") return html("Senti Worker Active");
      if (p === "/health") return json({ ok:true, service: env.SERVICE_HOST });

      // ---- Telegram helpers ----
      if (p === "/tg/get-webhook") {
        const r = await TG.getWebhook(env.BOT_TOKEN);
        return new Response(await r.text(), {headers:{'content-type':'application/json'}});
      }

      if (p === "/tg/set-webhook") {
        const target = `https://${env.SERVICE_HOST}/webhook`;
        // –ü—Ä–∞—Ü—é—î —ñ –∑ —Å–µ–∫—Ä–µ—Ç–æ–º, —ñ –±–µ–∑ ‚Äî –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ env.TG_WEBHOOK_SECRET
        const r = await TG.setWebhook(env.BOT_TOKEN, target, env.TG_WEBHOOK_SECRET);
        return new Response(await r.text(), {headers:{'content-type':'application/json'}});
      }

      if (p === "/tg/del-webhook") {
        const r = await TG.deleteWebhook?.(env.BOT_TOKEN) || await fetch(`https://api.telegram.org/bot${env.BOT_TOKEN}/deleteWebhook`);
        return new Response(await r.text(), {headers:{'content-type':'application/json'}});
      }

      // ---- Admin Drive quick checks ----
      if (p === "/gdrive/ping") {
        try {
          const token = await getAccessToken(env);
          const files = await driveList(env, token);
          return json({ ok: true, files: files.files || [] });
        } catch (e) { return json({ ok:false, error:String(e) }, 500); }
      }

      if (p === "/gdrive/save") {
        const token = await getAccessToken(env);
        const fileUrl = url.searchParams.get("url");
        const name = url.searchParams.get("name") || "from_web.md";
        const file = await saveUrlToDrive(env, token, fileUrl, name);
        return json({ ok:true, file });
      }

      if (p === "/gdrive/checklist") {
        const token = await getAccessToken(env);
        const line = url.searchParams.get("line") || `tick ${new Date().toISOString()}`;
        await appendToChecklist(env, token, line);
        return json({ ok:true });
      }

      // ---- User OAuth (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π Google Drive) ----
      if (p === "/auth/start") {
        const u = url.searchParams.get("u"); // telegram user id
        const state = btoa(JSON.stringify({ u }));
        const redirect_uri = `https://${env.SERVICE_HOST}/auth/cb`;
        const auth = new URL("https://accounts.google.com/o/oauth2/v2/auth");
        auth.searchParams.set("client_id", env.GOOGLE_CLIENT_ID);
        auth.searchParams.set("redirect_uri", redirect_uri);
        auth.searchParams.set("response_type", "code");
        auth.searchParams.set("access_type", "offline");
        auth.searchParams.set("prompt", "consent");
        auth.searchParams.set("scope", "https://www.googleapis.com/auth/drive.file");
        auth.searchParams.set("state", state);
        return Response.redirect(auth.toString(), 302);
      }

      if (p === "/auth/cb") {
        const state = JSON.parse(atob(url.searchParams.get("state")||"e30="));
        const code = url.searchParams.get("code");
        const redirect_uri = `https://${env.SERVICE_HOST}/auth/cb`;
        const body = new URLSearchParams({
          code,
          client_id: env.GOOGLE_CLIENT_ID,
          client_secret: env.GOOGLE_CLIENT_SECRET,
          redirect_uri,
          grant_type: "authorization_code",
        });
        const r = await fetch("https://oauth2.googleapis.com/token", {
          method:"POST",
          headers:{ "Content-Type":"application/x-www-form-urlencoded" },
          body,
        });
        const d = await r.json();
        if(!r.ok) return html(`<pre>${JSON.stringify(d,null,2)}</pre>`);
        const tokens = {
          access_token: d.access_token,
          refresh_token: d.refresh_token,
          expiry: Math.floor(Date.now()/1000) + (d.expires_in||3600) - 60,
        };
        await putUserTokens(env, state.u, tokens);
        return html(`<h3>‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç –ø—Ä–∞—Ü—é—î</h3>
<p>–û—Ç—Ä–∏–º–∞–ª–∏ —Ç–∞ –∑–±–µ—Ä–µ–≥–ª–∏ —Ç–æ–∫–µ–Ω–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <b>${state.u}</b>.</p>
<ul>
<li><a href="/tg/test?u=${state.u}">/tg/test</a></li>
<li><a href="/webhook">/webhook</a> (–≤–µ–±—Ö—É–∫)</li>
</ul>`);
      }

      // ---- Telegram webhook ----

      // GET /webhook ‚Äî —à–≤–∏–¥–∫–∏–π ping
      if (p === "/webhook" && req.method !== "POST") {
        return json({ ok:true, note:"webhook alive (GET)" });
      }

      // POST /webhook ‚Äî –ø—Ä–∏–π–æ–º –∞–ø–¥–µ–π—Ç—ñ–≤ (—ñ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Å–µ–∫—Ä–µ—Ç—É, —è–∫—â–æ –∑–∞–¥–∞–Ω–∏–π)
      if (p === "/webhook" && req.method === "POST") {
        const sec = req.headers.get("x-telegram-bot-api-secret-token");
        if (env.TG_WEBHOOK_SECRET && sec !== env.TG_WEBHOOK_SECRET) {
          console.log("Webhook: wrong secret", sec);
          return json({ ok:false, error:"unauthorized" }, 401);
        }

        // –ü—Ä–∏–π–º–∞—î–º–æ —Ç–∞ –ª–æ–≥—É—î–º–æ –∞–ø–¥–µ–π—Ç
        let update;
        try {
          update = await req.json();
          // –≤–∞–∂–ª–∏–≤–æ: –ª—ñ–º—ñ—Ç –ª–æ–≥—ñ–≤, —â–æ–± –Ω–µ –∑–∞—Ö–∞—Ä–∞—â—É–≤–∞—Ç–∏
          console.log("TG update:", JSON.stringify(update).slice(0, 2000));
        } catch (e) {
          console.log("Webhook parse error:", e);
          return json({ ok:false }, 400);
        }

        const msg = update.message || update.edited_message || update.channel_post || update.callback_query?.message;
        const textRaw = update.message?.text || update.edited_message?.text || update.callback_query?.data || "";
        if (!msg) return json({ok:true});

        const chatId = msg.chat.id;
        const userId = msg.from?.id;
        const text = (textRaw || "").trim();

        // –æ–±–≥–æ—Ä—Ç–∫–∞: –±—É–¥—å-—è–∫–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥–µ –≤ —á–∞—Ç, –∞ –Ω–µ ¬´–≤ —Ç–∏—à—É¬ª
        const safe = async (fn) => {
          try { await fn(); }
          catch (e) {
            console.log("Handler error:", e);
            try {
              await TG.text(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞: ${String(e)}`, { token: env.BOT_TOKEN });
            } catch (e2) {
              console.log("Send error:", e2);
            }
          }
        };

        // ---- –ö–æ–º–∞–Ω–¥–∏ ----
        if (text === "/start") {
          await safe(async () => {
            await TG.text(chatId,
`–ü—Ä–∏–≤—ñ—Ç! –Ø Senti ü§ñ
–ö–æ–º–∞–Ω–¥–∏:
‚Ä¢ /admin ‚Äî –∞–¥–º—ñ–Ω-–º–µ–Ω—é (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞)
‚Ä¢ /link_drive ‚Äî –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ –º—ñ–π Google Drive
‚Ä¢ /my_files ‚Äî –º–æ—ó —Ñ–∞–π–ª–∏ –∑ –¥–∏—Å–∫—É
‚Ä¢ /save_url <url> <name> ‚Äî –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª –∑–∞ URL –¥–æ –º–æ–≥–æ –¥–∏—Å–∫—É
‚Ä¢ /drive_debug ‚Äî –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ OAuth`, { token: env.BOT_TOKEN });
          });
          return json({ok:true});
        }

        if (text === "/admin") {
          await safe(async () => {
            if (!ADMIN(env, userId)) {
              await TG.text(chatId, "‚õî –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω–∞.", { token: env.BOT_TOKEN });
              return;
            }
            await TG.text(chatId,
`–ê–¥–º—ñ–Ω –º–µ–Ω—é:
‚Ä¢ /admin_ping ‚Äî ping –¥–∏—Å–∫–∞
‚Ä¢ /admin_list ‚Äî —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ (–∞–¥–º—ñ–Ω-–¥–∏—Å–∫)
‚Ä¢ /admin_checklist <—Ä—è–¥–æ–∫> ‚Äî –¥–æ–ø–∏—Å —É —á–µ–∫–ª–∏—Å—Ç
‚Ä¢ /admin_setwebhook ‚Äî –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ –≤–µ–±—Ö—É–∫`, { token: env.BOT_TOKEN });
          });
          return json({ok:true});
        }

        if (text.startsWith("/admin_ping")) {
          await safe(async () => {
            if (!ADMIN(env, userId)) return;
            const r = await drivePing(env);
            await TG.text(chatId, `‚úÖ Admin Drive OK. filesCount: ${r.filesCount}`, { token: env.BOT_TOKEN });
          });
          return json({ok:true});
        }

        if (text.startsWith("/admin_list")) {
          await safe(async () => {
            if (!ADMIN(env, userId)) return;
            const token = await getAccessToken(env);
            const files = await driveList(env, token);
            const names = (files.files||[]).map(f=>`‚Ä¢ ${f.name} (${f.id})`).join("\n") || "–ø–æ—Ä–æ–∂–Ω—å–æ";
            await TG.text(chatId, `–ê–¥–º—ñ–Ω –¥–∏—Å–∫:\n${names}`, { token: env.BOT_TOKEN });
          });
          return json({ok:true});
        }

        if (text.startsWith("/admin_checklist")) {
          await safe(async () => {
            if (!ADMIN(env, userId)) return;
            const line = text.replace("/admin_checklist","").trim() || `tick ${new Date().toISOString()}`;
            const token = await getAccessToken(env);
            await appendToChecklist(env, token, line);
            await TG.text(chatId, `‚úÖ –î–æ–¥–∞–Ω–æ: ${line}`, { token: env.BOT_TOKEN });
          });
          return json({ok:true});
        }

        if (text.startsWith("/admin_setwebhook")) {
          await safe(async () => {
            if (!ADMIN(env, userId)) return;
            const target = `https://${env.SERVICE_HOST}/webhook`;
            await TG.setWebhook(env.BOT_TOKEN, target, env.TG_WEBHOOK_SECRET);
            await TG.text(chatId, `‚úÖ –í–µ–±—Ö—É–∫ ‚Üí ${target}${env.TG_WEBHOOK_SECRET ? " (—Å–µ–∫—Ä–µ—Ç –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ)" : ""}`, { token: env.BOT_TOKEN });
          });
          return json({ok:true});
        }

        // ---- user drive commands ----
        if (text === "/link_drive") {
          await safe(async () => {
            const authUrl = `https://${env.SERVICE_HOST}/auth/start?u=${userId}`;
            await TG.text(chatId, `–ü–µ—Ä–µ–π–¥–∏ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —ñ –¥–æ–∑–≤–æ–ª—å –¥–æ—Å—Ç—É–ø –¥–æ —Å–≤–æ–≥–æ Google Drive (—Ä–µ–∂–∏–º *drive.file*):\n${authUrl}`, { token: env.BOT_TOKEN });
          });
          return json({ok:true});
        }

        if (text === "/unlink_drive") {
          await safe(async () => {
            await putUserTokens(env, userId, null);
            await TG.text(chatId, `–ì–∞—Ä–∞–∑–¥, –∑–≤'—è–∑–æ–∫ —ñ–∑ —Ç–≤–æ—ó–º –¥–∏—Å–∫–æ–º —Å–∫–∏–Ω—É—Ç–æ.`, { token: env.BOT_TOKEN });
          });
          return json({ok:true});
        }

        if (text === "/drive_debug") {
          await safe(async () => {
            const t = await getUserTokens(env, userId);
            if (!t) {
              await TG.text(chatId, "üî¥ –¢–æ–∫–µ–Ω–∏: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É /link_drive", { token: env.BOT_TOKEN });
              return;
            }
            const expStr = t.expiry ? new Date(t.expiry * 1000).toISOString() : "–Ω–µ–≤—ñ–¥–æ–º–æ";
            const hasRefresh = t.refresh_token ? "—Ç–∞–∫" : "–Ω—ñ";
            await TG.text(chatId, `ü©∫ Debug:
‚Ä¢ access_token: ${t.access_token ? "—î" : "–Ω–µ–º–∞"}
‚Ä¢ refresh_token: ${hasRefresh}
‚Ä¢ expiry: ${expStr}`, { token: env.BOT_TOKEN });
          });
          return json({ok:true});
        }

        if (text === "/my_files") {
          await safe(async () => {
            const files = await userListFiles(env, userId);
            const names = (files.files||[]).map(f=>`‚Ä¢ ${f.name}`).join("\n") || "–ø–æ—Ä–æ–∂–Ω—å–æ";
            await TG.text(chatId, `–¢–≤–æ—ó —Ñ–∞–π–ª–∏:\n${names}`, { token: env.BOT_TOKEN });
          });
          return json({ok:true});
        }

        if (text.startsWith("/save_url")) {
          await safe(async () => {
            const parts = text.split(/\s+/);
            const fileUrl = parts[1];
            const name = parts.slice(2).join(" ") || "from_telegram.bin";
            if(!fileUrl){
              await TG.text(chatId, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /save_url <url> <–æ–ø—Ü.–Ω–∞–∑–≤–∞>", { token: env.BOT_TOKEN });
              return;
            }
            const f = await userSaveUrl(env, userId, fileUrl, name);
            await TG.text(chatId, `‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: ${f.name}`, { token: env.BOT_TOKEN });
          });
          return json({ok:true});
        }

        // –î–µ—Ñ–æ–ª—Ç, —â–æ–± –∑–∞–≤–∂–¥–∏ –±—É–ª–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        await safe(async () => {
          await TG.text(chatId, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–ø—ñ–∑–Ω–∞–Ω–∞. –°–ø—Ä–æ–±—É–π /start", { token: env.BOT_TOKEN });
        });
        return json({ok:true});
      }

      // ---- test TG send after OAuth ----
      if (p === "/tg/test") {
        const u = url.searchParams.get("u");
        await TG.text(u, "Senti —Ç—É—Ç. –í—Å–µ –ø—Ä–∞—Ü—é—î ‚úÖ", { token: env.BOT_TOKEN });
        return json({ ok:true });
      }

      // ---- 404 ----
      return json({ ok:false, error:"Not found" }, 404);
    } catch (e) {
      console.log("Top-level error:", e);
      return json({ ok:false, error:String(e) }, 500);
    }
  }
};