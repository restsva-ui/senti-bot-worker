// src/routes/user.js
import { TG } from "../lib/tg.js";
import { getUserTokens } from "../lib/userDrive.js";
import { setDriveMode, getDriveMode } from "../services/state.js";
import { handleIncomingMedia } from "../services/media.js";

// –ö–Ω–æ–ø–∫–∏
export const BTN_DRIVE = "Google Drive";
export const BTN_SENTI = "Senti";
export const BTN_ADMIN = "Admin";

export function mainKeyboard(isAdmin=false){
  const rows = [
    [{ text: BTN_DRIVE }, { text: BTN_SENTI }],
  ];
  if (isAdmin) rows.push([{ text: BTN_ADMIN }]);
  return { keyboard: rows, resize_keyboard: true, one_time_keyboard: false };
}
export function inlineOpenDrive(){
  return { inline_keyboard: [[{ text: "–í—ñ–¥–∫—Ä–∏—Ç–∏ –î–∏—Å–∫", url: "https://drive.google.com/drive/my-drive" }]] };
}

export const handleUserCommand = async ({
  env, msg, text, chatId, userId, TG, getUserTokens, userListFiles, userSaveUrl
}) => {
  // –ù–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞ "Google Drive"
  if (text === BTN_DRIVE) {
    const ut = await getUserTokens(env, userId);
    if (!ut?.refresh_token) {
      const authUrl = `https://${env.SERVICE_HOST}/auth/start?u=${userId}`;
      await TG.text(
        chatId,
        `–î–∞–π –¥–æ—Å—Ç—É–ø –¥–æ —Å–≤–æ–≥–æ Google Drive:\n${authUrl}\n\n–ü—ñ—Å–ª—è –¥–æ–∑–≤–æ–ª—É –ø–æ–≤–µ—Ä–Ω–∏—Å—å —É —á–∞—Ç —ñ —â–µ —Ä–∞–∑ –Ω–∞—Ç–∏—Å–Ω–∏ ¬´${BTN_DRIVE}¬ª.`,
        { token: env.BOT_TOKEN }
      );
      return true;
    }
    await setDriveMode(env, userId, true);
    await TG.text(
      chatId,
      "üìÅ –†–µ–∂–∏–º –¥–∏—Å–∫–∞: ON\n–ù–∞–¥—Å–∏–ª–∞–π —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∏ ‚Äî –∑–±–µ—Ä–µ–∂—É –Ω–∞ —Ç–≤—ñ–π Google Drive.",
      { token: env.BOT_TOKEN, reply_markup: mainKeyboard(false) }
    );
    await TG.text(chatId, "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–º—ñ—Å—Ç –¥–∏—Å–∫–∞:", { token: env.BOT_TOKEN, reply_markup: inlineOpenDrive() });
    return true;
  }

  // –ù–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞ "Senti"
  if (text === BTN_SENTI) {
    await setDriveMode(env, userId, false);
    await TG.text(
      chatId,
      "–†–µ–∂–∏–º –¥–∏—Å–∫–∞ –≤–∏–º–∫–Ω–µ–Ω–æ. –¶–µ –∑–≤–∏—á–∞–π–Ω–∏–π —á–∞—Ç Senti.",
      { token: env.BOT_TOKEN, reply_markup: mainKeyboard(false) }
    );
    return true;
  }

  // –ö–æ—Ä–æ—Ç–∫—ñ user-–∫–æ–º–∞–Ω–¥–∏ (–∑–∞–ª–∏—à–∏–ª–∏ –º—ñ–Ω—ñ–º—É–º)
  if (text === "/my_files") {
    const { userListFiles } = await import("../lib/userDrive.js");
    const files = await userListFiles(env, userId);
    const names = (files.files||[]).map(f=>`‚Ä¢ ${f.name}`).join("\n") || "–ø–æ—Ä–æ–∂–Ω—å–æ";
    await TG.text(chatId, `–¢–≤–æ—ó —Ñ–∞–π–ª–∏:\n${names}`, { token: env.BOT_TOKEN });
    return true;
  }

  if (text.startsWith("/save_url")) {
    const { userSaveUrl } = await import("../lib/userDrive.js");
    const parts = text.split(/\s+/);
    const fileUrl = parts[1];
    const name = parts.slice(2).join(" ") || "from_telegram.bin";
    if(!fileUrl){
      await TG.text(chatId, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /save_url <url> <–æ–ø—Ü.–Ω–∞–∑–≤–∞>", { token: env.BOT_TOKEN });
      return true;
    }
    const f = await userSaveUrl(env, userId, fileUrl, name);
    await TG.text(chatId, `‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: ${f.name}`, { token: env.BOT_TOKEN });
    return true;
  }

  if (text === "/ping") {
    await TG.text(chatId, "üîî Pong! –Ø –Ω–∞ –∑–≤'—è–∑–∫—É.", { token: env.BOT_TOKEN });
    return true;
  }

  return false; // –Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ ‚Äî —Ö–∞–π —ñ–Ω–¥–µ–∫—Å —Å–ø—Ä–æ–±—É—î –∞–≤—Ç–æ-–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–±–æ –¥–µ—Ñ–æ–ª—Ç
};

export const tryAutoSaveMedia = async ({ env, msg, chatId, userId, TG, userSaveUrl }) => {
  try {
    const mode = await getDriveMode(env, userId);
    if (mode) {
      const handled = await handleIncomingMedia(env, chatId, userId, msg, TG, userSaveUrl);
      if (handled) return true;
    }
  } catch (e) {
    console.log("Media save (mode) error:", e);
    try { await TG.text(chatId, `‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –∑–±–µ—Ä–µ–≥—Ç–∏ –≤–∫–ª–∞–¥–µ–Ω–Ω—è: ${String(e)}`, { token: env.BOT_TOKEN }); } catch {}
    return true;
  }
  return false;
};