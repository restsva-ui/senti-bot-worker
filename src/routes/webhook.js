// src/routes/webhook.js
// Telegram webhook –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é "–º–æ–∑–∫—É", –°—Ç–∞—Ç—É—Ç–æ–º, Self-Tune, Dialog Memory —ñ —Ä–µ–∂–∏–º–æ–º –¥–∏—Å–∫–∞.
// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ AI-–≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π ‚Äî –±–µ–∑ parse_mode (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ MarkdownV2-–ø–æ–º–∏–ª–æ–∫).
// –î–æ–¥–∞–Ω–æ: "—Å—Ç–∏—Å–ª–æ —Å–ø–æ—á–∞—Ç–∫—É" + "–¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –∑–∞ –∑–∞–ø–∏—Ç–æ–º", –∞–Ω—Ç–∏–æ–±—Ä—ñ–∑–∞–Ω–Ω—è –¥–æ–≤–≥–∏—Ö SMS.

import { driveSaveFromUrl } from "../lib/drive.js";
import { getUserTokens } from "../lib/userDrive.js";
import { abs } from "../utils/url.js";
import { think } from "../lib/brain.js";
import { readStatut } from "../lib/kvChecklist.js";
import { askAnyModel, getAiHealthSummary } from "../lib/modelRouter.js";
import { json } from "../lib/utils.js";

// –ï–Ω–µ—Ä–≥—ñ—è (—ñ—Å–Ω—É—é—á–∏–π –º–æ–¥—É–ª—å)
import { getEnergy, spendEnergy } from "../lib/energy.js";

// Dialog Memory ‚Äî –º–æ–¥—É–ª—å
import { buildDialogHint, pushTurn } from "../lib/dialogMemory.js";

// Self-Tune ‚Äî –º–æ–¥—É–ª—å
import { loadSelfTune } from "../lib/selfTune.js";

// Drive-Mode ‚Äî –º–æ–¥—É–ª—å
import { setDriveMode, getDriveMode } from "../lib/driveMode.js";

// ‚îÄ‚îÄ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const MAX_TG = 4096;                 // —Ö–∞—Ä–¥-–ª—ñ–º—ñ—Ç Telegram
const CHUNK = 3500;                  // –±–µ–∑–ø–µ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —à–º–∞—Ç–∫–∞
const SUMMARY_TARGET = 800;          // –±–∞–∂–∞–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —Å—Ç–∏—Å–ª–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (—Å–∏–º–≤–æ–ª—ñ–≤)
const SUMMARY_MIN = 450;             // –Ω–∏–∂–Ω—è –º–µ–∂–∞
const LAST_Q_KEY = (u) => `dialog:last:q:${u}`;

// ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –ù–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç –±–µ–∑ parse_mode (–±–µ–∑–ø–µ—á–Ω—ñ—à–µ). –î–æ–¥–∞—î –∞–≤—Ç–æ–±—Ä–µ–π–∫—ñ–Ω–≥ –Ω–∞ —à–º–∞—Ç–∫–∏.
async function sendPlain(env, chatId, text, extra = {}) {
  const url = `https://api.telegram.org/bot${env.BOT_TOKEN}/sendMessage`;
  const send = async (t) => {
    const body = {
      chat_id: chatId,
      text: t,
      disable_web_page_preview: true,
      ...(extra.reply_markup ? { reply_markup: extra.reply_markup } : {})
    };
    await fetch(url, {
      method: "POST",
      headers: { "content-type": "application/json" },
      body: JSON.stringify(body)
    }).catch(() => {});
  };

  if (!text) return;
  // –Ø–∫—â–æ –∫–æ—Ä–æ—Ç–∫–æ ‚Äî –æ–¥–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞
  if (text.length <= CHUNK) {
    await send(text);
    return;
  }
  // –Ü–Ω–∞–∫—à–µ ‚Äî —à–º–∞—Ç—É—î–º–æ –ø–æ –∞–±–∑–∞—Ü–∞—Ö/—Ä–µ—á–µ–Ω–Ω—è—Ö, —â–æ–± –∫—Ä–∞—Å–∏–≤–æ
  let rest = text;
  while (rest.length > 0) {
    if (rest.length <= CHUNK) {
      await send(rest);
      break;
    }
    // —à—É–∫–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä–æ–∑—Ä–∏–≤ —Ä—è–¥–∫–∞/–∫—Ä–∞–ø–∫—É –≤ –º–µ–∂–∞—Ö CHUNK
    let cut = rest.lastIndexOf("\n", CHUNK);
    if (cut < CHUNK * 0.6) cut = rest.lastIndexOf(". ", CHUNK);
    if (cut < CHUNK * 0.5) cut = CHUNK; // —Ñ–æ–ª–±–µ–∫
    const part = rest.slice(0, cut).trim();
    rest = rest.slice(cut).trim();
    await send(part);
    // –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ —à–º–∞—Ç–∫–∞ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É/markup, –∞–±–∏ –Ω–µ –¥—É–±–ª—é–≤–∞—Ç–∏
    extra = {};
  }
}

function parseAiCommand(text = "") {
  const s = String(text).trim();
  const m = s.match(/^\/ai(?:@[\w_]+)?(?:\s+([\s\S]+))?$/i);
  if (!m) return null;
  return (m[1] || "").trim();
}

function defaultAiReply() {
  return "–í–∏–±–∞—á, –∑–∞—Ä–∞–∑ –Ω–µ –≥–æ—Ç–æ–≤–∏–π –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ —á—ñ—Ç–∫–æ. –°–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∞–±–æ –¥–∞–π –±—ñ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.";
}

const BTN_DRIVE = "Google Drive";
const BTN_SENTI = "Senti";
const BTN_ADMIN = "Admin";
// BTN_CHECK –ø—Ä–∏–±—Ä–∞–Ω–æ –∑ –≥–æ–ª–æ–≤–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏

const mainKeyboard = (isAdmin = false) => {
  const rows = [[{ text: BTN_DRIVE }, { text: BTN_SENTI }]];
  if (isAdmin) rows.push([{ text: BTN_ADMIN }]);
  return { keyboard: rows, resize_keyboard: true };
};
const inlineOpenDrive = () => ({
  inline_keyboard: [[{ text: "–í—ñ–¥–∫—Ä–∏—Ç–∏ –î–∏—Å–∫", url: "https://drive.google.com/drive/my-drive" }]],
});
const ADMIN = (env, userId) => String(userId) === String(env.TELEGRAM_ADMIN_ID);

// –õ—ñ–Ω–∫–∏ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å WEBHOOK_SECRET)
function energyLinks(env, userId) {
  const s = env.WEBHOOK_SECRET || "";
  const qs = `s=${encodeURIComponent(s)}&u=${encodeURIComponent(String(userId || ""))}`;
  return {
    energy: abs(env, `/admin/energy/html?${qs}`),
    checklist: abs(env, `/admin/checklist/html?${qs}`),
  };
}

// ‚îÄ‚îÄ media helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function pickPhoto(msg) {
  const arr = Array.isArray(msg?.photo) ? msg.photo : null;
  if (!arr?.length) return null;
  const ph = arr[arr.length - 1];
  return { type: "photo", file_id: ph.file_id, name: `photo_${ph.file_unique_id}.jpg` };
}
function detectAttachment(msg) {
  if (!msg) return null;
  if (msg.document) {
    const d = msg.document;
    return { type: "document", file_id: d.file_id, name: d.file_name || `doc_${d.file_unique_id}` };
  }
  if (msg.video) {
    const v = msg.video;
    return { type: "video", file_id: v.file_id, name: v.file_name || `video_${v.file_unique_id}.mp4` };
  }
  if (msg.audio) {
    const a = msg.audio;
    return { type: "audio", file_id: a.file_id, name: a.file_name || `audio_${a.file_unique_id}.mp3` };
  }
  if (msg.voice) {
    const v = msg.voice;
    return { type: "voice", file_id: v.file_id, name: `voice_${v.file_unique_id}.ogg` };
  }
  if (msg.video_note) {
    const v = msg.video_note;
    return { type: "video_note", file_id: v.file_id, name: `videonote_${v.file_unique_id}.mp4` };
  }
  return pickPhoto(msg);
}
async function tgFileUrl(env, file_id) {
  const r = await fetch(`https://api.telegram.org/bot${env.BOT_TOKEN}/getFile`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({ file_id }),
  });
  const data = await r.json().catch(() => null);
  if (!data?.ok) throw new Error("getFile failed");
  const path = data.result?.file_path;
  if (!path) throw new Error("file_path missing");
  return `https://api.telegram.org/file/bot${env.BOT_TOKEN}/${path}`;
}
async function handleIncomingMedia(env, chatId, userId, msg) {
  const att = detectAttachment(msg);
  if (!att) return false;

  // –ï–Ω–µ—Ä–≥—ñ—è
  const cur = await getEnergy(env, userId); // { energy, costImage, low, ... }
  const need = Number(cur.costImage ?? 5);
  if ((cur.energy ?? 0) < need) {
    const links = energyLinks(env, userId);
    await sendPlain(env, chatId, `üîã –ù–µ –≤–∏—Å—Ç–∞—á–∞—î –µ–Ω–µ—Ä–≥—ñ—ó –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞ (–ø–æ—Ç—Ä—ñ–±–Ω–æ ${need}).\nEnergy: ${links.energy}`);
    return true;
  }
  await spendEnergy(env, userId, need, "media");

  const url = await tgFileUrl(env, att.file_id);
  const saved = await driveSaveFromUrl(env, userId, url, att.name);
  await sendPlain(env, chatId, `‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ —Ç–≤–æ—î–º—É –¥–∏—Å–∫—É: ${saved?.name || att.name}`);
  return true;
}

// ‚îÄ‚îÄ SystemHint (–°—Ç–∞—Ç—É—Ç + Self-Tune + Dialog Memory) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async function buildSystemHint(env, chatId, userId) {
  const statut = String((await readStatut(env)) || "").trim();
  const dlg = await buildDialogHint(env, userId); // –∑ dialogMemory.js
  const tune = await loadSelfTune(env, chatId);   // –∑ selfTune.js

  const blocks = [];
  if (statut) blocks.push(`[–°—Ç–∞—Ç—É—Ç/—á–µ–∫–ª–∏—Å—Ç]\n${statut}`);
  if (tune)   blocks.push(`[Self-Tune]\n${tune}`);
  if (dlg)    blocks.push(dlg);
  return blocks.length ? blocks.join("\n\n") : "";
}

// ‚îÄ‚îÄ –°—Ç–∏—Å–ª–æ/—Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ –ª–æ–≥—ñ–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function isExpandCommand(s = "") {
  const t = String(s).trim().toLowerCase();
  return (
    t === "–¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ" ||
    t === "–¥–æ–∫–ª–∞–¥–Ω—ñ—à–µ" ||
    t === "—Ä–æ–∑–≥–æ—Ä–Ω–∏" ||
    t === "more" ||
    t === "dokladnishe" ||
    t === "dokladnishe, bud laska" ||
    t === "–ø–æ—è—Å–Ω–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ"
  );
}

async function kvGet(env, key) {
  try { return await env.STATE_KV.get(key); } catch { return null; }
}
async function kvPut(env, key, val, opts) {
  try { await env.STATE_KV.put(key, val, opts); } catch {}
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å:
 *  - —Ä–µ–∂–∏–º "summary": —Å—Ç–∏—Å–ª–æ (<= ~800 —Å–∏–º.), 1 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∑ –ø—ñ–¥–∫–∞–∑–∫–æ—é –ø—Ä–æ "–¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ".
 *  - —Ä–µ–∂–∏–º "expand": —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ, –±–∞–≥–∞—Ç–æ–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å–æ (—à–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤ sendPlain).
 */
async function generateAi(env, userId, userText, { systemHint, expand = false }) {
  const modelOrder = String(env.MODEL_ORDER || "").trim();

  const controlHint = expand
    ? `–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ, –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏.`
    : `–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –°–¢–ò–°–õ–û (${SUMMARY_MIN}-${SUMMARY_TARGET} —Å–∏–º–≤–æ–ª—ñ–≤), 1 –∞–±–∑–∞—Ü –∞–±–æ –¥–æ 5 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—É–Ω–∫—Ç—ñ–≤. –£–Ω–∏–∫–∞–π –∑–∞–π–≤–∏—Ö –≤—Å—Ç—É–ø—ñ–≤.`;

  const postHint = expand
    ? ``
    : `\n\n(–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è ‚Äî –Ω–∞–ø–∏—à–∏: "–¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ".)`;

  const prompt = `${userText}\n\n[—Ä–µ–∂–∏–º –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ]: ${expand ? "–¥–µ—Ç–∞–ª—å–Ω–æ" : "—Å—Ç–∏—Å–ª–æ"}`;

  const out = modelOrder
    ? await askAnyModel(env, modelOrder, prompt, { systemHint: `${systemHint}\n\n${controlHint}` })
    : await think(env, prompt, { systemHint: `${systemHint}\n\n${controlHint}` });

  // –ü—ñ–¥—Ä—ñ–∑–∞—î–º–æ –∑–∞–π–≤–µ, —è–∫—â–æ —Ä–∞–ø—Ç–æ–º –≤–∏–ª—ñ–∑–ª–æ –∑–∞ 1 SMS —É —Å—Ç–∏—Å–ª–æ–º—É —Ä–µ–∂–∏–º—ñ
  const txt = expand ? out : (out.length > (CHUNK - 50) ? out.slice(0, CHUNK - 50).trim() + "‚Ä¶" : out);
  return txt + postHint;
}

// ‚îÄ‚îÄ –ì–û–õ–û–í–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
export async function handleTelegramWebhook(req, env) {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç—É Telegram webhook
  if (req.method === "POST") {
    const sec = req.headers.get("x-telegram-bot-api-secret-token");
    if (env.TG_WEBHOOK_SECRET && sec !== env.TG_WEBHOOK_SECRET) {
      return json({ ok: false, error: "unauthorized" }, { status: 401 });
    }
  } else {
    return json({ ok: true, note: "webhook alive (GET)" });
  }

  let update;
  try { update = await req.json(); } catch { return json({ ok: false }, { status: 400 }); }

  const msg =
    update.message ||
    update.edited_message ||
    update.channel_post ||
    update.callback_query?.message;

  const chatId = msg?.chat?.id || update?.callback_query?.message?.chat?.id;
  const userId = msg?.from?.id || update?.callback_query?.from?.id;
  const isAdmin = ADMIN(env, userId);
  const textRaw = String(msg?.text || msg?.caption || "").trim();
  const text = textRaw;

  const safe = async (fn) => {
    try { await fn(); } catch (e) {
      try { await sendPlain(env, chatId, "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ."); } catch {}
    }
  };

  // /admin
  if (text === "/admin" || text === "/admin@SentiBot") {
    await safe(async () => {
      if (!isAdmin) { await sendPlain(env, chatId, "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ."); return; }
      const mo = String(env.MODEL_ORDER || "").trim();
      const hasGemini = !!env.GOOGLE_GEMINI_API_KEY;
      const hasCF = !!env.CLOUDFLARE_API_TOKEN && !!env.CF_ACCOUNT_ID;
      const hasOR = !!env.OPENROUTER_API_KEY;
      const hasFreeBase = !!env.FREE_LLM_BASE_URL;
      const hasFreeKey = !!env.FREE_LLM_API_KEY;

      const lines = [
        "–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å (—à–≤–∏–¥–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞):",
        `MODEL_ORDER: ${mo || "(not set)"}`,
        `GEMINI key: ${hasGemini ? "‚úÖ" : "‚ùå"}`,
        `Cloudflare (CF_ACCOUNT_ID + CLOUDFLARE_API_TOKEN): ${hasCF ? "‚úÖ" : "‚ùå"}`,
        `OpenRouter key: ${hasOR ? "‚úÖ" : "‚ùå"}`,
        `FreeLLM (BASE_URL + KEY): ${hasFreeBase && hasFreeKey ? "‚úÖ" : "‚ùå"}`,
        "",
        "‚Äî Health:",
      ];

      const entries = mo ? mo.split(",").map(s => s.trim()).filter(Boolean) : [];
      if (entries.length) {
        const health = await getAiHealthSummary(env, entries);
        for (const h of health) {
          const light = h.cool ? "üü•" : (h.slow ? "üü®" : "üü©");
          const ms = h.ewmaMs ? `${Math.round(h.ewmaMs)}ms` : "n/a";
          lines.push(`${light} ${h.provider}:${h.model} ‚Äî ewma ${ms}, fails ${h.failStreak || 0}`);
        }
      }

      // —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏: Checklist / Energy
      await sendPlain(env, chatId, lines.join("\n"), {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–í—ñ–¥–∫—Ä–∏—Ç–∏ Checklist", url: energyLinks(env, userId).checklist }],
            [{ text: "–ö–µ—Ä—É–≤–∞–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—î—é", url: energyLinks(env, userId).energy }],
          ]
        }
      });
    });
    return json({ ok: true });
  }

  // /ai
  const aiArg = parseAiCommand(textRaw);
  if (aiArg !== null) {
    await safe(async () => {
      const q = aiArg || "";
      if (!q) {
        await sendPlain(env, chatId, "–ù–∞–ø–∏—à–∏ –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è /ai, –∞–±–æ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤ —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥–∏ ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ –∑–∞–∑–≤–∏—á–∞–π.");
        return;
      }

      const cur = await getEnergy(env, userId); // { energy, costText, low, ... }
      const need = Number(cur.costText ?? 1);
      if ((cur.energy ?? 0) < need) {
        const links = energyLinks(env, userId);
        await sendPlain(env, chatId, `üîã –ù–µ –≤–∏—Å—Ç–∞—á–∞—î –µ–Ω–µ—Ä–≥—ñ—ó (–ø–æ—Ç—Ä—ñ–±–Ω–æ ${need}). –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≤—Ç–æ.\nEnergy: ${links.energy}`);
        return;
      }
      await spendEnergy(env, userId, need, "text");

      const systemHint = await buildSystemHint(env, chatId, userId);
      const out = await generateAi(env, userId, q, { systemHint, expand: false });

      // –ø–∞–º º—è—Ç–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Ç –¥–ª—è "–¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ"
      await kvPut(env, LAST_Q_KEY(userId), q, { expirationTtl: 60 * 60 * 6 }); // 6 –≥–æ–¥

      await pushTurn(env, userId, "user", q);
      await pushTurn(env, userId, "assistant", out);

      const after = (cur.energy - need);
      if (after <= Number(cur.low ?? 10)) {
        const links = energyLinks(env, userId);
        await sendPlain(env, chatId, `${out}\n\n‚ö†Ô∏è –ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –µ–Ω–µ—Ä–≥—ñ—ó (${after}). –í—ñ–¥–Ω–æ–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ. –ö–µ—Ä—É–≤–∞–Ω–Ω—è: ${links.energy}`);
      } else {
        await sendPlain(env, chatId, out);
      }
    });
    return json({ ok: true });
  }

  // –ö–Ω–æ–ø–∫–∞ Google Drive
  if (text === BTN_DRIVE) {
    await safe(async () => {
      const ut = await getUserTokens(env, userId);
      if (!ut?.refresh_token) {
        const authUrl = abs(env, `/auth/start?u=${userId}`);
        await sendPlain(env, chatId, `–î–∞–π –¥–æ—Å—Ç—É–ø –¥–æ —Å–≤–æ–≥–æ Google Drive:\n${authUrl}\n\n–ü—ñ—Å–ª—è –¥–æ–∑–≤–æ–ª—É –ø–æ–≤–µ—Ä–Ω–∏—Å—å —É —á–∞—Ç —ñ —â–µ —Ä–∞–∑ –Ω–∞—Ç–∏—Å–Ω–∏ ¬´${BTN_DRIVE}¬ª.`);
        return;
      }
      await setDriveMode(env, userId, true);
      await sendPlain(env, chatId, "üìÅ –†–µ–∂–∏–º –¥–∏—Å–∫–∞: ON\n–ù–∞–¥—Å–∏–ª–∞–π —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∏ ‚Äî –∑–±–µ—Ä–µ–∂—É –Ω–∞ —Ç–≤—ñ–π Google Drive.", {
        reply_markup: mainKeyboard(isAdmin),
      });
      await sendPlain(env, chatId, "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–º—ñ—Å—Ç –¥–∏—Å–∫–∞:", { reply_markup: inlineOpenDrive() });
    });
    return json({ ok: true });
  }

  // –Ü–Ω—à—ñ –∫–Ω–æ–ø–∫–∏ (–ø–æ–∫–∏ –±–µ–∑ —Å–ø–µ—Ü-–ª–æ–≥—ñ–∫–∏)
  if (text === BTN_SENTI || text === BTN_ADMIN) {
    // —Ç—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤–ª–∞—Å–Ω—ñ —à–æ—Ä—Ç–∫–∞—Ç–∏ –º–∞–π–±—É—Ç–Ω—ñ–º –ø–∞—Ç—á–µ–º
  }

  // –Ø–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º –¥–∏—Å–∫–∞ ‚Äî –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –º–µ–¥—ñ–∞
  try {
    if (await getDriveMode(env, userId)) {
      if (await handleIncomingMedia(env, chatId, userId, msg)) return json({ ok: true });
    }
  } catch (e) {
    await sendPlain(env, chatId, `‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –∑–±–µ—Ä–µ–≥—Ç–∏ –≤–∫–ª–∞–¥–µ–Ω–Ω—è: ${String(e)}`);
    return json({ ok: true });
  }

  // ‚îÄ‚îÄ ‚Äú–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ‚Äù —Ç—Ä–∏“ë–µ—Ä (–±–µ–∑ —Å–ª–µ—à–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  if (isExpandCommand(text)) {
    await safe(async () => {
      const lastQ = await kvGet(env, LAST_Q_KEY(userId));
      if (!lastQ) { await sendPlain(env, chatId, "–ù–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π —Å–ø–æ—á–∞—Ç–∫—É –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è."); return; }

      const cur = await getEnergy(env, userId);
      const need = Number(cur.costText ?? 1);
      if ((cur.energy ?? 0) < need) {
        const links = energyLinks(env, userId);
        await sendPlain(env, chatId, `üîã –ù–µ –≤–∏—Å—Ç–∞—á–∞—î –µ–Ω–µ—Ä–≥—ñ—ó (–ø–æ—Ç—Ä—ñ–±–Ω–æ ${need}). –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≤—Ç–æ.\nEnergy: ${links.energy}`);
        return;
      }
      await spendEnergy(env, userId, need, "text");

      const systemHint = await buildSystemHint(env, chatId, userId);
      const out = await generateAi(env, userId, lastQ, { systemHint, expand: true });

      await pushTurn(env, userId, "user", "[–¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ]");
      await pushTurn(env, userId, "assistant", out);

      await sendPlain(env, chatId, out);
    });
    return json({ ok: true });
  }

  // ‚îÄ‚îÄ –ó–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç ‚Üí AI (—Å—Ç–∏—Å–ª–æ —Å–ø–æ—á–∞—Ç–∫—É) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  if (text && !text.startsWith("/")) {
    try {
      const cur = await getEnergy(env, userId);
      const need = Number(cur.costText ?? 1);
      if ((cur.energy ?? 0) < need) {
        const links = energyLinks(env, userId);
        await sendPlain(env, chatId, `üîã –ù–µ –≤–∏—Å—Ç–∞—á–∞—î –µ–Ω–µ—Ä–≥—ñ—ó (–ø–æ—Ç—Ä—ñ–±–Ω–æ ${need}). –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≤—Ç–æ.\nEnergy: ${links.energy}`);
        return json({ ok: true });
      }
      await spendEnergy(env, userId, need, "text");

      const systemHint = await buildSystemHint(env, chatId, userId);
      const out = await generateAi(env, userId, text, { systemHint, expand: false });

      // –∑–±–µ—Ä–µ–∂–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –∑–∞–ø–∏—Ç
      await kvPut(env, LAST_Q_KEY(userId), text, { expirationTtl: 60 * 60 * 6 });

      await pushTurn(env, userId, "user", text);
      await pushTurn(env, userId, "assistant", out);

      const after = (cur.energy - need);
      if (after <= Number(cur.low ?? 10)) {
        const links = energyLinks(env, userId);
        await sendPlain(env, chatId, `${out}\n\n‚ö†Ô∏è –ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –µ–Ω–µ—Ä–≥—ñ—ó (${after}). –ö–µ—Ä—É–≤–∞–Ω–Ω—è: ${links.energy}`);
      } else {
        await sendPlain(env, chatId, out);
      }
      return json({ ok: true });
    } catch {
      await sendPlain(env, chatId, defaultAiReply());
      return json({ ok: true });
    }
  }

  // –¥–µ—Ñ–æ–ª—Ç
  await sendPlain(env, chatId, "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?", { reply_markup: mainKeyboard(isAdmin) });
  return json({ ok: true });
}