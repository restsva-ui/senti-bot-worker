// src/routes/webhook.js
// Telegram webhook –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é "–º–æ–∑–∫—É" —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø—É/—Ä–µ–∂–∏–º—É –¥–∏—Å–∫–∞.
// –î–æ–¥–∞—î–º–æ –°—Ç–∞—Ç—É—Ç —è–∫ —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—ñ–¥–∫–∞–∑–Ω–∏–∫ –¥–ª—è AI –Ω–∞ –∫–æ–∂–Ω—É —Ç–µ–∫—Å—Ç–æ–≤—É –≤–∑–∞—î–º–æ–¥—ñ—é.

import { driveSaveFromUrl } from "../lib/drive.js";
import { getUserTokens } from "../lib/userDrive.js";
import { abs } from "../utils/url.js";
import { think } from "../lib/brain.js";
import { readStatut } from "../lib/kvChecklist.js";

// ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const json = (data, init = {}) =>
  new Response(JSON.stringify(data, null, 2), {
    headers: { "content-type": "application/json; charset=utf-8" },
    ...init,
  });

async function sendMessage(env, chatId, text, extra = {}) {
  const r = await fetch(`https://api.telegram.org/bot${env.BOT_TOKEN}/sendMessage`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, text, disable_web_page_preview: true, ...extra }),
  });
  // –Ω–µ –≤–∞–ª–∏–º–æ –∑–∞–ø–∏—Ç, —è–∫—â–æ Telegram –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É
  await r.text().catch(() => {});
}

const BTN_DRIVE = "Google Drive";
const BTN_SENTI = "Senti";
const BTN_ADMIN = "Admin";
const BTN_CHECK = "Checklist";

const mainKeyboard = (isAdmin = false) => {
  const rows = [[{ text: BTN_DRIVE }, { text: BTN_SENTI }]];
  if (isAdmin) rows.push([{ text: BTN_ADMIN }, { text: BTN_CHECK }]);
  return { keyboard: rows, resize_keyboard: true };
};

const inlineOpenDrive = () => ({
  inline_keyboard: [[{ text: "–í—ñ–¥–∫—Ä–∏—Ç–∏ –î–∏—Å–∫", url: "https://drive.google.com/drive/my-drive" }]],
});

const ADMIN = (env, userId) => String(userId) === String(env.TELEGRAM_ADMIN_ID);

// ‚îÄ‚îÄ STATE_KV: —Ä–µ–∂–∏–º –¥–∏—Å–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const DRIVE_MODE_KEY = (uid) => `drive_mode:${uid}`;
function ensureState(env) {
  if (!env.STATE_KV) throw new Error("STATE_KV binding missing");
  return env.STATE_KV;
}
async function setDriveMode(env, userId, on) {
  await ensureState(env).put(DRIVE_MODE_KEY(userId), on ? "1" : "0", { expirationTtl: 3600 });
}
async function getDriveMode(env, userId) {
  return (await ensureState(env).get(DRIVE_MODE_KEY(userId))) === "1";
}

// ‚îÄ‚îÄ –º–µ–¥—ñ–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function pickPhoto(msg) {
  const a = msg.photo;
  if (!Array.isArray(a) || !a.length) return null;
  const ph = a[a.length - 1];
  return { type: "photo", file_id: ph.file_id, name: `photo_${ph.file_unique_id}.jpg` };
}
function detectAttachment(msg) {
  if (!msg) return null;
  if (msg.document) {
    const d = msg.document;
    return { type: "document", file_id: d.file_id, name: d.file_name || `doc_${d.file_unique_id}` };
  }
  if (msg.video) {
    const v = msg.video;
    return { type: "video", file_id: v.file_id, name: v.file_name || `video_${v.file_unique_id}.mp4` };
  }
  if (msg.audio) {
    const a = msg.audio;
    return { type: "audio", file_id: a.file_id, name: a.file_name || `audio_${a.file_unique_id}.mp3` };
  }
  if (msg.voice) {
    const v = msg.voice;
    return { type: "voice", file_id: v.file_id, name: `voice_${v.file_unique_id}.ogg` };
  }
  if (msg.video_note) {
    const v = msg.video_note;
    return { type: "video_note", file_id: v.file_id, name: `videonote_${v.file_unique_id}.mp4` };
  }
  return pickPhoto(msg);
}
async function tgFileUrl(env, file_id) {
  const r = await fetch(`https://api.telegram.org/bot${env.BOT_TOKEN}/getFile`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({ file_id }),
  });
  const d = await r.json().catch(() => ({}));
  const path = d?.result?.file_path;
  if (!path) throw new Error("getFile: file_path missing");
  return `https://api.telegram.org/file/bot${env.BOT_TOKEN}/${path}`;
}

async function handleIncomingMedia(env, chatId, userId, msg) {
  const att = detectAttachment(msg);
  if (!att) return false;
  const ut = await getUserTokens(env, userId);
  if (!ut?.refresh_token) {
    const authUrl = abs(env, `/auth/start?u=${userId}`);
    await sendMessage(
      env,
      chatId,
      `–©–æ–± –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —É —Å–≤—ñ–π Google Drive ‚Äî —Å–ø–æ—á–∞—Ç–∫—É –¥–æ–∑–≤–æ–ª—å –¥–æ—Å—Ç—É–ø:\n${authUrl}\n\n–ü–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω–∏ ¬´${BTN_DRIVE}¬ª —â–µ —Ä–∞–∑.`
    );
    return true;
  }
  const url = await tgFileUrl(env, att.file_id);
  const saved = await driveSaveFromUrl(env, userId, url, att.name);
  await sendMessage(env, chatId, `‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ —Ç–≤–æ—î–º—É –¥–∏—Å–∫—É: ${saved?.name || att.name}`);
  return true;
}

// ‚îÄ‚îÄ –≥–æ–ª–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
export async function handleTelegramWebhook(req, env) {
  // –∑–∞—Ö–∏—Å—Ç —Å–µ–∫—Ä–µ—Ç–æ–º Telegram webhook
  if (req.method === "POST") {
    const sec = req.headers.get("x-telegram-bot-api-secret-token");
    if (env.TG_WEBHOOK_SECRET && sec !== env.TG_WEBHOOK_SECRET) {
      return json({ ok: false, error: "unauthorized" }, { status: 401 });
    }
  } else {
    // GET /webhook ‚Äî —Å–∏–≥–Ω–∞–ª alive
    return json({ ok: true, note: "webhook alive (GET)" });
  }

  let update;
  try {
    update = await req.json();
  } catch {
    return json({ ok: false }, { status: 400 });
  }

  const msg =
    update.message ||
    update.edited_message ||
    update.channel_post ||
    update.callback_query?.message;

  const textRaw = update.message?.text || update.edited_message?.text || update.callback_query?.data || "";
  const text = (textRaw || "").trim();
  if (!msg) return json({ ok: true });

  const chatId = msg.chat?.id;
  const userId = msg.from?.id;
  const isAdmin = ADMIN(env, userId);

  const safe = async (fn) => {
    try { await fn(); } catch (e) { await sendMessage(env, chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞: ${String(e)}`); }
  };

  // /start
  if (text === "/start") {
    await safe(async () => {
      await setDriveMode(env, userId, false);
      await sendMessage(env, chatId, "–ü—Ä–∏–≤—ñ—Ç! –Ø Senti ü§ñ", { reply_markup: mainKeyboard(isAdmin) });
    });
    return json({ ok: true });
  }

  // –ö–Ω–æ–ø–∫–∞ Google Drive
  if (text === BTN_DRIVE) {
    await safe(async () => {
      const ut = await getUserTokens(env, userId);
      if (!ut?.refresh_token) {
        const authUrl = abs(env, `/auth/start?u=${userId}`);
        await sendMessage(
          env,
          chatId,
          `–î–∞–π –¥–æ—Å—Ç—É–ø –¥–æ —Å–≤–æ–≥–æ Google Drive:\n${authUrl}\n\n–ü—ñ—Å–ª—è –¥–æ–∑–≤–æ–ª—É –ø–æ–≤–µ—Ä–Ω–∏—Å—å —É —á–∞—Ç —ñ —â–µ —Ä–∞–∑ –Ω–∞—Ç–∏—Å–Ω–∏ ¬´${BTN_DRIVE}¬ª.`
        );
        return;
      }
      await setDriveMode(env, userId, true);
      await sendMessage(env, chatId, "üìÅ –†–µ–∂–∏–º –¥–∏—Å–∫–∞: ON\n–ù–∞–¥—Å–∏–ª–∞–π —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∏ ‚Äî –∑–±–µ—Ä–µ–∂—É –Ω–∞ —Ç–≤—ñ–π Google Drive.", {
        reply_markup: mainKeyboard(isAdmin),
      });
      await sendMessage(env, chatId, "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–º—ñ—Å—Ç –¥–∏—Å–∫–∞:", { reply_markup: inlineOpenDrive() });
    });
    return json({ ok: true });
  }

  // –ö–Ω–æ–ø–∫–∞ Senti (–≤–∏–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º –¥–∏—Å–∫–∞)
  if (text === BTN_SENTI) {
    await safe(async () => {
      await setDriveMode(env, userId, false);
      await sendMessage(env, chatId, "–†–µ–∂–∏–º –¥–∏—Å–∫–∞ –≤–∏–º–∫–Ω–µ–Ω–æ. –¶–µ –∑–≤–∏—á–∞–π–Ω–∏–π —á–∞—Ç Senti.", {
        reply_markup: mainKeyboard(isAdmin),
      });
    });
    return json({ ok: true });
  }

  // –î–µ–∫—ñ–ª—å–∫–∞ –±–∞–∑–æ–≤–∏—Ö –∞–¥–º—ñ–Ω-–¥—ñ–π –ø—Ä—è–º–æ –∑ —á–∞—Ç—É (–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ HTML-–ø–∞–Ω–µ–ª—ñ)
  if (text === BTN_CHECK && isAdmin) {
    await safe(async () => {
      const link = abs(env, `/admin/checklist/html?s=${encodeURIComponent(env.WEBHOOK_SECRET || "")}`);
      await sendMessage(env, chatId, `üìã –ß–µ–∫–ª–∏—Å—Ç (HTML):\n${link}`);
    });
    return json({ ok: true });
  }

  if ((text === "Admin" || text === "/admin") && isAdmin) {
    await safe(async () => {
      const cl = abs(env, `/admin/checklist/html?s=${encodeURIComponent(env.WEBHOOK_SECRET || "")}`);
      const repo = abs(env, `/admin/repo/html?s=${encodeURIComponent(env.WEBHOOK_SECRET || "")}`);
      await sendMessage(
        env,
        chatId,
        `üõ† –ê–¥–º—ñ–Ω-–º–µ–Ω—é\n\n‚Ä¢ –ß–µ–∫–ª–∏—Å—Ç: ${cl}\n‚Ä¢ Repo: ${repo}\n‚Ä¢ –í–µ–±—Ö—É–∫ GET: ${abs(env, "/webhook")}`
      );
    });
    return json({ ok: true });
  }

  // –Ø–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º –¥–∏—Å–∫–∞ ‚Äî –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –º–µ–¥—ñ–∞
  try {
    if (await getDriveMode(env, userId)) {
      if (await handleIncomingMedia(env, chatId, userId, msg)) return json({ ok: true });
    }
  } catch (e) {
    await sendMessage(env, chatId, `‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –∑–±–µ—Ä–µ–≥—Ç–∏ –≤–∫–ª–∞–¥–µ–Ω–Ω—è: ${String(e)}`);
    return json({ ok: true });
  }

  // –Ø–∫—â–æ —Ü–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ —ñ –Ω–µ –º–µ–¥—ñ–∞ ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ AI –∑ –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º –°—Ç–∞—Ç—É—Ç—É
  if (text && !text.startsWith("/")) {
    try {
      const statut = await readStatut(env).catch(() => "");
      const systemHint =
        (statut ? `${statut.trim()}\n\n` : "") +
        "–¢–∏ ‚Äî Senti, –ø–æ–º—ñ—á–Ω–∏–∫ —É Telegram. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Å—Ç–∏—Å–ª–æ —Ç–∞ –¥—Ä—É–∂–Ω—å–æ. " +
        "–Ø–∫—â–æ –ø—Ä–æ—Å—è—Ç—å –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª ‚Äî –Ω–∞–≥–∞–¥–∞–π –ø—Ä–æ Google Drive —Ç–∞ —Ä–æ–∑–¥—ñ–ª Checklist/Repo.";
      const out = await think(env, text, systemHint); // —è–∫—â–æ AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π ‚Äî –≤–ø–∞–¥–µ –≤ catch
      await sendMessage(env, chatId, out || "ü§î");
      return json({ ok: true });
    } catch {
      // fallback –±–µ–∑ AI
      await sendMessage(env, chatId, "–ì–æ—Ç–æ–≤–∏–π üëã", { reply_markup: mainKeyboard(isAdmin) });
      return json({ ok: true });
    }
  }

  // –¥–µ—Ñ–æ–ª—Ç
  await sendMessage(env, chatId, "–ì–æ—Ç–æ–≤–∏–π üëã", { reply_markup: mainKeyboard(isAdmin) });
  return json({ ok: true });
}