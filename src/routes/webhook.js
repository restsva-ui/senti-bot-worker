// Telegram webhook –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é "–º–æ–∑–∫—É" —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø—É/—Ä–µ–∂–∏–º—É –¥–∏—Å–∫–∞.
// –î–æ–¥–∞—î–º–æ –°—Ç–∞—Ç—É—Ç —è–∫ —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—ñ–¥–∫–∞–∑–Ω–∏–∫ –¥–ª—è AI –Ω–∞ –∫–æ–∂–Ω—É —Ç–µ–∫—Å—Ç–æ–≤—É –≤–∑–∞—î–º–æ–¥—ñ—é.
// ‚¨ÜÔ∏è –î–û–ü–û–í–ù–ï–ù–û: Self-Tune ‚Äî –ø—ñ–¥—Ç—è–≥—É–≤–∞–º–æ —ñ–Ω—Å–∞–π—Ç–∏ –∑—ñ STATE_KV —ñ –¥–æ–¥–∞—î–º–æ rules/tone.
// ‚¨ÜÔ∏è –î–û–ü–û–í–ù–ï–ù–û: Energy ‚Äî –ª—ñ–º—ñ—Ç –≤–∏—Ç—Ä–∞—Ç –Ω–∞ —Ç–µ–∫—Å—Ç/–º–µ–¥—ñ–∞ –∑ –∞–≤—Ç–æ-–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è–º.
// ‚¨ÜÔ∏è –î–û–ü–û–í–ù–ï–ù–û: Dialog Memory ‚Äî –∫–æ—Ä–æ—Ç–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —É DIALOG_KV –∑ TTL.
// ‚¨ÜÔ∏è –î–û–ü–û–í–ù–ï–ù–û: /mem show|reset ‚Äî –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–æ—Ç–∫–æ—é –ø–∞–º‚Äô—è—Ç—Ç—é –±–µ–∑ –≤–∏—Ç—Ä–∞—Ç –µ–Ω–µ—Ä–≥—ñ—ó.

import { driveSaveFromUrl } from "../lib/drive.js";
import { getUserTokens } from "../lib/userDrive.js";
import { abs } from "../utils/url.js";
import { think } from "../lib/brain.js";
import { readStatut } from "../lib/kvChecklist.js";
import { askAnyModel, getAiHealthSummary } from "../lib/modelRouter.js";

// ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const json = (data, init = {}) =>
  new Response(JSON.stringify(data, null, 2), {
    headers: { "content-type": "application/json; charset=utf-8" },
    ...init,
  });

async function sendMessage(env, chatId, text, extra = {}) {
  const r = await fetch(`https://api.telegram.org/bot${env.BOT_TOKEN}/sendMessage`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, text, disable_web_page_preview: true, ...extra }),
  });
  await r.text().catch(() => {}); // –Ω–µ –≤–∞–ª–∏–º–æ –≤–µ—Å—å —Ö–µ–Ω–¥–ª–µ—Ä, —è–∫—â–æ TG –≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É
}

// –ë–µ–∑–ø–µ—á–Ω–∏–π –ø–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥–∏ /ai (–ø—ñ–¥—Ç—Ä–∏–º—É—î /ai, /ai@Bot, –∑/–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤)
function parseAiCommand(text = "") {
  const s = String(text).trim();
  const m = s.match(/^\/ai(?:@[\w_]+)?(?:\s+([\s\S]+))?$/i);
  if (!m) return null;
  return (m[1] || "").trim(); // –º–æ–∂–µ –±—É—Ç–∏ ""
}

// –ü–∞—Ä—Å–µ—Ä /mem
function parseMemCommand(text = "") {
  const s = String(text).trim();
  const m = s.match(/^\/mem(?:@[\w_]+)?(?:\s+([\s\S]+))?$/i);
  if (!m) return null;
  const arg = (m[1] || "").trim();
  if (!arg) return { cmd: "help" };
  const parts = arg.split(/\s+/);
  const sub = parts[0].toLowerCase();
  if (sub === "show") {
    const n = Math.min(50, Math.max(1, Number(parts[1] || 10)));
    return { cmd: "show", n };
  }
  if (sub === "reset") return { cmd: "reset" };
  return { cmd: "help" };
}

// –ê–Ω—Ç–∏-–ø–æ—Ä–æ–∂–Ω—ñ–π —Ñ–æ–ª–±–µ–∫ + —É—Ç–∏–ª—ñ—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
function defaultAiReply() {
  return (
    "ü§ñ –Ø –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è, –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∑ –∫–æ–¥–æ–º, " +
    "–∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ñ–∞–π–ª–∏ –Ω–∞ Google Drive (–∫–Ω–æ–ø–∫–∞ ¬´Google Drive¬ª) " +
    "—Ç–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ —á–µ–∫–ª–∏—Å—Ç–æ–º/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—î–º. –°–ø—Ä–æ–±—É–π –∑–∞–ø–∏—Ç –Ω–∞ —Ç–µ–º—É, —è–∫–∞ —Ü—ñ–∫–∞–≤–∏—Ç—å!"
  );
}
const isBlank = (s) => !s || !String(s).trim();

const BTN_DRIVE = "Google Drive";
const BTN_SENTI = "Senti";
const BTN_ADMIN = "Admin";
const BTN_CHECK = "Checklist";

const mainKeyboard = (isAdmin = false) => {
  const rows = [[{ text: BTN_DRIVE }, { text: BTN_SENTI }]];
  if (isAdmin) rows.push([{ text: BTN_ADMIN }, { text: BTN_CHECK }]);
  return { keyboard: rows, resize_keyboard: true };
};

const inlineOpenDrive = () => ({
  inline_keyboard: [[{ text: "–í—ñ–¥–∫—Ä–∏—Ç–∏ –î–∏—Å–∫", url: "https://drive.google.com/drive/my-drive" }]],
});

const ADMIN = (env, userId) => String(userId) === String(env.TELEGRAM_ADMIN_ID);

// ‚îÄ‚îÄ STATE_KV: —Ä–µ–∂–∏–º –¥–∏—Å–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const DRIVE_MODE_KEY = (uid) => `drive_mode:${uid}`;
function ensureState(env) {
  if (!env.STATE_KV) throw new Error("STATE_KV binding missing");
  return env.STATE_KV;
}
async function setDriveMode(env, userId, on) {
  await ensureState(env).put(DRIVE_MODE_KEY(userId), on ? "1" : "0", { expirationTtl: 3600 });
}
async function getDriveMode(env, userId) {
  return (await ensureState(env).get(DRIVE_MODE_KEY(userId))) === "1";
}

// ‚îÄ‚îÄ Energy subsystem ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const ENERGY_KEY = (uid) => `energy:${uid}`;
function energyCfg(env) {
  return {
    max: Number(env.ENERGY_MAX ?? 100),
    recoverPerMin: Number(env.ENERGY_RECOVER_PER_MIN ?? 1),
    costText: Number(env.ENERGY_COST_TEXT ?? 1),
    costImage: Number(env.ENERGY_COST_IMAGE ?? 5),
    low: Number(env.ENERGY_LOW_THRESHOLD ?? 10),
  };
}

async function getEnergy(env, userId) {
  const cfg = energyCfg(env);
  const raw = await ensureState(env).get(ENERGY_KEY(userId));
  const now = Math.floor(Date.now() / 1000);
  if (!raw) {
    const obj = { v: cfg.max, t: now };
    await ensureState(env).put(ENERGY_KEY(userId), JSON.stringify(obj));
    return obj.v;
  }
  let obj;
  try { obj = JSON.parse(raw); } catch { obj = { v: cfg.max, t: now }; }
  const minutes = Math.floor((now - (obj.t || now)) / 60);
  if (minutes > 0 && obj.v < cfg.max) {
    obj.v = Math.min(cfg.max, obj.v + minutes * cfg.recoverPerMin);
    obj.t = now;
    await ensureState(env).put(ENERGY_KEY(userId), JSON.stringify(obj));
  }
  return obj.v;
}

async function setEnergy(env, userId, v) {
  const now = Math.floor(Date.now() / 1000);
  await ensureState(env).put(ENERGY_KEY(userId), JSON.stringify({ v, t: now }));
  return v;
}

async function spendEnergy(env, userId, cost) {
  const cfg = energyCfg(env);
  const cur = await getEnergy(env, userId);
  if (cur < cost) return { ok: false, cur, need: cost, cfg };
  const left = Math.max(0, cur - cost);
  await setEnergy(env, userId, left);
  return { ok: true, cur: left, cfg };
}

function energyLinks(env, userId) {
  const s = env.WEBHOOK_SECRET || "";
  const qs = `s=${encodeURIComponent(s)}&u=${encodeURIComponent(String(userId || ""))}`;
  return {
    energy: abs(env, `/admin/energy/html?${qs}`),
    checklist: abs(env, `/admin/checklist/html?${qs}`),
  };
}

// ‚îÄ‚îÄ Dialog Memory (DIALOG_KV) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Ö–æ–¥–∏ –¥—ñ–∞–ª–æ–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–æ—Ç–æ–º.
// –û–±–º–µ–∂–µ–Ω–Ω—è: maxTurns —Ç–∞ maxBytes –∑–∞–ø–æ–±—ñ–≥–∞—é—Ç—å —Ä–æ–∑—Ä–æ—Å—Ç–∞–Ω–Ω—é.
// TTL: 14 –¥–Ω—ñ–≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ ‚Äî –∑–∞–ø–∏—Å –∑–Ω–∏–∫–Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.
const DIALOG_KEY = (uid) => `dlg:${uid}`;
const DLG_CFG = {
  maxTurns: 12,          // —Å–∫—ñ–ª—å–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç—Ä–∏–º–∞—Ç–∏ (user+assistant —Ä–∞–∑–æ–º)
  maxBytes: 8_000,       // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä JSON-—Ä—è–¥–∫–∞
  ttlSec: 14 * 24 * 3600 // 14 –¥–Ω—ñ–≤
};
function ensureDialog(env) {
  return env.DIALOG_KV || null;
}
async function readDialog(env, userId) {
  const kv = ensureDialog(env);
  if (!kv) return [];
  try {
    const raw = await kv.get(DIALOG_KEY(userId));
    if (!raw) return [];
    const arr = JSON.parse(raw);
    return Array.isArray(arr) ? arr : [];
  } catch {
    return [];
  }
}
function trimDialog(arr) {
  let out = Array.isArray(arr) ? arr.slice(-DLG_CFG.maxTurns) : [];
  // —è–∫—â–æ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ –±–∞–π—Ç–∏ ‚Äî –∂–æ—Ä—Å—Ç–∫—ñ—à–µ —Ä—ñ–∂–µ–º–æ –∑ –ø–æ—á–∞—Ç–∫—É
  let s = new TextEncoder().encode(JSON.stringify(out)).length;
  while (out.length > 4 && s > DLG_CFG.maxBytes) {
    out = out.slice(2); // –≤—ñ–¥—Å—ñ–∫–∞—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—à—ñ 2 –∑–∞–ø–∏—Å–∏
    s = new TextEncoder().encode(JSON.stringify(out)).length;
  }
  return out;
}
async function writeDialog(env, userId, arr) {
  const kv = ensureDialog(env);
  if (!kv) return false;
  const val = JSON.stringify(trimDialog(arr));
  try {
    await kv.put(DIALOG_KEY(userId), val, { expirationTtl: DLG_CFG.ttlSec });
    return true;
  } catch {
    return false;
  }
}
async function pushDialog(env, userId, role, content) {
  const now = Date.now();
  const arr = await readDialog(env, userId);
  arr.push({ r: role, c: String(content || "").slice(0, 1500), t: now });
  return await writeDialog(env, userId, arr);
}
async function buildDialogHint(env, userId) {
  const turns = await readDialog(env, userId);
  if (!turns.length) return "";
  // –§–æ—Ä–º—É—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π readable-—Ö—ñ–Ω—Ç
  const lines = ["[Context: –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –¥—ñ–∞–ª–æ–≥ (–æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)]"];
  for (const it of turns.slice(-DLG_CFG.maxTurns)) {
    const who = it.r === "user" ? "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á" : "Senti";
    lines.push(`${who}: ${it.c}`);
  }
  return lines.join("\n");
}

// ‚îÄ‚îÄ Self-Tune: –ø—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Å–∞–π—Ç—ñ–≤ –∑—ñ STATE_KV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async function loadSelfTune(env, chatId) {
  try {
    if (!env.STATE_KV) return null;
    const key = `insight:latest:${chatId}`;
    const raw = await env.STATE_KV.get(key);
    if (!raw) return null;
    const obj = JSON.parse(raw);
    const rules = Array.isArray(obj?.analysis?.rules) ? obj.analysis.rules : [];
    const tone  = obj?.analysis?.tone ? String(obj.analysis.tone).trim() : "";

    if (!rules.length && !tone) return null;

    // –ë—É–¥—É—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –±–ª–æ–∫ –ø–æ–ª—ñ—Ç–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ö—ñ–Ω—Ç–∞
    const lines = [];
    if (tone) lines.push(`‚Ä¢ –¢–æ–Ω —Ä–æ–∑–º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${tone}.`);
    if (rules.length) {
      lines.push("‚Ä¢ –î–æ—Ç—Ä–∏–º—É–π—Å—è –ø—Ä–∞–≤–∏–ª:");
      for (const r of rules.slice(0, 5)) {
        lines.push(`  - ${String(r).trim()}`);
      }
    }
    const text = lines.join("\n");
    return text ? `\n\n[Self-Tune]\n${text}\n` : null;
  } catch {
    return null;
  }
}

// –ó–±—ñ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—ñ–¥–∫–∞–∑–Ω–∏–∫–∞ (–°—Ç–∞—Ç—É—Ç + Self-Tune + –±–∞–∑–æ–≤–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è + –î—ñ–∞–ª–æ–≥)
async function buildSystemHint(env, chatId, userId, extra = "") {
  const statut = await readStatut(env).catch(() => "");
  const selfTune = chatId ? await loadSelfTune(env, chatId) : null;
  const dialogCtx = userId ? await buildDialogHint(env, userId) : "";

  const base =
    (statut ? `${statut.trim()}\n\n` : "") +
    "–¢–∏ ‚Äî Senti, –ø–æ–º—ñ—á–Ω–∏–∫ —É Telegram. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Å—Ç–∏—Å–ª–æ —Ç–∞ –¥—Ä—É–∂–Ω—å–æ. " +
    "–Ø–∫—â–æ –ø—Ä–æ—Å—è—Ç—å –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª ‚Äî –Ω–∞–≥–∞–¥–∞–π –ø—Ä–æ Google Drive —Ç–∞ —Ä–æ–∑–¥—ñ–ª Checklist/Repo.";

  const parts = [base, selfTune || "", dialogCtx || "", extra || ""].filter(Boolean);
  return parts.join("\n\n");
}

// ‚îÄ‚îÄ –º–µ–¥—ñ–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function pickPhoto(msg) {
  const a = msg.photo;
  if (!Array.isArray(a) || !a.length) return null;
  const ph = a[a.length - 1];
  return { type: "photo", file_id: ph.file_id, name: `photo_${ph.file_unique_id}.jpg` };
}
function detectAttachment(msg) {
  if (!msg) return null;
  if (msg.document) {
    const d = msg.document;
    return { type: "document", file_id: d.file_id, name: d.file_name || `doc_${d.file_unique_id}` };
  }
  if (msg.video) {
    const v = msg.video;
    return { type: "video", file_id: v.file_id, name: v.file_name || `video_${v.file_unique_id}.mp4` };
  }
  if (msg.audio) {
    const a = msg.audio;
    return { type: "audio", file_id: a.file_id, name: a.file_name || `audio_${a.file_unique_id}.mp3` };
  }
  if (msg.voice) {
    const v = msg.voice;
    return { type: "voice", file_id: v.file_id, name: `voice_${v.file_unique_id}.ogg` };
  }
  if (msg.video_note) {
    const v = msg.video_note;
    return { type: "video_note", file_id: v.file_id, name: `videonote_${v.file_unique_id}.mp4` };
  }
  return pickPhoto(msg);
}
async function tgFileUrl(env, file_id) {
  const r = await fetch(`https://api.telegram.org/bot${env.BOT_TOKEN}/getFile`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({ file_id }),
  });
  const d = await r.json().catch(() => ({}));
  const path = d?.result?.file_path;
  if (!path) throw new Error("getFile: file_path missing");
  return `https://api.telegram.org/file/bot${env.BOT_TOKEN}/${path}`;
}

async function handleIncomingMedia(env, chatId, userId, msg) {
  const att = detectAttachment(msg);
  if (!att) return false;

  // energy check for media
  const { costImage } = energyCfg(env);
  const spend = await spendEnergy(env, userId, costImage);
  if (!spend.ok) {
    const links = energyLinks(env, userId);
    await sendMessage(
      env,
      chatId,
      `üîã –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –µ–Ω–µ—Ä–≥—ñ—ó –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞ (–ø–æ—Ç—Ä—ñ–±–Ω–æ ${costImage}).\n` +
      `–í—ñ–¥–Ω–æ–≤–ª—é–π—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, –∞–±–æ –∫–µ—Ä—É–π —Ç—É—Ç:\n‚Ä¢ Energy: ${links.energy}\n‚Ä¢ Checklist: ${links.checklist}`
    );
    return true;
  }

  const ut = await getUserTokens(env, userId);
  if (!ut?.refresh_token) {
    const authUrl = abs(env, `/auth/start?u=${userId}`);
    await sendMessage(
      env,
      chatId,
      `–©–æ–± –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —É —Å–≤—ñ–π Google Drive ‚Äî —Å–ø–æ—á–∞—Ç–∫—É –¥–æ–∑–≤–æ–ª—å –¥–æ—Å—Ç—É–ø:\n${authUrl}\n\n–ü–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω–∏ ¬´${BTN_DRIVE}¬ª —â–µ —Ä–∞–∑.`
    );
    return true;
  }
  const url = await tgFileUrl(env, att.file_id);
  const saved = await driveSaveFromUrl(env, userId, url, att.name);
  await sendMessage(env, chatId, `‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ —Ç–≤–æ—î–º—É –¥–∏—Å–∫—É: ${saved?.name || att.name}`);
  return true;
}

// ‚îÄ‚îÄ –≥–æ–ª–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
export async function handleTelegramWebhook(req, env) {
  // –∑–∞—Ö–∏—Å—Ç —Å–µ–∫—Ä–µ—Ç–æ–º Telegram webhook
  if (req.method === "POST") {
    const sec = req.headers.get("x-telegram-bot-api-secret-token");
    if (env.TG_WEBHOOK_SECRET && sec !== env.TG_WEBHOOK_SECRET) {
      return json({ ok: false, error: "unauthorized" }, { status: 401 });
    }
  } else {
    // GET /webhook ‚Äî —Å–∏–≥–Ω–∞–ª alive
    return json({ ok: true, note: "webhook alive (GET)" });
  }

  let update;
  try {
    update = await req.json();
  } catch {
    return json({ ok: false }, { status: 400 });
  }

  const msg =
    update.message ||
    update.edited_message ||
    update.channel_post ||
    update.callback_query?.message;

  const textRaw =
    update.message?.text || update.edited_message?.text || update.callback_query?.data || "";
  const text = (textRaw || "").trim();
  if (!msg) return json({ ok: true });

  const chatId = msg.chat?.id;
  const userId = msg.from?.id;
  const isAdmin = ADMIN(env, userId);

  const safe = async (fn) => {
    try { await fn(); } catch (e) { await sendMessage(env, chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞: ${String(e)}`); }
  };

  // /start
  if (text === "/start") {
    await safe(async () => {
      await setDriveMode(env, userId, false);
      await sendMessage(env, chatId, "–ü—Ä–∏–≤—ñ—Ç! –Ø Senti ü§ñ", { reply_markup: mainKeyboard(isAdmin) });
      // –Ω—É–ª—å–æ–≤–∏–π –∑–∞–ø–∏—Å –¥—ñ–∞–ª–æ–≥—É –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ ‚Äî –∑‚Äô—è–≤–∏—Ç—å—Å—è –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    });
    return json({ ok: true });
  }

  // /diag ‚Äî –∫–æ—Ä–æ—Ç–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)
  if (text === "/diag" && isAdmin) {
    await safe(async () => {
      const hasGemini   = !!(env.GEMINI_API_KEY || env.GOOGLE_API_KEY);
      const hasCF       = !!(env.CF_ACCOUNT_ID && env.CLOUDFLARE_API_TOKEN);
      const hasOR       = !!env.OPENROUTER_API_KEY;
      const hasFreeBase = !!env.FREE_API_BASE_URL;
      const hasFreeKey  = !!env.FREE_API_KEY;
      const mo = String(env.MODEL_ORDER || "").trim();

      const lines = [
        "üß™ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ AI",
        `MODEL_ORDER: ${mo || "(–ø–æ—Ä–æ–∂–Ω—å–æ)"}`,
        `GEMINI key: ${hasGemini ? "‚úÖ" : "‚ùå"}`,
        `Cloudflare (CF_ACCOUNT_ID + CLOUDFLARE_API_TOKEN): ${hasCF ? "‚úÖ" : "‚ùå"}`,
        `OpenRouter key: ${hasOR ? "‚úÖ" : "‚ùå"}`,
        `FreeLLM (BASE_URL + KEY): ${hasFreeBase && hasFreeKey ? "‚úÖ" : "‚ùå"}`,
      ];

      // Health summary (EWMA, fail streak, cooldown)
      const entries = mo ? mo.split(",").map(s => s.trim()).filter(Boolean) : [];
      if (entries.length) {
        const health = await getAiHealthSummary(env, entries);
        lines.push("\n‚Äî Health:");
        for (const h of health) {
          const light = h.cool ? "üü•" : (h.slow ? "üü®" : "üü©");
          const ms = h.ewmaMs ? `${Math.round(h.ewmaMs)}ms` : "n/a";
          lines.push(`${light} ${h.provider}:${h.model} ‚Äî ewma ${ms}, fails ${h.failStreak || 0}`);
        }
      }

      await sendMessage(env, chatId, lines.join("\n"));
    });
    return json({ ok: true });
  }

  // /mem ‚Äî –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–∞–º‚Äô—è—Ç—Ç—é (–±–µ–∑ –≤–∏—Ç—Ä–∞—Ç –µ–Ω–µ—Ä–≥—ñ—ó)
  const memCmd = parseMemCommand(textRaw);
  if (memCmd) {
    await safe(async () => {
      if (memCmd.cmd === "show") {
        const arr = await readDialog(env, userId);
        if (!arr.length) {
          await sendMessage(env, chatId, "üß† –ü–∞–º‚Äô—è—Ç—å –ø–æ—Ä–æ–∂–Ω—è.");
          return;
        }
        const last = arr.slice(-memCmd.n);
        const lines = ["üß† –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏:"];
        for (const it of last) {
          const who = it.r === "user" ? "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á" : "Senti";
          lines.push(`${who}: ${it.c}`);
        }
        await sendMessage(env, chatId, lines.join("\n"));
        return;
      }
      if (memCmd.cmd === "reset") {
        await writeDialog(env, userId, []);
        await sendMessage(env, chatId, "üßΩ –ü–∞–º‚Äô—è—Ç—å —á–∞—Ç—É –æ—á–∏—â–µ–Ω–æ.");
        return;
      }
      await sendMessage(
        env,
        chatId,
        "–ö–æ–º–∞–Ω–¥–∏ /mem:\n‚Ä¢ /mem show [N] ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ N (–¥–µ—Ñ–æ–ª—Ç 10)\n‚Ä¢ /mem reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç–∏ –ø–∞–º‚Äô—è—Ç—å"
      );
    });
    return json({ ok: true });
  }

  // /ai (–Ω–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥: /ai, /ai@Bot, –∑/–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤)
  const aiArg = parseAiCommand(textRaw);
  if (aiArg !== null) {
    await safe(async () => {
      const q = aiArg || "";
      if (!q) {
        await sendMessage(
          env,
          chatId,
          "‚úçÔ∏è –ù–∞–¥—ñ—à–ª–∏ –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /ai. –ü—Ä–∏–∫–ª–∞–¥:\n/ai –°–∫—ñ–ª—å–∫–∏ –±—É–¥–µ 2+2?",
          { parse_mode: undefined }
        );
        return;
      }

      // –µ–Ω–µ—Ä–≥—ñ—è –¥–ª—è —Ç–µ–∫—Å—Ç—É
      const { costText, low } = energyCfg(env);
      const spent = await spendEnergy(env, userId, costText);
      if (!spent.ok) {
        const links = energyLinks(env, userId);
        await sendMessage(
          env,
          chatId,
          `üîã –ù–µ –≤–∏—Å—Ç–∞—á–∞—î –µ–Ω–µ—Ä–≥—ñ—ó (–ø–æ—Ç—Ä—ñ–±–Ω–æ ${costText}).\n` +
          `–í–æ–Ω–∞ –≤—ñ–¥–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.\n` +
          `–ö–µ—Ä—É–≤–∞–Ω–Ω—è:\n‚Ä¢ Energy: ${links.energy}\n‚Ä¢ Checklist: ${links.checklist}`
        );
        return;
      }

      // ‚¨áÔ∏è Self-Tune + –°—Ç–∞—Ç—É—Ç + –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥—ñ–∞–ª–æ–≥—É —è–∫ —Å–∏—Å—Ç–µ–º–Ω–∏–π —Ö—ñ–Ω—Ç
      const systemHint = await buildSystemHint(env, chatId, userId);
      const modelOrder = String(env.MODEL_ORDER || "").trim();
      let reply = "";
      try {
        if (modelOrder) {
          const merged = `${systemHint}\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${q}`;
          reply = await askAnyModel(env, merged, { temperature: 0.6, max_tokens: 800 });
        } else {
          reply = await think(env, q, systemHint);
        }
      } catch (e) {
        reply = `üß† –ü–æ–º–∏–ª–∫–∞ AI: ${String(e?.message || e)}`;
      }

      if (isBlank(reply)) reply = defaultAiReply();

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥—ñ–∞–ª–æ–≥
      await pushDialog(env, userId, "user", q);
      await pushDialog(env, userId, "assistant", reply);

      // low-mode –ø—ñ–¥–∫–∞–∑–∫–∞
      if (spent.cur <= low) {
        const links = energyLinks(env, userId);
        reply += `\n\n‚ö†Ô∏è –ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –µ–Ω–µ—Ä–≥—ñ—ó (${spent.cur}). –í—ñ–¥–Ω–æ–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ. –ö–µ—Ä—É–≤–∞–Ω–Ω—è: ${links.energy}`;
      }
      await sendMessage(env, chatId, reply, { parse_mode: undefined });
    });
    return json({ ok: true });
  }

  // –ö–Ω–æ–ø–∫–∞ Google Drive
  if (text === BTN_DRIVE) {
    await safe(async () => {
      const ut = await getUserTokens(env, userId);
      if (!ut?.refresh_token) {
        const authUrl = abs(env, `/auth/start?u=${userId}`);
        await sendMessage(
          env,
          chatId,
          `–î–∞–π –¥–æ—Å—Ç—É–ø –¥–æ —Å–≤–æ–≥–æ Google Drive:\n${authUrl}\n\n–ü—ñ—Å–ª—è –¥–æ–∑–≤–æ–ª—É –ø–æ–≤–µ—Ä–Ω–∏—Å—å —É —á–∞—Ç —ñ —â–µ —Ä–∞–∑ –Ω–∞—Ç–∏—Å–Ω–∏ ¬´${BTN_DRIVE}¬ª.`
        );
        return;
      }
      await setDriveMode(env, userId, true);
      await sendMessage(env, chatId, "üìÅ –†–µ–∂–∏–º –¥–∏—Å–∫–∞: ON\n–ù–∞–¥—Å–∏–ª–∞–π —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∏ ‚Äî –∑–±–µ—Ä–µ–∂—É –Ω–∞ —Ç–≤—ñ–π Google Drive.", {
        reply_markup: mainKeyboard(isAdmin),
      });
      await sendMessage(env, chatId, "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–º—ñ—Å—Ç –¥–∏—Å–∫–∞:", { reply_markup: inlineOpenDrive() });
    });
    return json({ ok: true });
  }

  // –ö–Ω–æ–ø–∫–∞ Senti (–≤–∏–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º –¥–∏—Å–∫–∞)
  if (text === BTN_SENTI) {
    await safe(async () => {
      await setDriveMode(env, userId, false);
      await sendMessage(env, chatId, "–†–µ–∂–∏–º –¥–∏—Å–∫–∞ –≤–∏–º–∫–Ω–µ–Ω–æ. –¶–µ –∑–≤–∏—á–∞–π–Ω–∏–π —á–∞—Ç Senti.", {
        reply_markup: mainKeyboard(isAdmin),
      });
    });
    return json({ ok: true });
  }

  // –î–µ–∫—ñ–ª—å–∫–∞ –±–∞–∑–æ–≤–∏—Ö –∞–¥–º—ñ–Ω-–¥—ñ–π –ø—Ä—è–º–æ –∑ —á–∞—Ç—É (–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ HTML-–ø–∞–Ω–µ–ª—ñ)
  if (text === BTN_CHECK && isAdmin) {
    await safe(async () => {
      const link = abs(env, `/admin/checklist/html?s=${encodeURIComponent(env.WEBHOOK_SECRET || "")}`);
      await sendMessage(env, chatId, `üìã –ß–µ–∫–ª–∏—Å—Ç (HTML):\n${link}`);
    });
    return json({ ok: true });
  }

  if ((text === "Admin" || text === "/admin") && isAdmin) {
    await safe(async () => {
      const cl = abs(env, `/admin/checklist/html?s=${encodeURIComponent(env.WEBHOOK_SECRET || "")}`);
      const repo = abs(env, `/admin/repo/html?s=${encodeURIComponent(env.WEBHOOK_SECRET || "")}`);
      await sendMessage(
        env,
        chatId,
        `üõ† –ê–¥–º—ñ–Ω-–º–µ–Ω—é\n\n‚Ä¢ –ß–µ–∫–ª–∏—Å—Ç: ${cl}\n‚Ä¢ Repo: ${repo}\n‚Ä¢ –í–µ–±—Ö—É–∫ GET: ${abs(env, "/webhook")}`
      );
    });
    return json({ ok: true });
  }

  // –Ø–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º –¥–∏—Å–∫–∞ ‚Äî –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –º–µ–¥—ñ–∞ (–∑—ñ —Å–ø–∏—Å–∞–Ω–Ω—è–º –µ–Ω–µ—Ä–≥—ñ—ó)
  try {
    if (await getDriveMode(env, userId)) {
      if (await handleIncomingMedia(env, chatId, userId, msg)) return json({ ok: true });
    }
  } catch (e) {
    await sendMessage(env, chatId, `‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –∑–±–µ—Ä–µ–≥—Ç–∏ –≤–∫–ª–∞–¥–µ–Ω–Ω—è: ${String(e)}`);
    return json({ ok: true });
  }

  // –Ø–∫—â–æ —Ü–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ —ñ –Ω–µ –º–µ–¥—ñ–∞ ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ AI –∑ –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º –°—Ç–∞—Ç—É—Ç—É + Self-Tune + –î—ñ–∞–ª–æ–≥—É
  if (text && !text.startsWith("/")) {
    try {
      // —Å–ø–∏—Å–∞–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
      const { costText, low } = energyCfg(env);
      const spent = await spendEnergy(env, userId, costText);
      if (!spent.ok) {
        const links = energyLinks(env, userId);
        await sendMessage(
          env,
          chatId,
          `üîã –ù–µ –≤–∏—Å—Ç–∞—á–∞—î –µ–Ω–µ—Ä–≥—ñ—ó (–ø–æ—Ç—Ä—ñ–±–Ω–æ ${costText}). –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≤—Ç–æ.\n` +
          `Energy: ${links.energy}`
        );
        return json({ ok: true });
      }

      const systemHint = await buildSystemHint(env, chatId, userId);
      const modelOrder = String(env.MODEL_ORDER || "").trim();
      let out = "";

      if (modelOrder) {
        const merged = `${systemHint}\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${text}`;
        out = await askAnyModel(env, merged, { temperature: 0.6, max_tokens: 800 });
      } else {
        out = await think(env, text, systemHint);
      }

      if (isBlank(out)) out = defaultAiReply();

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥—ñ–∞–ª–æ–≥
      await pushDialog(env, userId, "user", text);
      await pushDialog(env, userId, "assistant", out);

      if (spent.cur <= low) {
        const links = energyLinks(env, userId);
        out += `\n\n‚ö†Ô∏è –ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –µ–Ω–µ—Ä–≥—ñ—ó (${spent.cur}). –ö–µ—Ä—É–≤–∞–Ω–Ω—è: ${links.energy}`;
      }
      await sendMessage(env, chatId, out, { parse_mode: undefined });
      return json({ ok: true });
    } catch (e) {
      await sendMessage(env, chatId, defaultAiReply(), { parse_mode: undefined });
      return json({ ok: true });
    }
  }

  // –¥–µ—Ñ–æ–ª—Ç
  await sendMessage(env, chatId, "–ß—ñ–Ω–∞–∑–µ—Å üëã", { reply_markup: mainKeyboard(isAdmin) });
  return json({ ok: true });
}