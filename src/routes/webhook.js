import { drivePing, driveSaveFromUrl } from "../lib/drive.js";
import adminHandler from "./admin.js";

// ‚îÄ‚îÄ Helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function json(data, init = {}) {
  return new Response(JSON.stringify(data), {
    headers: { "content-type": "application/json; charset=utf-8" },
    ...init,
  });
}

async function sendMessage(env, chatId, text, extra = {}) {
  const url = `https://api.telegram.org/bot${env.BOT_TOKEN}/sendMessage`;
  const body = {
    chat_id: chatId,
    text,
    parse_mode: "Markdown",
    disable_web_page_preview: true,
    ...extra,
  };
  try {
    await fetch(url, {
      method: "POST",
      headers: { "content-type": "application/json" },
      body: JSON.stringify(body),
    });
  } catch (_) {}
}

async function logReply(env, chatId) {
  try {
    await env.STATE_KV.put(`last-reply:${chatId}`, new Date().toISOString(), {
      expirationTtl: 60 * 60 * 24,
    });
  } catch (_) {}
}

async function isOwner(env, fromId) {
  try {
    const raw = String(env.OWNER_ID ?? "").trim();
    if (!raw) return false;
    const list = raw.split(",").map((s) => s.trim()).filter(Boolean);
    return list.includes(String(fromId).trim());
  } catch {
    return false;
  }
}

// ‚îÄ‚îÄ –ê–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è —É STATE_KV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const AUTOLOG_KEY = "autolog:enabled";

async function getAutolog(env) {
  try {
    const v = await env.STATE_KV.get(AUTOLOG_KEY);
    return v === "1";
  } catch {
    return false;
  }
}

async function setAutolog(env, on) {
  try {
    await env.STATE_KV.put(AUTOLOG_KEY, on ? "1" : "0", {
      expirationTtl: 60 * 60 * 24 * 365,
    });
    return true;
  } catch {
    return false;
  }
}

// ‚îÄ‚îÄ TODO —É TODO_KV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const todoKey = (chatId) => `todo:${chatId}`;

async function loadTodos(env, chatId) {
  try {
    const raw = await env.TODO_KV.get(todoKey(chatId));
    return raw ? JSON.parse(raw) : [];
  } catch {
    return [];
  }
}

async function saveTodos(env, chatId, list) {
  try {
    await env.TODO_KV.put(todoKey(chatId), JSON.stringify(list));
    return true;
  } catch {
    return false;
  }
}

async function addTodo(env, chatId, text) {
  const list = await loadTodos(env, chatId);
  const exists = list.some((x) => x.text.toLowerCase() === text.toLowerCase());
  if (exists) return { added: false, list };
  const item = { text, ts: Date.now() };
  list.push(item);
  await saveTodos(env, chatId, list);
  return { added: true, list };
}

async function removeTodoByIndex(env, chatId, idx1) {
  const list = await loadTodos(env, chatId);
  const i = idx1 - 1;
  if (i < 0 || i >= list.length) return { ok: false, list };
  const [removed] = list.splice(i, 1);
  await saveTodos(env, chatId, list);
  return { ok: true, removed, list };
}

function formatTodos(list) {
  if (!list.length) return "‚úÖ –ß–µ–∫-–ª–∏—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π.";
  return "üìù –ß–µ–∫-–ª–∏—Å—Ç:\n" + list.map((x, i) => `${i + 1}. ${x.text}`).join("\n");
}

// ‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
export default async function webhook(request, env, ctx) {
  let update;
  try {
    update = await request.json();
  } catch {
    return json({ ok: false, error: "bad json" }, { status: 400 });
  }

  const msg =
    update.message ||
    update.edited_message ||
    update.callback_query?.message ||
    null;

  const chatId = msg?.chat?.id;
  const fromId =
    update.message?.from?.id ??
    update.edited_message?.from?.id ??
    update.callback_query?.from?.id ??
    null;

  const textRaw =
    update.message?.text ??
    update.edited_message?.text ??
    update.callback_query?.data ??
    "";

  const text = (textRaw || "").trim();
  if (!chatId) return json({ ok: true });

  // ==== ADMIN PANEL ====
  if (text.startsWith("/admin")) {
    await adminHandler({ text, chatId, fromId }, env);
    await logReply(env, chatId);
    return json({ ok: true });
  }

  // /id
  if (text === "/id") {
    await sendMessage(env, chatId, `üë§ –¢–≤—ñ–π Telegram ID: \`${fromId}\``);
    await logReply(env, chatId);
    return json({ ok: true });
  }

  // /log on|off|status
  if (text.startsWith("/log")) {
    const sub = (text.split(" ")[1] || "status").toLowerCase();
    const owner = await isOwner(env, fromId);

    if (!owner && sub !== "status") {
      await sendMessage(
        env,
        chatId,
        "üîí –ö–µ—Ä—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è–º –º–æ–∂–µ –ª–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π `/log status` –∞–±–æ `/id`."
      );
      await logReply(env, chatId);
      return json({ ok: true });
    }

    if (sub === "on") {
      const ok = await setAutolog(env, true);
      const now = await getAutolog(env);
      await sendMessage(
        env,
        chatId,
        ok && now
          ? "üü¢ –ê–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è –£–í–Ü–ú–ö–ù–ï–ù–û. –ü–∏—à–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º `+`."
          : "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è (KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ?)."
      );
      await logReply(env, chatId);
      return json({ ok: true });
    }

    if (sub === "off") {
      const ok = await setAutolog(env, false);
      const now = await getAutolog(env);
      await sendMessage(
        env,
        chatId,
        ok && !now
          ? "‚ö™Ô∏è –ê–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ."
          : "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è (KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ?)."
      );
      await logReply(env, chatId);
      return json({ ok: true });
    }

    const enabled = await getAutolog(env);
    await sendMessage(
      env,
      chatId,
      `‚ÑπÔ∏è –ê–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è: ${enabled ? "–£–í–Ü–ú–ö–ù–ï–ù–û" : "–≤–∏–º–∫–Ω–µ–Ω–æ"}.`
    );
    await logReply(env, chatId);
    return json({ ok: true });
  }

  // /todo, /todo clear, /done N
  if (text === "/todo") {
    const list = await loadTodos(env, chatId);
    await sendMessage(env, chatId, formatTodos(list));
    await logReply(env, chatId);
    return json({ ok: true });
  }

  if (text === "/todo clear") {
    await saveTodos(env, chatId, []);
    await sendMessage(env, chatId, "üßπ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–æ.");
    await logReply(env, chatId);
    return json({ ok: true });
  }

  if (/^\/done\s+\d+$/i.test(text)) {
    const n = parseInt(text.split(/\s+/)[1], 10);
    const { ok, removed, list } = await removeTodoByIndex(env, chatId, n);
    await sendMessage(
      env,
      chatId,
      ok ? `‚úÖ –ì–æ—Ç–æ–≤–æ: ${removed.text}\n\n${formatTodos(list)}` : "‚ùå –ù–µ —Ç–æ–π –Ω–æ–º–µ—Ä."
    );
    await logReply(env, chatId);
    return json({ ok: true });
  }

  // –ê–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è: + –ø—É–Ω–∫—Ç —É —á–µ–∫-–ª–∏—Å—Ç
  if (await getAutolog(env)) {
    const m = text.match(/^\s*\+\s*(.+)$/s);
    if (m) {
      const itemText = m[1].trim();
      if (itemText) {
        const { added, list } = await addTodo(env, chatId, itemText);
        await sendMessage(
          env,
          chatId,
          added
            ? `‚ûï –î–æ–¥–∞–≤ —É —á–µ–∫-–ª–∏—Å—Ç: ${itemText}\n\n${formatTodos(list)}`
            : `‚ÑπÔ∏è –íAlready —É —Å–ø–∏—Å–∫—É: ${itemText}\n\n${formatTodos(list)}`
        );
        await logReply(env, chatId);
        return json({ ok: true });
      }
    }
  }

  // === Google Drive –∫–æ–º–∞–Ω–¥–∏ (–∑—Ä—É—á–Ω–æ –∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞) ===
  if (text === "/gdrive ping") {
    try {
      await drivePing(env);
      await sendMessage(env, chatId, "üü¢ Drive –¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø–∞–ø–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∞.");
    } catch (e) {
      await sendMessage(env, chatId, "‚ùå Drive –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: " + String(e?.message || e));
    }
    await logReply(env, chatId);
    return json({ ok: true });
  }

  // /gdrive save <url> [name]
  if (/^\/gdrive\s+save\s+/i.test(text)) {
    const parts = text.split(/\s+/);
    const url = parts[2];
    const name = parts.length > 3 ? parts.slice(3).join(" ") : "";
    if (!url) {
      await sendMessage(env, chatId, "‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/gdrive save <url> [–Ω–∞–∑–≤–∞.zip]`");
      await logReply(env, chatId);
      return json({ ok: true });
    }
    try {
      const saved = await driveSaveFromUrl(env, url, name);
      await sendMessage(env, chatId, `üì§ –ó–∞–ª–∏–≤ —É Drive: *${saved.name}*\nüîó ${saved.link}`);
    } catch (e) {
      await sendMessage(env, chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ª–∏—Ç–∏: " + String(e?.message || e));
    }
    await logReply(env, chatId);
    return json({ ok: true });
  }

  // /ping —ñ /help
  if (text === "/ping") {
    await sendMessage(env, chatId, "üèì Pong!");
    await logReply(env, chatId);
    return json({ ok: true });
  }

  if (text === "/help") {
    await sendMessage(
      env,
      chatId,
      [
        "*–ö–æ–º–∞–Ω–¥–∏:*",
        "/ping, /id",
        "/log status | /log on | /log off",
        "/todo ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫",
        "/done N ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—É–Ω–∫—Ç ‚ÑñN",
        "/todo clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫",
        "",
        "*Drive:*",
        "/gdrive ping ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –ø–∞–ø–∫–∏",
        "/gdrive save <url> [–Ω–∞–∑–≤–∞] ‚Äî –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª —ñ–∑ URL —É Google Drive",
        "",
        "–ö–æ–ª–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ –∞–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è ‚Äî –ø–∏—à–∏ `+ –∑–∞–≤–¥–∞–Ω–Ω—è`, —ñ —è –¥–æ–¥–∞–º —É —á–µ–∫-–ª–∏—Å—Ç.",
        "",
        "*–ê–¥–º—ñ–Ω:* `/admin`",
      ].join("\n")
    );
    await logReply(env, chatId);
    return json({ ok: true });
  }

  return json({ ok: true });
}