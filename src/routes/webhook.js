import { json, badRequest } from "../lib/resp.js";
import { verifyWebhookSecret } from "../lib/verify.js";
import { sendMessage } from "../lib/telegram.js";
import { seenUpdate } from "../lib/dedup.js";
import { rememberUserMessage, rememberBotMessage, getShortContext, resetMemory } from "../lib/memory.js";
import { rateLimit, allowWarn } from "../lib/ratelimit.js";
import { logReply, getStatus } from "../lib/journal.js";

import { getChecklist, addItem, markDone, removeItem, clearChecklist, toMarkdown } from "../lib/checklist.js";
import { getAutolog, setAutolog, autologMaybe } from "../lib/autolog.js";

function isOwner(env, fromId) {
  const owner = env.OWNER_ID ? String(env.OWNER_ID) : "";
  return owner && String(fromId) === owner;
}

export async function handleWebhook(request, env) {
  // 1) –°–µ–∫—Ä–µ—Ç (header –∞–±–æ ?secret)
  if (!verifyWebhookSecret(request, env)) {
    return json({ ok: true, ignored: true, reason: "bad secret" });
  }

  // 2) –ü–∞—Ä—Å–∏–º–æ –∞–ø–¥–µ–π—Ç
  let update;
  try { update = await request.json(); } catch { return badRequest("invalid json"); }

  const msg = update.message || update.edited_message || update.channel_post;
  const chatId = msg?.chat?.id;
  const fromId = msg?.from?.id;
  const text = (msg?.text || msg?.caption || "").trim();
  const updateId = update.update_id;

  // 3) –î–µ–¥—É–ø
  if (await seenUpdate(env, chatId, updateId)) {
    return json({ ok: true, duplicate: true });
  }

  // 4) Rate-limit
  if (chatId) {
    const rl = await rateLimit(env, chatId, { windowMs: 2000, burst: 3 });
    if (!rl.allowed) {
      if (await allowWarn(env, chatId, 10)) {
        const msgRL = `‚è≥ –ü–æ–≤—ñ–ª—å–Ω—ñ—à–µ, –±—É–¥—å –ª–∞—Å–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ ~${Math.ceil(rl.retryAfterMs / 1000)}—Å.`;
        await sendMessage(env, chatId, msgRL).catch(() => {});
        await rememberBotMessage(env, chatId, msgRL);
        await logReply(env, chatId);
      }
      return json({ ok: true, limited: true });
    }
  }

  // ====== –ö–ï–†–£–í–ê–ù–ù–Ø –ê–í–¢–û–õ–û–ì–£–í–ê–ù–ù–Ø–ú ======
  if (chatId && text.startsWith("/log")) {
    const sub = (text.split(" ")[1] || "status").toLowerCase();
    if (!isOwner(env, fromId) && sub !== "status") {
      const reply = "üîí –ö–µ—Ä—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è–º –º–æ–∂–µ –ª–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π `/log status`.";
      await sendMessage(env, chatId, reply).catch(() => {});
      await logReply(env, chatId);
      return json({ ok: true });
    }
    if (sub === "on") {
      await setAutolog(env, true);
      await sendMessage(env, chatId, "üü¢ –ê–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ. –ü–∏—à—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º `+` ‚Äî —è –¥–æ–¥–∞–º —É —á–µ–∫-–ª–∏—Å—Ç.").catch(() => {});
      await logReply(env, chatId);
      return json({ ok: true });
    }
    if (sub === "off") {
      await setAutolog(env, false);
      await sendMessage(env, chatId, "‚ö™Ô∏è –ê–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.").catch(() => {});
      await logReply(env, chatId);
      return json({ ok: true });
    }
    // status
    const enabled = await getAutolog(env);
    await sendMessage(env, chatId, `‚ÑπÔ∏è –ê–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è: ${enabled ? "–£–í–Ü–ú–ö–ù–ï–ù–û" : "–≤–∏–º–∫–Ω–µ–Ω–æ"}.`).catch(() => {});
    await logReply(env, chatId);
    return json({ ok: true });
  }
  // =======================================

  // ====== –ö–æ–º–∞–Ω–¥–∏ CheckList (/todo ...) ======
  if (chatId && text.startsWith("/todo")) {
    const args = text.split(" ").slice(1);
    const sub = (args[0] || "list").toLowerCase();

    // –õ–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏; —É—Å—ñ –º–æ–∂—É—Ç—å —á–∏—Ç–∞—Ç–∏
    const canWrite = isOwner(env, fromId);

    if (sub === "list") {
      const md = toMarkdown(await getChecklist(env));
      await sendMessage(env, chatId, `üîñ –ß–µ–∫-–ª–∏—Å—Ç:\n${md}`, { parse_mode: "Markdown" }).catch(() => {});
      await logReply(env, chatId);
      return json({ ok: true });
    }

    if (!canWrite) {
      const reply = "üîí –ó–º—ñ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –ª–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫—É. –î–æ—Å—Ç—É–ø–Ω–æ: `/todo list`.";
      await sendMessage(env, chatId, reply).catch(() => {});
      await logReply(env, chatId);
      return json({ ok: true });
    }

    if (sub === "add") {
      const textToAdd = args.slice(1).join(" ").trim();
      if (!textToAdd) {
        await sendMessage(env, chatId, "‚ûï `/todo add <—Ç–µ–∫—Å—Ç>`").catch(() => {});
      } else {
        const it = await addItem(env, textToAdd, fromId);
        await sendMessage(env, chatId, `‚ûï –î–æ–¥–∞–Ω–æ (${it.id}): ${it.text}`).catch(() => {});
      }
      await logReply(env, chatId);
      return json({ ok: true });
    }

    if (sub === "done" || sub === "undo") {
      const id = parseInt(args[1] || "0", 10);
      const ok = await markDone(env, id, sub === "done");
      await sendMessage(env, chatId, ok ? `‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ (${id})` : `‚ùì –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ (${id})`).catch(() => {});
      await logReply(env, chatId);
      return json({ ok: true });
    }

    if (sub === "rm") {
      const id = parseInt(args[1] || "0", 10);
      const ok = await removeItem(env, id);
      await sendMessage(env, chatId, ok ? `üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ (${id})` : `‚ùì –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ (${id})`).catch(() => {});
      await logReply(env, chatId);
      return json({ ok: true });
    }

    if (sub === "clear") {
      await clearChecklist(env);
      await sendMessage(env, chatId, "‚ôªÔ∏è –ß–µ–∫-–ª–∏—Å—Ç –æ—á–∏—â–µ–Ω–æ.").catch(() => {});
      await logReply(env, chatId);
      return json({ ok: true });
    }

    // help
    await sendMessage(
      env,
      chatId,
      "–ö–æ–º–∞–Ω–¥–∏ —á–µ–∫-–ª–∏—Å—Ç–∞:\n" +
      "/todo list\n" +
      "/todo add <—Ç–µ–∫—Å—Ç>\n" +
      "/todo done <id> | /todo undo <id>\n" +
      "/todo rm <id> | /todo clear\n" +
      "/log on | /log off | /log status"
    ).catch(() => {});
    await logReply(env, chatId);
    return json({ ok: true });
  }
  // ====== –ö—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É —á–µ–∫-–ª–∏—Å—Ç–∞ ======

  // 5) –Ü–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏
  if (chatId && text) {
    if (text === "/ping") {
      const reply = "üèì pong";
      await sendMessage(env, chatId, reply).catch(() => {});
      await rememberBotMessage(env, chatId, reply);
      await logReply(env, chatId);
      return json({ ok: true });
    }
    if (text === "/mem") {
      const ctx = await getShortContext(env, chatId, 10);
      const lines = ctx.map(m => `${m.role === "user" ? "üë§" : "ü§ñ"} ${m.text}`).join("\n") || "–ø–æ—Ä–æ–∂–Ω—å–æ";
      const reply = `üß† –ü–∞–º'—è—Ç—å (–æ—Å—Ç–∞–Ω–Ω—ñ):\n${lines}`;
      await sendMessage(env, chatId, reply).catch(() => {});
      await rememberBotMessage(env, chatId, reply);
      await logReply(env, chatId);
      return json({ ok: true });
    }
    if (text === "/reset") {
      await resetMemory(env, chatId);
      const reply = "‚ôªÔ∏è –ü–∞–º'—è—Ç—å –æ—á–∏—â–µ–Ω–æ.";
      await sendMessage(env, chatId, reply).catch(() => {});
      await rememberBotMessage(env, chatId, reply);
      await logReply(env, chatId);
      return json({ ok: true });
    }
    if (text === "/status") {
      const st = await getStatus(env, chatId);
      const last = st.last_ts ? new Date(st.last_ts).toISOString() : "–Ω—ñ–∫–æ–ª–∏";
      const today = new Date().toISOString().slice(0, 10);
      const todayCnt = st.by_day?.[today] || 0;
      const reply = `üìä –°—Ç–∞—Ç—É—Å: total=${st.total}, —Å—å–æ–≥–æ–¥–Ω—ñ=${todayCnt}, last=${last}`;
      await sendMessage(env, chatId, reply).catch(() => {});
      await rememberBotMessage(env, chatId, reply);
      await logReply(env, chatId);
      return json({ ok: true });
    }
  }

  // 6) –ê–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è: —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —ñ —Ñ—Ä–∞–∑–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ '+'
  if (chatId && text) {
    const logged = await autologMaybe(env, fromId, text);
    if (logged) {
      const reply = "üìù –ó–∞–Ω–æ—Ç—É–≤–∞–≤ —É —á–µ–∫-–ª–∏—Å—Ç.";
      await sendMessage(env, chatId, reply).catch(() => {});
      await rememberBotMessage(env, chatId, reply);
      await logReply(env, chatId);
      // –ù–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å ‚Äî —Ç–∞–∫–æ–∂ –≤—ñ–¥–ø–æ–≤—ñ–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–º –µ—Ö–æ –Ω–∏–∂—á–µ.
    }
  }

  // 7) –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å + –ø–∞–º'—è—Ç—å
  if (chatId) {
    await rememberUserMessage(env, chatId, text);
    const ctx = await getShortContext(env, chatId, 4);
    const hint = ctx.slice(0, -1).length
      ? `\nüß† –£ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ ${ctx.length} –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Ä–µ–ø–ª—ñ–∫.`
      : "";
    const reply = `üëã –ü—Ä–∏–≤—ñ—Ç! –¢–∏ –Ω–∞–ø–∏—Å–∞–≤: ${text || "(–ø–æ—Ä–æ–∂–Ω—å–æ)"}${hint}\n\n/help ‚Üí /ping /mem /reset /status /todo /log`;
    await sendMessage(env, chatId, reply).catch(() => {});
    await rememberBotMessage(env, chatId, reply);
    await logReply(env, chatId);
  }

  return json({ ok: true });
}
