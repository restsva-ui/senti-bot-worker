import { json, sendMessage, logReply, isOwner, getAutolog, setAutolog } from "../lib/utils.js";
import { loadTodos, saveTodos, addTodo, removeTodoByIndex, formatTodos } from "../lib/todo.js";
import { getBaseSnapshot, setBaseSnapshot } from "../lib/snapshot-manager.js";

export default async function webhook(request, env, ctx) {
  let update;
  try { update = await request.json(); }
  catch { return json({ ok: false, error: "bad json" }, { status: 400 }); }

  const msg = update.message || update.edited_message || update.callback_query?.message || null;
  const chatId = msg?.chat?.id;
  const fromId =
    update.message?.from?.id ??
    update.edited_message?.from?.id ??
    update.callback_query?.from?.id ?? null;

  const textRaw =
    update.message?.text ??
    update.edited_message?.text ??
    update.callback_query?.data ?? "";
  const text = (textRaw || "").trim();

  if (!chatId) return json({ ok: true });

  // /id
  if (text === "/id") {
    await sendMessage(env, chatId, `üë§ –¢–≤—ñ–π Telegram ID: \`${fromId}\``);
    await logReply(env, chatId);
    return json({ ok: true });
  }

  // ---- /snapshot –∫–æ–º–∞–Ω–¥–∏ (–ª–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫) ----
  // /snapshot           ‚Üí –ø–æ–∫–∞–∑–∞—Ç–∏ –±–∞–∑–æ–≤–∏–π —Å–Ω–µ–ø—à–æ—Ç
  // /snapshot setdrive  ‚Üí –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Drive-–∞—Ä—Ö—ñ–≤ —è–∫ –±–∞–∑—É (–æ—á—ñ–∫—É—î URL —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ-reply –∞–±–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –º–µ—Å–µ–¥–∂–µ–º)
  // /snapshot setsha <owner/repo> <sha> ‚Üí –∑–∞—Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ git-–∞—Ä—Ö—ñ–≤ —è–∫ –±–∞–∑—É
  if (text.startsWith("/snapshot")) {
    if (!(await isOwner(env, fromId))) {
      await sendMessage(env, chatId, "üîí –õ–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫.");
      await logReply(env, chatId);
      return json({ ok: true });
    }

    const parts = text.split(/\s+/);
    const sub = (parts[1] || "").toLowerCase();

    if (!sub) {
      const base = await getBaseSnapshot(env);
      if (!base) {
        await sendMessage(env, chatId, "‚ÑπÔ∏è –ë–∞–∑–æ–≤–∏–π —Å–Ω–µ–ø—à–æ—Ç —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
      } else {
        const when = new Date(base.createdTs).toLocaleString("uk-UA", { timeZone: env.TZ ?? "Europe/Kyiv" });
        await sendMessage(env, chatId,
          `üì¶ –ë–∞–∑–æ–≤–∏–π —Å–Ω–µ–ø—à–æ—Ç:\n‚Ä¢ sha: ${base.sha || "‚Äî"}\n‚Ä¢ url: ${base.url}\n‚Ä¢ note: ${base.note || "‚Äî"}\n‚Ä¢ when: ${when}`
        );
      }
      await logReply(env, chatId);
      return json({ ok: true });
    }

    if (sub === "setdrive") {
      // –û—á—ñ–∫—É—î–º–æ, —â–æ —Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏—à —É —á–∞—Ç –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –ü–£–ë–õ–Ü–ß–ù–ò–ô URL Google Drive –∞—Ä—Ö—ñ–≤—É
      const hint = "–ù–∞–¥—ñ—à–ª–∏ –ø—É–±–ª—ñ—á–Ω–∏–π *URL Google Drive* –∞—Ä—Ö—ñ–≤—É (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º), —ñ —è –≤—Å—Ç–∞–Ω–æ–≤–ª—é –π–æ–≥–æ —è–∫ –±–∞–∑–æ–≤–∏–π —Å–Ω–µ–ø—à–æ—Ç.\n–ü—Ä–∏–∫–ª–∞–¥: https://drive.google.com/file/d/..../view?usp=sharing";
      await sendMessage(env, chatId, hint);
      // –ø—Ä–æ—Å—Ç–∏–π —Ä–µ–∂–∏–º: –∑–∞–ø–∞–º'—è—Ç–∞—Ç–∏ —É STATE_KV –º–∞—Ä–∫–µ—Ä —ñ –¥–∞–ª—ñ –ø–µ—Ä–µ—Ö–æ–ø–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤—É—î–º–æ FSM, —Ç—Ä–∏–º–∞—î–º–æ –ø—Ä–æ—Å—Ç–æ)
      await env.STATE_KV.put(`snapshot:await_url:${chatId}`, "1", { expirationTtl: 300 });
      await logReply(env, chatId);
      return json({ ok: true });
    }

    if (sub === "setsha") {
      const repo = parts[2] || "";
      const sha = parts[3] || "";
      if (!repo || !sha) {
        await sendMessage(env, chatId, "–§–æ—Ä–º–∞—Ç: `/snapshot setsha owner/repo <sha>`");
        await logReply(env, chatId);
        return json({ ok: true });
      }
      const urlZip = `https://github.com/${repo}/archive/${sha}.zip`;
      const snap = await setBaseSnapshot(env, { sha, url: urlZip, note: "manual setsha" });
      await sendMessage(env, chatId, `‚úÖ –í—Å—Ç–∞–Ω–æ–≤–∏–≤ –±–∞–∑–æ–≤–∏–π —Å–Ω–µ–ø—à–æ—Ç:\n‚Ä¢ sha: ${snap.sha}\n‚Ä¢ url: ${snap.url}`);
      await logReply(env, chatId);
      return json({ ok: true });
    }
  }

  // –Ø–∫—â–æ —Ä–∞–Ω—ñ—à–µ –≤–≤—ñ–º–∫–Ω—É–ª–∏ —Ä–µ–∂–∏–º –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è Drive-URL ‚Äî –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ –ø–µ—Ä—à–µ –∂ –¥–æ–≤—ñ–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ URL
  const awaiting = await env.STATE_KV.get(`snapshot:await_url:${chatId}`);
  if (awaiting) {
    await env.STATE_KV.delete(`snapshot:await_url:${chatId}`);
    const maybeUrl = text;
    // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è: –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ "drive.google.com"
    if (!/drive\.google\.com/i.test(maybeUrl)) {
      await sendMessage(env, chatId, "‚ùå –¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –ø—É–±–ª—ñ—á–Ω–∏–π –ª—ñ–Ω–∫ Google Drive. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ `/snapshot setdrive`.");
      await logReply(env, chatId);
      return json({ ok: true });
    }
    const snap = await setBaseSnapshot(env, { sha: "", url: maybeUrl, note: "google drive base" });
    await sendMessage(env, chatId, `‚úÖ –í—Å—Ç–∞–Ω–æ–≤–∏–≤ –±–∞–∑–æ–≤–∏–π —Å–Ω–µ–ø—à–æ—Ç —ñ–∑ Drive:\n‚Ä¢ url: ${snap.url}`);
    await logReply(env, chatId);
    return json({ ok: true });
  }

  // ---- /log on|off|status ----
  if (text.startsWith("/log")) {
    const sub = (text.split(" ")[1] || "status").toLowerCase();
    const owner = await isOwner(env, fromId);

    if (!owner && sub !== "status") {
      await sendMessage(env, chatId, "üîí –ö–µ—Ä—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è–º –º–æ–∂–µ –ª–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π `/log status` –∞–±–æ `/id`.");
      await logReply(env, chatId);
      return json({ ok: true });
    }

    if (sub === "on") {
      const ok = await setAutolog(env, true);
      const now = await getAutolog(env);
      await sendMessage(env, chatId, ok && now ? "üü¢ –ê–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è –£–í–Ü–ú–ö–ù–ï–ù–û. –ü–∏—à–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º `+`." : "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è (KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ?).");
      await logReply(env, chatId);
      return json({ ok: true });
    }

    if (sub === "off") {
      const ok = await setAutolog(env, false);
      const now = await getAutolog(env);
      await sendMessage(env, chatId, ok && !now ? "‚ö™Ô∏è –ê–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ." : "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è (KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ?).");
      await logReply(env, chatId);
      return json({ ok: true });
    }

    const enabled = await getAutolog(env);
    await sendMessage(env, chatId, `‚ÑπÔ∏è –ê–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è: ${enabled ? "–£–í–Ü–ú–ö–ù–ï–ù–û" : "–≤–∏–º–∫–Ω–µ–Ω–æ"}.`);
    await logReply(env, chatId);
    return json({ ok: true });
  }

  // ---- /todo, /todo clear, /done N ----
  if (text === "/todo") {
    const list = await loadTodos(env, chatId);
    await sendMessage(env, chatId, formatTodos(list));
    await logReply(env, chatId);
    return json({ ok: true });
  }

  if (text === "/todo clear") {
    await saveTodos(env, chatId, []);
    await sendMessage(env, chatId, "üßπ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–æ.");
    await logReply(env, chatId);
    return json({ ok: true });
  }

  if (/^\/done\s+\d+$/i.test(text)) {
    const n = parseInt(text.split(/\s+/)[1], 10);
    const { ok, removed, list } = await removeTodoByIndex(env, chatId, n);
    await sendMessage(env, chatId, ok ? `‚úÖ –ì–æ—Ç–æ–≤–æ: ${removed.text}\n\n${formatTodos(list)}` : "‚ùå –ù–µ —Ç–æ–π –Ω–æ–º–µ—Ä.");
    await logReply(env, chatId);
    return json({ ok: true });
  }

  // ---- –∞–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è: + –∑–∞–¥–∞—á–∞ ----
  if (await getAutolog(env)) {
    const m = text.match(/^\s*\+\s*(.+)$/s);
    if (m) {
      const itemText = m[1].trim();
      if (itemText) {
        const { added, list } = await addTodo(env, chatId, itemText);
        await sendMessage(
          env,
          chatId,
          added
            ? `‚ûï –î–æ–¥–∞–≤ —É —á–µ–∫-–ª–∏—Å—Ç: ${itemText}\n\n${formatTodos(list)}`
            : `‚ÑπÔ∏è –í–∂–µ —î –≤ —Å–ø–∏—Å–∫—É: ${itemText}\n\n${formatTodos(list)}`
        );
        await logReply(env, chatId);
        return json({ ok: true });
      }
    }
  }

  // /ping /help
  if (text === "/ping") {
    await sendMessage(env, chatId, "üèì Pong!");
    await logReply(env, chatId);
    return json({ ok: true });
  }

  if (text === "/help") {
    await sendMessage(
      env,
      chatId,
      [
        "*–ö–æ–º–∞–Ω–¥–∏:*",
        "/ping, /id",
        "/log status | /log on | /log off",
        "/todo ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ | /done N | /todo clear",
        "/snapshot ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –±–∞–∑–æ–≤–∏–π —Å–Ω–µ–ø—à–æ—Ç",
        "/snapshot setdrive ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Drive-–∞—Ä—Ö—ñ–≤ —è–∫ –±–∞–∑—É",
        "/snapshot setsha owner/repo <sha> ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ git-–∞—Ä—Ö—ñ–≤ —è–∫ –±–∞–∑—É",
      ].join("\n")
    );
    await logReply(env, chatId);
    return json({ ok: true });
  }

  return json({ ok: true });
}
