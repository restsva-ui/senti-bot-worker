// src/routes/webhook.js
import { getState, setState, clearState } from "../lib/state.js";
import { adminKeyboard } from "../lib/keyboard.js";
import { wantAdmin, handleAdminCommand, ensureBotCommands } from "./admin.js";
import { driveSaveFromUrl, driveAppendLog } from "../lib/drive.js";

// === Telegram helpers ===
async function tgApi(env, method, body) {
  const url = `https://api.telegram.org/bot${env.BOT_TOKEN}/${method}`;
  const res = await fetch(url, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(body),
  });
  if (!res.ok) {
    const t = await res.text().catch(() => "");
    console.error("Telegram API error", method, res.status, t || res.statusText);
  }
  return res;
}

async function reply(env, chatId, text, extra = {}) {
  return tgApi(env, "sendMessage", { chat_id: chatId, text, ...extra });
}

// –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ adminKeyboard()
// –ü—ñ–¥—Ç—Ä–∏–º—É—î —è–∫ –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤/–∫–Ω–æ–ø–æ–∫, —Ç–∞–∫ —ñ –æ–±‚Äô—î–∫—Ç { keyboard: [...], ... }
function kbMarkup() {
  const k = adminKeyboard();

  if (!k) return undefined;

  if (Array.isArray(k)) {
    return { keyboard: k, resize_keyboard: true, is_persistent: false };
  }

  if (k && Array.isArray(k.keyboard)) {
    // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ, —è–∫—â–æ –≤–æ–Ω–∏ –ø—Ä–∏–π—à–ª–∏ –∑ —Ñ–∞–±—Ä–∏–∫–∏
    const { keyboard, ...rest } = k;
    return { keyboard, resize_keyboard: true, is_persistent: false, ...rest };
  }

  // —è–∫—â–æ —Ñ–æ—Ä–º–∞—Ç –¥–∏–≤–Ω–∏–π ‚Äî –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —â–æ–± –Ω–µ –ª–∞–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  console.warn("adminKeyboard() returned unsupported shape:", k);
  return undefined;
}

function pickText(msg = {}) {
  if (msg.text) return String(msg.text);
  if (msg.caption) return String(msg.caption);
  return "";
}

function hasNonTextPayload(msg = {}) {
  return Boolean(
    msg.photo?.length ||
    msg.video ||
    msg.document ||
    msg.sticker ||
    msg.voice ||
    msg.audio ||
    msg.animation
  );
}

export default async function webhook(request, env, ctx) {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç—É Telegram (—è–∫—â–æ –∑–∞–¥–∞–Ω–∏–π)
  const tgSecret = request.headers.get("x-telegram-bot-api-secret-token");
  if (env.TELEGRAM_SECRET_TOKEN && tgSecret !== env.TELEGRAM_SECRET_TOKEN) {
    return new Response("forbidden", { status: 403 });
  }

  // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
  ctx.waitUntil(ensureBotCommands(env).catch(() => {}));

  let update = {};
  try {
    update = await request.json();
  } catch {
    return new Response("bad json", { status: 400 });
  }

  const msg =
    update.message ||
    update.edited_message ||
    update.channel_post ||
    update.callback_query?.message;

  if (!msg || !msg.chat?.id) return new Response("no message", { status: 200 });

  const chatId = msg.chat.id;
  const textRaw = pickText(msg).trim();
  const textLower = textRaw.toLowerCase();

  const rm = kbMarkup(); // –≥–æ—Ç—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –æ–¥–∏–Ω —Ä–∞–∑

  // ---- –±–∞–∑–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏
  if (textLower === "/ping") {
    await reply(env, chatId, "pong üü¢", { reply_markup: rm });
    return new Response("ok");
  }
  if (textLower === "/help" || textLower === "/start") {
    await reply(
      env,
      chatId,
      "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n/menu ‚Äî –∞–¥–º—ñ–Ω-–º–µ–Ω—é\n/ping ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤'—è–∑–∫—É",
      { reply_markup: rm }
    );
    return new Response("ok");
  }

  // ---- state machine
  const state = (await getState(env, chatId)) || {};
  if (state.expect === "backup-url") {
    const parts = textRaw.split(/\s+/, 2);
    const url = parts[0];
    const name = parts[1] || "";
    if (!/^https?:\/\//i.test(url)) {
      await reply(env, chatId, "–ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞–ª—ñ–¥–Ω–∏–π URL (http/https).", { reply_markup: rm });
      return new Response("ok");
    }
    try {
      const res = await driveSaveFromUrl(env, url, name);
      await reply(
        env,
        chatId,
        `–ó–±–µ—Ä–µ–∂–µ–Ω–æ: ${res.name}\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è: ${res.link}`,
        { reply_markup: rm }
      );
    } catch (e) {
      await reply(env, chatId, "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: " + String(e?.message || e), { reply_markup: rm });
    }
    await clearState(env, chatId);
    return new Response("ok");
  }

  if (state.expect === "append-checklist") {
    const line = textRaw.replace(/\r?\n/g, " ").trim();
    if (!line) {
      await reply(env, chatId, "–ù–∞–¥—ñ—à–ª–∏ –æ–¥–∏–Ω –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫.", { reply_markup: rm });
      return new Response("ok");
    }
    try {
      await driveAppendLog(env, "senti_checklist.md", line);
      await reply(env, chatId, "–î–æ–¥–∞–Ω–æ –¥–æ senti_checklist.md:\n‚Ä¢ " + line, { reply_markup: rm });
    } catch (e) {
      await reply(env, chatId, "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è: " + String(e?.message || e), { reply_markup: rm });
    }
    await clearState(env, chatId);
    return new Response("ok");
  }

  // ---- –∞–¥–º—ñ–Ω-–º–µ–Ω—é –ø–æ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª–æ–≤–∞—Ö
  if (wantAdmin(textRaw) || textLower === "/menu") {
    const res = await handleAdminCommand(env, chatId, "/menu");
    if (res) {
      await reply(env, chatId, res.text, { reply_markup: rm });
      return new Response("ok");
    }
  }

  // ---- –∫–Ω–æ–ø–∫–∏/–∫–æ–º–∞–Ω–¥–∏ –∑ adminKeyboard
  const handled = await handleAdminCommand(env, chatId, textRaw);
  if (handled) {
    if (handled.expect) await setState(env, chatId, { expect: handled.expect });
    await reply(env, chatId, handled.text, { reply_markup: rm });
    return new Response("ok");
  }

  // ---- –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  if (!textRaw && hasNonTextPayload(msg)) {
    await reply(
      env,
      chatId,
      "–ü–æ–∫–∏ —â–æ —è –ø—Ä–∞—Ü—é—é –∑ —Ç–µ–∫—Å—Ç–æ–º —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏. –ù–∞—Ç–∏—Å–Ω–∏ ¬´–ú–µ–Ω—é¬ª –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–¥—ñ—à–ª–∏ /menu —á–∏ /ping.",
      { reply_markup: rm }
    );
    return new Response("ok");
  }

  // ---- —Ñ–æ–ª–±–µ–∫
  if (textRaw) {
    await reply(env, chatId, "–ù–µ –≤–ø—ñ–∑–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É. –°–ø—Ä–æ–±—É–π /menu –∞–±–æ /ping.", { reply_markup: rm });
  }
  return new Response("ok");
}