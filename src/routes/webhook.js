// –õ–µ–≥–∫–∏–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä + –±–∞–∑–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏
import { ensureBotCommands, handleAdminCommand, wantAdmin } from "./admin.js";
import { getState, clearState } from "../lib/state.js";

// —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å JSON
function json(data, init = {}) {
  return new Response(JSON.stringify(data), {
    headers: { "content-type": "application/json; charset=utf-8" },
    ...init,
  });
}

async function sendMessage(env, chatId, text, extra = {}) {
  const url = `https://api.telegram.org/bot${env.BOT_TOKEN}/sendMessage`;
  const body = { chat_id: chatId, text, parse_mode: "Markdown", ...extra };
  try {
    await fetch(url, {
      method: "POST",
      headers: { "content-type": "application/json" },
      body: JSON.stringify(body),
    });
  } catch (_) {}
}

const n = (t) =>
  (t || "")
    .replace(/[\uFE0F]/g, "")
    .replace(/[\p{Extended_Pictographic}]/gu, "")
    .replace(/\s+/g, " ")
    .trim()
    .toLowerCase();

export default async function webhook(request, env) {
  let update;
  try { update = await request.json(); } catch { return json({ ok: false, error: "bad json" }, { status: 400 }); }

  const msg = update.message || update.edited_message || update.callback_query?.message || null;
  const chatId = msg?.chat?.id;
  const text =
    update.message?.text ??
    update.edited_message?.text ??
    update.callback_query?.data ??
    "";
  if (!chatId) return json({ ok: true });

  const norm = n(text);

  // 1) –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (—ñ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ)
  // —Ä–æ–±–∏–º–æ —Ü–µ –Ω–∞ /start, /admin —ñ /menu, –∞ —Ç–∞–∫–æ–∂ —è–∫—â–æ —è–≤–Ω–æ –ø–æ–ø—Ä–æ—Å–∏–ª–∏
  if (["/start", "/admin", "/menu", "/refresh_cmds"].includes(norm)) {
    await ensureBotCommands(env);
  }

  // 2) –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å —Ç–∞ —ó—ó –¥—ñ–∞–ª–æ–≥–∏ (—Å—Ç–∞–Ω–∏)
  //    handleAdminCommand –≤–º—ñ—î:
  //    - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–∞–Ω–µ–ª—å
  //    - –æ–±—Ä–æ–±–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ Drive / List 10 / Backup URL / Checklist +
  //    - –æ–±—Ä–æ–±–∏—Ç–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è URL —ñ —Ä—è–¥–∫–∞ –¥–ª—è —á–µ–∫–ª–∏—Å—Ç–∞
  const state = await getState(env, chatId);
  const handled = await handleAdminCommand({ env, update, chatId, text, norm, state });
  if (handled) return json({ ok: true });

  // 3) –ë–∞–∑–æ–≤—ñ –¥—Ä—ñ–±–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
  if (norm === "/ping") {
    await sendMessage(env, chatId, "üèì Pong!");
    return json({ ok: true });
  }

  if (norm === "/help") {
    await sendMessage(
      env,
      chatId,
      [
        "*–ö–æ–º–∞–Ω–¥–∏:*",
        "/admin ‚Äî –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å (Drive/Backup/Checklist)",
        "/menu ‚Äî —Ç–µ —Å–∞–º–µ, —â–æ /admin",
        "/ping ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞",
        "",
        "–ù–∞—Ç–∏—Å–Ω–∏ */admin* —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏.",
      ].join("\n")
    );
    return json({ ok: true });
  }

  // 4) –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–ø–∞–¥–∫–æ–≤–æ —â–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞–≤ —É —Å–µ—Ä–µ–¥–∏–Ω—ñ –¥—ñ–∞–ª–æ–≥—É ‚Äî –ø—Ä–∏–±–µ—Ä–µ–º–æ —Å—Ç–∞–Ω, —â–æ–± –Ω–µ –∑–∞—Ü–∏–∫–ª—é–≤–∞–ª–æ—Å—å
  if (state) await clearState(env, chatId);

  // –Ω–µ –≤–ø—ñ–∑–Ω–∞–ª–∏ ‚Äî –º–æ–≤—á–∞–∑–Ω–∏–π success
  return json({ ok: true });
}