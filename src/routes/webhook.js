// src/routes/webhook.js
import { drivePing, driveSaveFromUrl, driveAppendLog, driveReadTextByName } from "../lib/drive.js";
// [AI] –Ω–æ–≤–∏–π —ñ–º–ø–æ—Ä—Ç
import { think } from "../lib/brain.js";

// ‚îÄ‚îÄ Helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function json(data, init = {}) {
  return new Response(JSON.stringify(data), {
    headers: { "content-type": "application/json; charset=utf-8" },
    ...init,
  });
}

async function sendMessage(env, chatId, text, extra = {}) {
  const url = `https://api.telegram.org/bot${env.BOT_TOKEN}/sendMessage`;
  const body = {
    chat_id: chatId,
    text,
    // –æ–±–µ—Ä–µ–∂–Ω–æ –∑ parse_mode ‚Äî —Ç–≤—ñ–π –∫–æ–¥ –º—ñ—Å—Ü—è–º–∏ —à–ª–µ –¥–æ–≤—ñ–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
    disable_web_page_preview: true,
    ...extra,
  };
  const r = await fetch(url, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(body),
  });
  const j = await r.json().catch(() => ({}));
  if (!r.ok || j?.ok === false) {
    console.log("sendMessage fail:", r.status, j);
  }
  return j;
}

// –†–∞–¥—ñ–æ–∫–Ω–æ–ø–∫–∏ (—è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à)
const mainKeyboard = {
  keyboard: [[{ text: "Google Drive" }, { text: "Senti" }]],
  resize_keyboard: true,
};

// ‚îÄ‚îÄ Webhook handler ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
export async function handleTelegramWebhook(req, env) {
  let update;
  try {
    update = await req.json();
  } catch {
    return json({ ok: false }, { status: 400 });
  }

  const msg = update.message || update.edited_message || update.channel_post || update.callback_query?.message;
  const chatId = msg?.chat?.id;
  const text = (update.message?.text || update.edited_message?.text || update.callback_query?.data || "").trim();

  if (!chatId) return json({ ok: true });

  try {
    // --- –ö–æ–º–∞–Ω–¥–∏ (–ø—Ä–∏–∫–ª–∞–¥) ---------------------------------------------------
    if (text === "/start") {
      await sendMessage(env, chatId, "–ü—Ä–∏–≤—ñ—Ç! –Ø Senti ü§ñ", { reply_markup: mainKeyboard });
      return json({ ok: true });
    }

    if (text === "/admin_ping") {
      const r = await drivePing(env);
      await sendMessage(env, chatId, `‚úÖ Admin Drive OK. filesCount: ${r.filesCount}`);
      return json({ ok: true });
    }

    // ...—Ç—É—Ç —Ç–≤–æ—ó —ñ–Ω—à—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∫–æ–º–∞–Ω–¥ (/admin_list, /admin_checklist, /admin_setwebhook, —Ç–æ—â–æ)
    // ...—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞ —É driveSaveFromUrl / autosave, —è–∫ —É —Ç–≤–æ—î–º—É —Ñ–∞–π–ª—ñ

    // --- –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞ (—Ñ—Ä–∞–≥–º–µ–Ω—Ç —è–∫ —É —Ç–µ–±–µ) --------------------------
    // (–∑–∞–ª–∏—à–∞—é —è–∫ —É —Ç–≤–æ—î–º—É –∫–æ–¥—ñ; —è–∫—â–æ —Ç—É—Ç –ª–æ–≥—ñ–∫–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–∞ ‚Äî –≤–æ–Ω–∞ —Å–ø—Ä–∞—Ü—é—î —Ä–∞–Ω—ñ—à–µ –∑–∞ AI)

    // --- [AI] –í—ñ–¥–ø–æ–≤—ñ–¥—å ¬´–º–æ–∑–∫–æ–º¬ª, —è–∫—â–æ —Ü–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞/–Ω–µ –º–µ–¥—ñ–∞ ----------------
    // –í–∞–∂–ª–∏–≤–æ: –≤–∏–∫–ª–∏–∫–∞—î–º–æ think() –õ–ò–®–ï —è–∫—â–æ —Ü–µ –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç, —è–∫–∏–π –Ω–µ –ø–µ—Ä–µ—Ö–æ–ø–∏–ª–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –≥—ñ–ª–∫–∏.
    if (text && !text.startsWith("/")) {
      const systemHint =
        "–¢–∏ ‚Äî Senti, –ø–æ–º—ñ—á–Ω–∏–∫ —É Telegram. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Å—Ç–∏—Å–ª–æ —Ç–∞ –¥—Ä—É–∂–Ω—å–æ. –Ø–∫—â–æ –ø—Ä–æ—Å—è—Ç—å –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª ‚Äî –Ω–∞–≥–∞–¥–∞–π –ø—Ä–æ Google Drive.";
      const out = await think(env, text, systemHint);
      await sendMessage(env, chatId, out);
      return json({ ok: true });
    }

    // –Ø–∫—â–æ –∑–æ–≤—Å—ñ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ:
    await sendMessage(env, chatId, "–ì–æ—Ç–æ–≤–∏–π üëã", { reply_markup: mainKeyboard });
    return json({ ok: true });
  } catch (e) {
    console.log("webhook error:", e);
    await sendMessage(env, chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞: ${String(e?.message || e)}`);
    return json({ ok: true });
  }
}

// HTML escape –¥–ª—è /cl show (–∑–∞–ª–∏—à–∏–≤ —è–∫ —É —Ç–µ–±–µ)
function escapeHtml(s) {
  return (s || "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}