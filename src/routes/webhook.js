// src/routes/webhook.js
import { getState, setState, clearState } from "../lib/state.js";
import { adminKeyboard } from "../lib/keyboard.js";
import { wantAdmin, handleAdminCommand, ensureBotCommands } from "./admin.js";
import { driveSaveFromUrl, driveAppendLog } from "../lib/drive.js";

function tgApi(env, method, body) {
  const url = `https://api.telegram.org/bot${env.BOT_TOKEN}/${method}`;
  return fetch(url, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(body),
  });
}

async function reply(env, chatId, text, extra = {}) {
  return tgApi(env, "sendMessage", {
    chat_id: chatId,
    text,
    parse_mode: "Markdown",
    ...extra,
  });
}

function pickText(msg = {}) {
  // 1) –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç
  if (msg.text) return String(msg.text);
  // 2) –ø—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∞
  if (msg.caption) return String(msg.caption);
  // 3) –∫–æ–º–∞–Ω–¥–∏ –∑ –∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ entities (—Ä—ñ–¥–∫–æ)
  return "";
}

function hasNonTextPayload(msg = {}) {
  return Boolean(
    msg.photo?.length ||
      msg.video ||
      msg.document ||
      msg.sticker ||
      msg.voice ||
      msg.audio ||
      msg.animation
  );
}

export default async function webhook(request, env, ctx) {
  // —Ä–µ—î—Å—Ç—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏ —Ä–∞–∑ —É –∫—ñ–ª—å–∫–∞ –≥–æ–¥–∏–Ω (–¥–µ—à–µ–≤–æ —ñ –±–µ–∑–ø–µ—á–Ω–æ)
  ctx.waitUntil(ensureBotCommands(env).catch(() => {}));

  let update = {};
  try {
    update = await request.json();
  } catch {
    return new Response("bad json", { status: 400 });
  }

  const msg =
    update.message ||
    update.edited_message ||
    update.channel_post ||
    update.callback_query?.message;
  if (!msg || !msg.chat?.id) return new Response("no message", { status: 200 });

  const chatId = msg.chat.id;
  const textRaw = pickText(msg).trim();
  const textLower = textRaw.toLowerCase();

  // --- /ping & /help —à–≤–∏–¥–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  if (textLower === "/ping") {
    await reply(env, chatId, "pong üü¢");
    return new Response("ok");
  }
  if (textLower === "/help" || textLower === "/start") {
    await reply(
      env,
      chatId,
      "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n/menu ‚Äî –∞–¥–º—ñ–Ω-–º–µ–Ω—é\n/ping ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤'—è–∑–∫—É"
    );
    return new Response("ok");
  }

  // --- –û–±—Ä–æ–±–∫–∞ –æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –∫—Ä–æ–∫—ñ–≤ (state machine)
  const state = (await getState(env, chatId)) || {};
  if (state.expect === "backup-url") {
    const parts = textRaw.split(/\s+/, 2);
    const url = parts[0];
    const name = parts[1] || "";
    if (!/^https?:\/\//i.test(url)) {
      await reply(env, chatId, "–ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞–ª—ñ–¥–Ω–∏–π URL (http/https).");
      return new Response("ok");
    }
    try {
      const res = await driveSaveFromUrl(env, url, name);
      await reply(
        env,
        chatId,
        `‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: *${res.name}*\nüîó ${res.link}`,
        { reply_markup: { keyboard: adminKeyboard(), resize_keyboard: true } }
      );
    } catch (e) {
      await reply(env, chatId, "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: " + String(e?.message || e));
    }
    await clearState(env, chatId);
    return new Response("ok");
  }
  if (state.expect === "append-checklist") {
    const line = textRaw.replace(/\r?\n/g, " ").trim();
    if (!line) {
      await reply(env, chatId, "–ù–∞–¥—ñ—à–ª–∏ *–æ–¥–∏–Ω* –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫.");
      return new Response("ok");
    }
    try {
      await driveAppendLog(env, "senti_checklist.md", line);
      await reply(env, chatId, "‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ `senti_checklist.md`:\n‚Ä¢ " + line, {
        reply_markup: { keyboard: adminKeyboard(), resize_keyboard: true },
      });
    } catch (e) {
      await reply(env, chatId, "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è: " + String(e?.message || e));
    }
    await clearState(env, chatId);
    return new Response("ok");
  }

  // --- –ê–¥–º—ñ–Ω –º–µ–Ω—é / –∫–Ω–æ–ø–∫–∏
  if (wantAdmin(textRaw) || textLower === "/menu") {
    const res = await handleAdminCommand(env, chatId, "/menu");
    if (res) {
      await reply(env, chatId, res.text, {
        reply_markup: { keyboard: res.keyboard, resize_keyboard: true },
      });
      return new Response("ok");
    }
  }

  // —Å–ø—Ä–æ–±—É—î–º–æ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç—É–≤–∞—Ç–∏ —è–∫ –∫–Ω–æ–ø–∫—É –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
  const handled = await handleAdminCommand(env, chatId, textRaw);
  if (handled) {
    if (handled.expect) {
      await setState(env, chatId, { expect: handled.expect });
    }
    await reply(env, chatId, handled.text, {
      reply_markup: handled.keyboard
        ? { keyboard: handled.keyboard, resize_keyboard: true }
        : undefined,
    });
    return new Response("ok");
  }

  // --- –ù–µ —Ç–µ–∫—Å—Ç: –¥–∞—Ç–∏ –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —â–æ –≤—Å–µ –æ–∫, –∞–ª–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç–µ–∫—Å—Ç/–∫–æ–º–∞–Ω–¥–∞
  if (!textRaw && hasNonTextPayload(msg)) {
    await reply(
      env,
      chatId,
      "–Ø –ø–æ–∫–∏ –ø—Ä–∞—Ü—é—é –∑ —Ç–µ–∫—Å—Ç–æ–º —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏. –ù–∞—Ç–∏—Å–Ω–∏ *–ú–µ–Ω—é* –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–¥—ñ—à–ª–∏ –æ–¥–Ω—É –∑ –∫–æ–º–∞–Ω–¥: /menu /ping",
      { reply_markup: { keyboard: adminKeyboard(), resize_keyboard: true } }
    );
    return new Response("ok");
  }

  // --- –§–æ–ª–±–µ–∫
  if (textRaw) {
    await reply(
      env,
      chatId,
      "–ù–µ –≤–ø—ñ–∑–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É. –°–ø—Ä–æ–±—É–π /menu –∞–±–æ /ping üôÇ",
      { reply_markup: { keyboard: adminKeyboard(), resize_keyboard: true } }
    );
  }
  return new Response("ok");
}