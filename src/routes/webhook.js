// src/routes/webhook.js
import { adminKeyboard } from "../lib/keyboard.js";
import { wantAdmin, handleAdminCommand, ensureBotCommands } from "./admin.js";

/** –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram */
async function send(env, payload) {
  const url = `https://api.telegram.org/bot${env.BOT_TOKEN}/sendMessage`;
  const body = {
    parse_mode: "Markdown",
    disable_web_page_preview: true,
    ...payload,
  };
  await fetch(url, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(body),
  });
}

/** –ó—Ä—É—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —É —Ç–æ–π —Å–∞–º–∏–π —á–∞—Ç */
async function reply(env, chatId, text, keyboard) {
  const reply_markup = keyboard
    ? { keyboard, resize_keyboard: true, one_time_keyboard: false }
    : undefined;
  await send(env, { chat_id: chatId, text, reply_markup });
}

function ok() {
  return new Response("ok");
}
function badRequest(msg = "bad request") {
  return new Response(msg, { status: 400 });
}

export default async function webhook(request, env, ctx) {
  if (request.method !== "POST") return badRequest("only POST");

  let update;
  try {
    update = await request.json();
  } catch {
    return badRequest("invalid json");
  }

  // –í–∏—Ç—è–≥—É—î–º–æ –Ω–∞–π—ñ–º–æ–≤—ñ—Ä–Ω—ñ—à—ñ –ø–æ–ª—è
  const msg =
    update.message ||
    update.edited_message ||
    (update.callback_query && update.callback_query.message) ||
    null;

  if (!msg || !msg.chat || !msg.chat.id) return ok();

  const chatId = msg.chat.id;
  const rawText =
    (update.message && update.message.text) ||
    (update.edited_message && update.edited_message.text) ||
    (update.callback_query && update.callback_query.data) ||
    "";

  const text = String(rawText || "").trim();
  const low = text.toLowerCase();

  // ==== –±–∞–∑–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏
  if (low === "/ping") {
    await reply(env, chatId, "pong üü¢");
    return ok();
  }

  if (low === "/start") {
    // –∑–∞—Ä–µ—î—Å—Ç—Ä—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–µ –º–µ–Ω—é
    await ensureBotCommands(env).catch(() => {});
    // –ø–æ–∫–∞–∑–∞—Ç–∏ –∞–¥–º—ñ–Ω-–º–µ–Ω—é
    await reply(
      env,
      chatId,
      "Senti Admin\n‚Äî –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è:\n" +
        "‚Ä¢ Drive –ø—ñ–Ω–≥ —ñ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤\n" +
        "‚Ä¢ –®–≤–∏–¥–∫–∏–π –±–µ–∫–∞–ø –∑–∞ URL\n" +
        "‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —á–µ–∫–ª–∏—Å—Ç",
      adminKeyboard()
    );
    return ok();
  }

  if (low === "/menu" || low === "/admin" || wantAdmin(low)) {
    await reply(
      env,
      chatId,
      "Senti Admin\n‚Äî –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è:\n" +
        "‚Ä¢ Drive –ø—ñ–Ω–≥ —ñ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤\n" +
        "‚Ä¢ –®–≤–∏–¥–∫–∏–π –±–µ–∫–∞–ø –∑–∞ URL\n" +
        "‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —á–µ–∫–ª–∏—Å—Ç",
      adminKeyboard()
    );
    return ok();
  }

  if (low === "/help") {
    await reply(
      env,
      chatId,
      "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n" +
        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n" +
        "/menu ‚Äî –∞–¥–º—ñ–Ω-–º–µ–Ω—é\n" +
        "/ping ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤'—è–∑–∫—É"
    );
    return ok();
  }

  // ==== –ì–û–õ–û–í–ù–ï: –ø—Ä–æ–±—É—î–º–æ –æ–±—Ä–æ–±–∏—Ç–∏ —è–∫ –∫–Ω–æ–ø–∫—É/–∞–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥—É
  try {
    const res = await handleAdminCommand(env, chatId, text);
    if (res) {
      const keyboard = res.keyboard ? res.keyboard : adminKeyboard();
      await reply(env, chatId, res.text, keyboard);
      // (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É –º–æ–∂–Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ —É state,
      // —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äî –∑–∞—Ä–∞–∑ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ)
      return ok();
    }
  } catch (e) {
    await reply(env, chatId, "–ü–æ–º–∏–ª–∫–∞: " + String(e?.message || e));
    return ok();
  }

  // –ù—ñ—á–æ–≥–æ –Ω–µ –≤–ø—ñ–∑–Ω–∞–ª–∏ ‚Äî –º–æ–≤—á–∏–º–æ (–∞–±–æ –¥–∞–π—Ç–µ –ø—ñ–¥–∫–∞–∑–∫—É)
  // await reply(env, chatId, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –ù–∞–¥—ñ—à–ª—ñ—Ç—å /menu.");
  return ok();
}