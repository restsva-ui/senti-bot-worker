import { json, sendMessage, logReply, isOwner, getAutolog, setAutolog } from "../lib/utils.js";
import { loadTodos, saveTodos, addTodo, removeTodoByIndex, formatTodos } from "../lib/todo.js";
import { syncOnce } from "../lib/checklist-manager.js";

export default async function webhook(request, env, ctx) {
  let update;
  try { update = await request.json(); }
  catch { return json({ ok: false, error: "bad json" }, { status: 400 }); }

  const msg = update.message || update.edited_message || update.callback_query?.message || null;
  const chatId = msg?.chat?.id;
  const fromId =
    update.message?.from?.id ??
    update.edited_message?.from?.id ??
    update.callback_query?.from?.id ?? null;

  const textRaw =
    update.message?.text ??
    update.edited_message?.text ??
    update.callback_query?.data ?? "";
  const text = (textRaw || "").trim();

  if (!chatId) return json({ ok: true });

  // /id
  if (text === "/id") {
    await sendMessage(env, chatId, `üë§ –¢–≤—ñ–π Telegram ID: \`${fromId}\``);
    await logReply(env, chatId);
    return json({ ok: true });
  }

  // /sync ‚Äî —Ä—É—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó (owner)
  if (text === "/sync") {
    if (!(await isOwner(env, fromId))) {
      await sendMessage(env, chatId, "üîí –õ–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫.");
      await logReply(env, chatId);
      return json({ ok: true });
    }
    const { changed, addedRules, count } = await syncOnce(env, chatId);
    const parts = [
      "üîÅ Sync –≤–∏–∫–æ–Ω–∞–Ω–æ.",
      `‚Ä¢ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: ${count}`,
      `‚Ä¢ –∑–º—ñ–Ω–∏: ${changed ? "—Ç–∞–∫" : "–Ω—ñ"}`
    ];
    if (addedRules.length) parts.push("‚Ä¢ –¥–æ–¥–∞–Ω–æ –ø—Ä–∞–≤–∏–ª–∞:\n" + addedRules.map((r) => `  - ${r}`).join("\n"));
    await sendMessage(env, chatId, parts.join("\n"));
    await logReply(env, chatId);
    return json({ ok: true });
  }

  // /log on|off|status
  if (text.startsWith("/log")) {
    const sub = (text.split(" ")[1] || "status").toLowerCase();
    const owner = await isOwner(env, fromId);

    if (!owner && sub !== "status") {
      await sendMessage(env, chatId, "üîí –ö–µ—Ä—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è–º –º–æ–∂–µ –ª–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π `/log status` –∞–±–æ `/id`.");
      await logReply(env, chatId);
      return json({ ok: true });
    }

    if (sub === "on") {
      const ok = await setAutolog(env, true);
      const now = await getAutolog(env);
      await sendMessage(env, chatId, ok && now ? "üü¢ –ê–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è –£–í–Ü–ú–ö–ù–ï–ù–û. –ü–∏—à–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º `+`." : "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è (KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ?).");
      await logReply(env, chatId);
      return json({ ok: true });
    }

    if (sub === "off") {
      const ok = await setAutolog(env, false);
      const now = await getAutolog(env);
      await sendMessage(env, chatId, ok && !now ? "‚ö™Ô∏è –ê–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ." : "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è (KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ?).");
      await logReply(env, chatId);
      return json({ ok: true });
    }

    const enabled = await getAutolog(env);
    await sendMessage(env, chatId, `‚ÑπÔ∏è –ê–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è: ${enabled ? "–£–í–Ü–ú–ö–ù–ï–ù–û" : "–≤–∏–º–∫–Ω–µ–Ω–æ"}.`);
    await logReply(env, chatId);
    return json({ ok: true });
  }

  // /todo, /todo clear, /done N
  if (text === "/todo") {
    const list = await loadTodos(env, chatId);
    await sendMessage(env, chatId, formatTodos(list));
    await logReply(env, chatId);
    return json({ ok: true });
  }

  if (text === "/todo clear") {
    await saveTodos(env, chatId, []);
    await sendMessage(env, chatId, "üßπ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–æ.");
    await logReply(env, chatId);
    // –ø–æ–¥—ñ—î–≤–∏–π sync —É —Ñ–æ–Ω—ñ
    ctx.waitUntil(syncOnce(env, chatId));
    return json({ ok: true });
  }

  if (/^\/done\s+\d+$/i.test(text)) {
    const n = parseInt(text.split(/\s+/)[1], 10);
    const { ok, removed, list } = await removeTodoByIndex(env, chatId, n);
    await sendMessage(env, chatId, ok ? `‚úÖ –ì–æ—Ç–æ–≤–æ: ${removed.text}\n\n${formatTodos(list)}` : "‚ùå –ù–µ —Ç–æ–π –Ω–æ–º–µ—Ä.");
    await logReply(env, chatId);
    // –ø–æ–¥—ñ—î–≤–∏–π sync —É —Ñ–æ–Ω—ñ
    ctx.waitUntil(syncOnce(env, chatId));
    return json({ ok: true });
  }

  // –∞–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è: + –∑–∞–¥–∞—á–∞
  if (await getAutolog(env)) {
    const m = text.match(/^\s*\+\s*(.+)$/s);
    if (m) {
      const itemText = m[1].trim();
      if (itemText) {
        const { added, list } = await addTodo(env, chatId, itemText);
        await sendMessage(
          env,
          chatId,
          added
            ? `‚ûï –î–æ–¥–∞–≤ —É —á–µ–∫-–ª–∏—Å—Ç: ${itemText}\n\n${formatTodos(list)}`
            : `‚ÑπÔ∏è –í–∂–µ —î –≤ —Å–ø–∏—Å–∫—É: ${itemText}\n\n${formatTodos(list)}`
        );
        await logReply(env, chatId);
        // –ø–æ–¥—ñ—î–≤–∏–π sync —É —Ñ–æ–Ω—ñ
        ctx.waitUntil(syncOnce(env, chatId));
        return json({ ok: true });
      }
    }
  }

  // /ping /help
  if (text === "/ping") {
    await sendMessage(env, chatId, "üèì Pong!");
    await logReply(env, chatId);
    return json({ ok: true });
  }

  if (text === "/help") {
    await sendMessage(
      env,
      chatId,
      [
        "*–ö–æ–º–∞–Ω–¥–∏:*",
        "/ping, /id, /sync",
        "/log status | /log on | /log off",
        "/todo ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫",
        "/done N ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—É–Ω–∫—Ç ‚ÑñN",
        "/todo clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫",
        "",
        "–ö–æ–ª–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ –∞–≤—Ç–æ–ª–æ–≥—É–≤–∞–Ω–Ω—è ‚Äî –ø–∏—à–∏ `+ –∑–∞–≤–¥–∞–Ω–Ω—è`, —ñ —è –¥–æ–¥–∞–º —É —á–µ–∫-–ª–∏—Å—Ç.",
      ].join("\n")
    );
    await logReply(env, chatId);
    return json({ ok: true });
  }

  return json({ ok: true });
}