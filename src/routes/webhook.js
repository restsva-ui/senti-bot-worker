// Telegram webhook handler (safe + logging) + reply-keyboards

import { sendMessage } from "../lib/telegram.js";
import { abs } from "../utils/url.js";

function defaultKeyboard() {
  return {
    keyboard: [
      [{ text: "–ì—É–≥–ª –¥—Ä–∞–π–≤" }, { text: "Senti" }],
      [{ text: "Admin" }],
    ],
    resize_keyboard: true,
    is_persistent: true,
  };
}

function adminKeyboard() {
  return {
    keyboard: [
      [{ text: "—á–µ–∫–ª–∏—Å—Ç" }, { text: "–ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –≤–µ–±—Ö—É–∫" }],
      [{ text: "–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω—ñ—á–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞" }],
      [{ text: "‚Üê –ù–∞–∑–∞–¥" }],
    ],
    resize_keyboard: true,
    is_persistent: true,
  };
}

function isAdmin(env, from) {
  const adminId = String(env.TELEGRAM_ADMIN_ID || "").trim();
  return adminId && String(from?.id || "") === adminId;
}

export async function handleTelegramWebhook(request, env, url) {
  // GET check
  if (request.method === "GET") {
    return new Response(JSON.stringify({ ok: true, method: "GET", message: "webhook alive" }), {
      headers: { "Content-Type": "application/json" },
    });
  }

  try {
    const body = await request.json();

    // --- Secret header check (accept several env names) ---
    const secretHeader = request.headers.get("x-telegram-bot-api-secret-token");
    const secretOk =
      secretHeader === env.TG_WEBHOOK_SECRET ||
      secretHeader === env.WEBHOOK_SECRET ||
      secretHeader === env.TELEGRAM_SECRET_TOKEN;

    // Return 200 on unauthorized so Telegram doesn't drop webhook;
    // but mark response as unauthorized.
    if (!secretOk) {
      return new Response(JSON.stringify({ ok: false, error: "unauthorized" }), { status: 200 });
    }

    const message = body.message || body.edited_message || body.channel_post || null;
    if (!message || !message.chat) {
      return new Response(JSON.stringify({ ok: true, skip: true }), {
        headers: { "Content-Type": "application/json" },
      });
    }

    const chatId = message.chat.id;
    const from = message.from || {};
    const text = (message.text || "").trim();

    // --- ROUTER ---

    // /start ‚Üí –≤—ñ—Ç–∞–Ω–Ω—è + –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∫–Ω–æ–ø–∫–∏
    if (text === "/start") {
      await sendMessage(env, chatId, "–ü—Ä–∏–≤—ñ—Ç! –Ø –Ω–∞ –∑–≤‚Äô—è–∑–∫—É üëã", {
        reply_markup: defaultKeyboard(),
      });
      // log for you
      if (env.TELEGRAM_ADMIN_ID) {
        await sendMessage(env, env.TELEGRAM_ADMIN_ID, `[direct] handled /start`);
      }
      return ok();
    }

    // –ö–Ω–æ–ø–∫–∞ "–ì—É–≥–ª –¥—Ä–∞–π–≤" ‚Üí –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ OAuth
    if (/^–≥—É–≥–ª\s*–¥—Ä–∞–π–≤$/i.test(text)) {
      const authUrl = new URL(abs(env, "/auth/start"));
      authUrl.searchParams.set("u", String(chatId));
      await sendMessage(
        env,
        chatId,
        `–©–æ–± –ø—ñ–¥‚Äô—î–¥–Ω–∞—Ç–∏ Google Drive, –≤—ñ–¥–∫—Ä–∏–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n${authUrl.toString()}`,
        { reply_markup: defaultKeyboard() }
      );
      return ok();
    }

    // –ö–Ω–æ–ø–∫–∞ "Senti"
    if (/^senti$/i.test(text)) {
      await sendMessage(env, chatId, "Senti —Ç—É—Ç. –ß–∏–º –¥–æ–ø–æ–º–æ–≥—Ç–∏? üôÇ", {
        reply_markup: defaultKeyboard(),
      });
      return ok();
    }

    // –ö–Ω–æ–ø–∫–∞ "Admin"
    if (/^admin$/i.test(text)) {
      if (!isAdmin(env, from)) {
        await sendMessage(env, chatId, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", {
          reply_markup: defaultKeyboard(),
        });
        return ok();
      }
      await sendMessage(env, chatId, "–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:", {
        reply_markup: adminKeyboard(),
      });
      return ok();
    }

    // –ê–¥–º—ñ–Ω: "‚Üê –ù–∞–∑–∞–¥"
    if (/^‚Üê\s*–Ω–∞–∑–∞–¥$/i.test(text)) {
      await sendMessage(env, chatId, "–ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", {
        reply_markup: defaultKeyboard(),
      });
      return ok();
    }

    // –ê–¥–º—ñ–Ω: "—á–µ–∫–ª–∏—Å—Ç" ‚Üí –ª—ñ–Ω–∫ –Ω–∞ UI
    if (/^—á–µ–∫–ª–∏—Å—Ç$/i.test(text) && isAdmin(env, from)) {
      const link = abs(env, "/admin/checklist/with-energy");
      await sendMessage(env, chatId, `–í—ñ–¥–∫—Ä–∏—Ç–∏ —á–µ–∫–ª–∏—Å—Ç:\n${link}`, {
        reply_markup: adminKeyboard(),
      });
      return ok();
    }

    // –ê–¥–º—ñ–Ω: "–ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –≤–µ–±—Ö—É–∫" ‚Üí –≤–∏–∫–ª–∏–∫ /tg/set-webhook
    if (/^–ø–æ—Å—Ç–∞–≤–∏—Ç–∏\s+–≤–µ–±—Ö—É–∫$/i.test(text) && isAdmin(env, from)) {
      const setUrl = abs(env, "/tg/set-webhook");
      const r = await fetch(setUrl);
      let msg = "–í–µ–±—Ö—É–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ.";
      try {
        const d = await r.text();
        msg = d?.length < 200 ? d : "Webhook set (response too long)";
      } catch {}
      await sendMessage(env, chatId, msg, { reply_markup: adminKeyboard() });
      return ok();
    }

    // –ê–¥–º—ñ–Ω: "–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω—ñ—á–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞" ‚Üí /cron/auto-improve?s=<secret>
    if (/^–∑–∞–ø—É—Å—Ç–∏—Ç–∏\s+–Ω—ñ—á–Ω–æ–≥–æ\s+–∞–≥–µ–Ω—Ç–∞$/i.test(text) && isAdmin(env, from)) {
      let runUrl = new URL(abs(env, "/cron/auto-improve"));
      if (env.WEBHOOK_SECRET) runUrl.searchParams.set("s", env.WEBHOOK_SECRET);
      const r = await fetch(runUrl.toString());
      let msg = "–ù—ñ—á–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∑–∞–ø—É—â–µ–Ω–æ.";
      try {
        const d = await r.json();
        msg = `Auto-improve: ${d?.ok ? "OK" : "FAIL"}`
          + (d?.insights ? `, insights: ${d.insights.length}` : "");
      } catch {}
      await sendMessage(env, chatId, msg, { reply_markup: adminKeyboard() });
      return ok();
    }

    // –ü—ñ–Ω–≥
    if (text.toLowerCase().includes("ping")) {
      await sendMessage(env, chatId, "pong ‚úÖ", { reply_markup: defaultKeyboard() });
      return ok();
    }

    // –Ü–Ω—à–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –µ—Ö–æ + –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
    await sendMessage(env, chatId, `–¢–∏ –Ω–∞–ø–∏—Å–∞–≤: ${text}`, {
      reply_markup: defaultKeyboard(),
    });

    // –¢–∏—Ö–∏–π –ª–æ–≥ —É –ø—Ä–∏–≤–∞—Ç –∞–¥–º—ñ–Ω–∞
    if (env.TELEGRAM_ADMIN_ID) {
      await sendMessage(env, env.TELEGRAM_ADMIN_ID, `[update] ${chatId}: ${text}`);
    }

    return ok();

    function ok() {
      return new Response(JSON.stringify({ ok: true }), {
        headers: { "Content-Type": "application/json" },
      });
    }
  } catch (e) {
    // —Ç–∏—Ö–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞ —ñ –∑–∞–≤–∂–¥–∏ 200
    try {
      if (env.TELEGRAM_ADMIN_ID) {
        await sendMessage(env, env.TELEGRAM_ADMIN_ID, `[webhook error] ${String(e?.message || e)}`);
      }
    } catch {}
    return new Response(JSON.stringify({ ok: false, error: String(e?.message || e) }), {
      headers: { "Content-Type": "application/json" },
      status: 200,
    });
  }
}