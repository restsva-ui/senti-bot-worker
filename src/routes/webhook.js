// Telegram webhook –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é "–º–æ–∑–∫—É" —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø—É/—Ä–µ–∂–∏–º—É –¥–∏—Å–∫–∞.
// –î–æ–¥–∞—î–º–æ –°—Ç–∞—Ç—É—Ç —è–∫ —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—ñ–¥–∫–∞–∑–Ω–∏–∫ –¥–ª—è AI –Ω–∞ –∫–æ–∂–Ω—É —Ç–µ–∫—Å—Ç–æ–≤—É –≤–∑–∞—î–º–æ–¥—ñ—é.
// ‚¨ÜÔ∏è Self-Tune ‚Äî —ñ–Ω—Å–∞–π—Ç–∏ –∑—ñ STATE_KV (rules/tone).
// ‚¨ÜÔ∏è Energy ‚Äî –ª—ñ–º—ñ—Ç –≤–∏—Ç—Ä–∞—Ç –Ω–∞ —Ç–µ–∫—Å—Ç/–º–µ–¥—ñ–∞ –∑ –∞–≤—Ç–æ-–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è–º.
// ‚¨ÜÔ∏è Dialog Memory ‚Äî –∫–æ—Ä–æ—Ç–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—è —É DIALOG_KV –∑ TTL.
// ‚¨ÜÔ∏è Multilang + Casual ‚Äî –∞–≤—Ç–æ-–≤–∏–±—ñ—Ä –º–æ–≤–∏ (uk/ru/de/en/fr) + —Ä–æ–∑–º–æ–≤–Ω–∏–π —Å—Ç–∏–ª—å.

import { driveSaveFromUrl } from "../lib/drive.js";
import { getUserTokens } from "../lib/userDrive.js";
import { abs } from "../utils/url.js";
import { think } from "../lib/brain.js";
import { readStatut } from "../lib/kvChecklist.js";
import { askAnyModel, getAiHealthSummary } from "../lib/modelRouter.js";

// ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const json = (data, init = {}) =>
  new Response(JSON.stringify(data, null, 2), {
    headers: { "content-type": "application/json; charset=utf-8" },
    ...init,
  });

async function sendMessage(env, chatId, text, extra = {}) {
  const r = await fetch(`https://api.telegram.org/bot${env.BOT_TOKEN}/sendMessage`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, text, disable_web_page_preview: true, ...extra }),
  });
  await r.text().catch(() => {});
}

function parseAiCommand(text = "") {
  const s = String(text).trim();
  const m = s.match(/^\/ai(?:@[\w_]+)?(?:\s+([\s\S]+))?$/i);
  if (!m) return null;
  return (m[1] || "").trim();
}

function defaultAiReply() {
  return (
    "ü§ñ –Ø –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è, –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∑ –∫–æ–¥–æ–º, " +
    "–∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ñ–∞–π–ª–∏ –Ω–∞ Google Drive (–∫–Ω–æ–ø–∫–∞ ¬´Google Drive¬ª) " +
    "—Ç–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ —á–µ–∫–ª–∏—Å—Ç–æ–º/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—î–º. –°–ø—Ä–æ–±—É–π –∑–∞–ø–∏—Ç –Ω–∞ —Ç–µ–º—É, —è–∫–∞ —Ü—ñ–∫–∞–≤–∏—Ç—å!"
  );
}
const isBlank = (s) => !s || !String(s).trim();

const BTN_DRIVE = "Google Drive";
const BTN_SENTI = "Senti";
const BTN_ADMIN = "Admin";
const BTN_CHECK = "Checklist";

const mainKeyboard = (isAdmin = false) => {
  const rows = [[{ text: BTN_DRIVE }, { text: BTN_SENTI }]];
  if (isAdmin) rows.push([{ text: BTN_ADMIN }, { text: BTN_CHECK }]);
  return { keyboard: rows, resize_keyboard: true };
};

const inlineOpenDrive = () => ({
  inline_keyboard: [[{ text: "–í—ñ–¥–∫—Ä–∏—Ç–∏ –î–∏—Å–∫", url: "https://drive.google.com/drive/my-drive" }]],
});

const ADMIN = (env, userId) => String(userId) === String(env.TELEGRAM_ADMIN_ID);

// ‚îÄ‚îÄ Multilang (uk/ru/de/en/fr) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const SUP_LANGS = ["uk", "ru", "de", "en", "fr"];
const LANG_KEY = (uid) => `lang:${uid}`;

const TR = {
  hello: {
    uk: "–ü—Ä–∏–≤—ñ—Ç! –Ø Senti ü§ñ –ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏.",
    ru: "–ü—Ä–∏–≤–µ—Ç! –Ø Senti ü§ñ –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å.",
    de: "Hi! Ich bin Senti ü§ñ ‚Äî bereit zu helfen.",
    en: "Hey! I‚Äôm Senti ü§ñ‚Äîready to help.",
    fr: "Salut ! Je suis Senti ü§ñ, pr√™t √† aider."
  },
  ai_usage: {
    uk: "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /ai. –ù–∞–ø—Ä.:\n/ai –°–∫—ñ–ª—å–∫–∏ –±—É–¥–µ 2+2?",
    ru: "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ai. –ù–∞–ø—Ä–∏–º–µ—Ä:\n/ai –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2?",
    de: "‚úçÔ∏è Schreib deine Frage nach /ai. Z. B.:\n/ai Wieviel ist 2+2?",
    en: "‚úçÔ∏è Type your question after /ai. E.g.:\n/ai What‚Äôs 2+2?",
    fr: "‚úçÔ∏è √âcris ta question apr√®s /ai. Par ex. :\n/ai 2+2 = ?"
  },
  energy_not_enough: {
    uk: (need, links) =>
      `üîã –ù–µ –≤–∏—Å—Ç–∞—á–∞—î –µ–Ω–µ—Ä–≥—ñ—ó (–ø–æ—Ç—Ä—ñ–±–Ω–æ ${need}). –í–æ–Ω–∞ –≤—ñ–¥–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.\n–ö–µ—Ä—É–≤–∞–Ω–Ω—è:\n‚Ä¢ Energy: ${links.energy}\n‚Ä¢ Checklist: ${links.checklist}`,
    ru: (need, links) =>
      `üîã –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ (–Ω—É–∂–Ω–æ ${need}). –û–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n‚Ä¢ Energy: ${links.energy}\n‚Ä¢ Checklist: ${links.checklist}`,
    de: (need, links) =>
      `üîã Nicht genug Energie (ben√∂tigt ${need}). Sie l√§dt sich automatisch auf.\nVerwalten:\n‚Ä¢ Energy: ${links.energy}\n‚Ä¢ Checklist: ${links.checklist}`,
    en: (need, links) =>
      `üîã Not enough energy (need ${need}). It refills automatically.\nManage:\n‚Ä¢ Energy: ${links.energy}\n‚Ä¢ Checklist: ${links.checklist}`,
    fr: (need, links) =>
      `üîã Pas assez d‚Äô√©nergie (il faut ${need}). Elle se recharge automatiquement.\nG√©rer :\n‚Ä¢ Energy : ${links.energy}\n‚Ä¢ Checklist : ${links.checklist}`
  },
  energy_low_hint: {
    uk: (cur, link) => `‚ö†Ô∏è –ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –µ–Ω–µ—Ä–≥—ñ—ó (${cur}). –í—ñ–¥–Ω–æ–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ. –ö–µ—Ä—É–≤–∞–Ω–Ω—è: ${link}`,
    ru: (cur, link) => `‚ö†Ô∏è –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ (${cur}). –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${link}`,
    de: (cur, link) => `‚ö†Ô∏è Niedriger Energiewert (${cur}). L√§dt sich automatisch auf. Verwalten: ${link}`,
    en: (cur, link) => `‚ö†Ô∏è Low energy (${cur}). It will refill automatically. Manage: ${link}`,
    fr: (cur, link) => `‚ö†Ô∏è √ânergie faible (${cur}). Recharge automatique. G√©rer : ${link}`
  },
  drive_auth: {
    uk: (url) => `–©–æ–± –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —É —Å–≤—ñ–π Google Drive ‚Äî –¥–æ–∑–≤–æ–ª—å –¥–æ—Å—Ç—É–ø:\n${url}\n\n–ü–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω–∏ ¬´${BTN_DRIVE}¬ª —â–µ —Ä–∞–∑.`,
    ru: (url) => `–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ —Å–≤–æ–π Google Drive ‚Äî –¥–∞–π –¥–æ—Å—Ç—É–ø:\n${url}\n\n–ü–æ—Ç–æ–º –Ω–∞–∂–º–∏ ¬´${BTN_DRIVE}¬ª –µ—â—ë —Ä–∞–∑.`,
    de: (url) => `Zum Speichern auf deinem Google Drive: bitte Zugriff erlauben:\n${url}\n\nDann dr√ºcke nochmal ¬´${BTN_DRIVE}¬ª.`,
    en: (url) => `To save to your Google Drive, grant access first:\n${url}\n\nThen tap ‚Äú${BTN_DRIVE}‚Äù again.`,
    fr: (url) => `Pour enregistrer sur ton Google Drive, accorde d‚Äôabord l‚Äôacc√®s :\n${url}\n\nPuis appuie encore sur ¬´ ${BTN_DRIVE} ¬ª.`
  },
  drive_on: {
    uk: "üìÅ –†–µ–∂–∏–º –¥–∏—Å–∫–∞: ON. –ù–∞–¥—Å–∏–ª–∞–π —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∏ ‚Äî –∑–±–µ—Ä–µ–∂—É –Ω–∞ —Ç–≤—ñ–π Google Drive.",
    ru: "üìÅ –†–µ–∂–∏–º –¥–∏—Å–∫–∞: ON. –ü—Ä–∏—Å—ã–ª–∞–π —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫–∏ ‚Äî —Å–æ—Ö—Ä–∞–Ω—é –≤ —Ç–≤–æ–π Google Drive.",
    de: "üìÅ Drive-Modus: AN. Schick Fotos/Videos/Dokumente ‚Äî ich speichere sie in deinem Drive.",
    en: "üìÅ Drive mode: ON. Send photos/videos/docs ‚Äî I‚Äôll save them to your Drive.",
    fr: "üìÅ Mode Drive : activ√©. Envoie photos/vid√©os/docs ‚Äî je les mets sur ton Drive."
  },
  drive_off: {
    uk: "–†–µ–∂–∏–º –¥–∏—Å–∫–∞ –≤–∏–º–∫–Ω–µ–Ω–æ. –¶–µ –∑–≤–∏—á–∞–π–Ω–∏–π —á–∞—Ç Senti.",
    ru: "–†–µ–∂–∏–º –¥–∏—Å–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω. –≠—Ç–æ –æ–±—ã—á–Ω—ã–π —á–∞—Ç Senti.",
    de: "Drive-Modus aus. Das ist wieder der normale Senti-Chat.",
    en: "Drive mode is off. Back to normal chat.",
    fr: "Mode Drive d√©sactiv√©. Retour au chat habituel."
  },
  saved_to_drive: {
    uk: (name) => `‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ —Ç–≤–æ—î–º—É –¥–∏—Å–∫—É: ${name}`,
    ru: (name) => `‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ —Ç–≤–æ—ë–º –¥–∏—Å–∫–µ: ${name}`,
    de: (name) => `‚úÖ Auf deinem Drive gespeichert: ${name}`,
    en: (name) => `‚úÖ Saved to your Drive: ${name}`,
    fr: (name) => `‚úÖ Enregistr√© sur ton Drive : ${name}`
  },
  checklist_link: {
    uk: (link) => `üìã –ß–µ–∫–ª–∏—Å—Ç (HTML):\n${link}`,
    ru: (link) => `üìã –ß–µ–∫–ª–∏—Å—Ç (HTML):\n${link}`,
    de: (link) => `üìã Checkliste (HTML):\n${link}`,
    en: (link) => `üìã Checklist (HTML):\n${link}`,
    fr: (link) => `üìã Checklist (HTML) :\n${link}`
  },
  admin_menu: {
    uk: (cl, repo, hook) => `üõ† –ê–¥–º—ñ–Ω-–º–µ–Ω—é\n\n‚Ä¢ –ß–µ–∫–ª–∏—Å—Ç: ${cl}\n‚Ä¢ Repo: ${repo}\n‚Ä¢ –í–µ–±—Ö—É–∫ GET: ${hook}`,
    ru: (cl, repo, hook) => `üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é\n\n‚Ä¢ –ß–µ–∫–ª–∏—Å—Ç: ${cl}\n‚Ä¢ Repo: ${repo}\n‚Ä¢ –í–µ–±—Ö—É–∫ GET: ${hook}`,
    de: (cl, repo, hook) => `üõ† Admin-Men√º\n\n‚Ä¢ Checkliste: ${cl}\n‚Ä¢ Repo: ${repo}\n‚Ä¢ Webhook GET: ${hook}`,
    en: (cl, repo, hook) => `üõ† Admin menu\n\n‚Ä¢ Checklist: ${cl}\n‚Ä¢ Repo: ${repo}\n‚Ä¢ Webhook GET: ${hook}`,
    fr: (cl, repo, hook) => `üõ† Menu admin\n\n‚Ä¢ Checklist : ${cl}\n‚Ä¢ Repo : ${repo}\n‚Ä¢ Webhook GET : ${hook}`
  },
  generic_error: {
    uk: (e) => `‚ùå –ü–æ–º–∏–ª–∫–∞: ${e}`,
    ru: (e) => `‚ùå –û—à–∏–±–∫–∞: ${e}`,
    de: (e) => `‚ùå Fehler: ${e}`,
    en: (e) => `‚ùå Error: ${e}`,
    fr: (e) => `‚ùå Erreur : ${e}`
  }
};

function normTgLang(code = "") {
  const c = String(code || "").toLowerCase();
  if (c.startsWith("uk")) return "uk";
  if (c.startsWith("ru")) return "ru";
  if (c.startsWith("de")) return "de";
  if (c.startsWith("fr")) return "fr";
  return "en";
}

function detectLangFromText(s = "", fallback = "en") {
  const t = String(s).toLowerCase();

  // quick heuristics by characters
  if (/[—ó—î“ë—ñ]/i.test(t)) return "uk";
  if (/[—ë—ã—ç—ä]/i.test(t)) return "ru";
  if (/[√§√∂√º√ü]/i.test(t)) return "de";
  if (/[√†√¢√ß√©√®√™√´√Æ√Ø√¥√ª√π√º√ø≈ì√¶]/i.test(t)) return "fr";

  // stopwords vote
  const votes = { uk: 0, ru: 0, de: 0, en: 0, fr: 0 };
  const bump = (lang, count = 1) => (votes[lang] += count);

  if (/\b(—ñ|—Ç–∞|—â–æ|—Ü–µ|—Ç–∞–∫)\b/.test(t)) bump("uk", 2);
  if (/\b(–∏|—á—Ç–æ|—ç—Ç–æ|—Ç–∞–∫|–Ω—É)\b/.test(t)) bump("ru", 2);
  if (/\b(der|die|und|ist|nicht|ich)\b/.test(t)) bump("de", 2);
  if (/\b(the|and|is|you|i|not)\b/.test(t)) bump("en", 2);
  if (/\b(le|la|et|est|pas|je|tu)\b/.test(t)) bump("fr", 2);

  let best = fallback, max = -1;
  for (const k of SUP_LANGS) { if (votes[k] > max) { max = votes[k]; best = k; } }
  return best;
}

async function getUserLang(env, userId, tgCode, lastText = "") {
  const kv = ensureState(env);
  const key = LANG_KEY(userId);
  const saved = await kv.get(key);
  let lang = saved || normTgLang(tgCode);

  // if user actually writes in another language ‚Äî switch
  if (lastText && lastText.length >= 3) {
    const detected = detectLangFromText(lastText, lang);
    if (SUP_LANGS.includes(detected) && detected !== lang) {
      lang = detected;
      await kv.put(key, lang, { expirationTtl: 60 * 60 * 24 * 90 }); // 90d
    }
  }
  return SUP_LANGS.includes(lang) ? lang : "en";
}
const tr = (lang, key, ...args) => {
  const v = TR[key]?.[lang] ?? TR[key]?.en;
  return typeof v === "function" ? v(...args) : v;
};

// ‚îÄ‚îÄ STATE_KV: —Ä–µ–∂–∏–º –¥–∏—Å–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const DRIVE_MODE_KEY = (uid) => `drive_mode:${uid}`;
function ensureState(env) {
  if (!env.STATE_KV) throw new Error("STATE_KV binding missing");
  return env.STATE_KV;
}
async function setDriveMode(env, userId, on) {
  await ensureState(env).put(DRIVE_MODE_KEY(userId), on ? "1" : "0", { expirationTtl: 3600 });
}
async function getDriveMode(env, userId) {
  return (await ensureState(env).get(DRIVE_MODE_KEY(userId))) === "1";
}

// ‚îÄ‚îÄ Energy subsystem ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const ENERGY_KEY = (uid) => `energy:${uid}`;
function energyCfg(env) {
  return {
    max: Number(env.ENERGY_MAX ?? 100),
    recoverPerMin: Number(env.ENERGY_RECOVER_PER_MIN ?? 1),
    costText: Number(env.ENERGY_COST_TEXT ?? 1),
    costImage: Number(env.ENERGY_COST_IMAGE ?? 5),
    low: Number(env.ENERGY_LOW_THRESHOLD ?? 10),
  };
}
async function getEnergy(env, userId) {
  const cfg = energyCfg(env);
  const raw = await ensureState(env).get(ENERGY_KEY(userId));
  const now = Math.floor(Date.now() / 1000);
  if (!raw) {
    const obj = { v: cfg.max, t: now };
    await ensureState(env).put(ENERGY_KEY(userId), JSON.stringify(obj));
    return obj.v;
  }
  let obj;
  try { obj = JSON.parse(raw); } catch { obj = { v: cfg.max, t: now }; }
  const minutes = Math.floor((now - (obj.t || now)) / 60);
  if (minutes > 0 && obj.v < cfg.max) {
    obj.v = Math.min(cfg.max, obj.v + minutes * cfg.recoverPerMin);
    obj.t = now;
    await ensureState(env).put(ENERGY_KEY(userId), JSON.stringify(obj));
  }
  return obj.v;
}
async function setEnergy(env, userId, v) {
  const now = Math.floor(Date.now() / 1000);
  await ensureState(env).put(ENERGY_KEY(userId), JSON.stringify({ v, t: now }));
  return v;
}
async function spendEnergy(env, userId, cost) {
  const cfg = energyCfg(env);
  const cur = await getEnergy(env, userId);
  if (cur < cost) return { ok: false, cur, need: cost, cfg };
  const left = Math.max(0, cur - cost);
  await setEnergy(env, userId, left);
  return { ok: true, cur: left, cfg };
}
function energyLinks(env, userId) {
  const s = env.WEBHOOK_SECRET || "";
  const qs = `s=${encodeURIComponent(s)}&u=${encodeURIComponent(String(userId || ""))}`;
  return {
    energy: abs(env, `/admin/energy/html?${qs}`),
    checklist: abs(env, `/admin/checklist/html?${qs}`),
  };
}

// ‚îÄ‚îÄ Dialog Memory (DIALOG_KV) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const DIALOG_KEY = (uid) => `dlg:${uid}`;
const DLG_CFG = { maxTurns: 12, maxBytes: 8_000, ttlSec: 14 * 24 * 3600 };
function ensureDialog(env) { return env.DIALOG_KV || null; }
async function readDialog(env, userId) {
  const kv = ensureDialog(env); if (!kv) return [];
  try { const raw = await kv.get(DIALOG_KEY(userId)); if (!raw) return []; const arr = JSON.parse(raw); return Array.isArray(arr) ? arr : []; }
  catch { return []; }
}
function trimDialog(arr) {
  let out = Array.isArray(arr) ? arr.slice(-DLG_CFG.maxTurns) : [];
  let s = new TextEncoder().encode(JSON.stringify(out)).length;
  while (out.length > 4 && s > DLG_CFG.maxBytes) { out = out.slice(2); s = new TextEncoder().encode(JSON.stringify(out)).length; }
  return out;
}
async function writeDialog(env, userId, arr) {
  const kv = ensureDialog(env); if (!kv) return false;
  const val = JSON.stringify(trimDialog(arr));
  try { await kv.put(DIALOG_KEY(userId), val, { expirationTtl: DLG_CFG.ttlSec }); return true; } catch { return false; }
}
async function pushDialog(env, userId, role, content) {
  const now = Date.now();
  const arr = await readDialog(env, userId);
  arr.push({ r: role, c: String(content || "").slice(0, 1500), t: now });
  return await writeDialog(env, userId, arr);
}
async function buildDialogHint(env, userId) {
  const turns = await readDialog(env, userId);
  if (!turns.length) return "";
  const lines = ["[Context: previous dialog (last messages)]"];
  for (const it of turns.slice(-DLG_CFG.maxTurns)) {
    const who = it.r === "user" ? "User" : "Senti";
    lines.push(`${who}: ${it.c}`);
  }
  return lines.join("\n");
}

// ‚îÄ‚îÄ Self-Tune ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async function loadSelfTune(env, chatId) {
  try {
    if (!env.STATE_KV) return null;
    const key = `insight:latest:${chatId}`;
    const raw = await env.STATE_KV.get(key);
    if (!raw) return null;
    const obj = JSON.parse(raw);
    const rules = Array.isArray(obj?.analysis?.rules) ? obj.analysis.rules : [];
    const tone  = obj?.analysis?.tone ? String(obj.analysis.tone).trim() : "";
    if (!rules.length && !tone) return null;

    const lines = [];
    if (tone) lines.push(`‚Ä¢ User tone: ${tone}.`);
    if (rules.length) {
      lines.push("‚Ä¢ Follow these rules:");
      for (const r of rules.slice(0, 5)) lines.push(`  - ${String(r).trim()}`);
    }
    const text = lines.join("\n");
    return text ? `\n\n[Self-Tune]\n${text}\n` : null;
  } catch {
    return null;
  }
}

// ‚îÄ‚îÄ System hint (Statut + Self-Tune + Dialog + Language & Casual style) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function langName(l) {
  return { uk: "Ukrainian", ru: "Russian", de: "German", en: "English (US)", fr: "French" }[l] || "English (US)";
}
async function buildSystemHint(env, chatId, userId, lang, extra = "") {
  const statut = await readStatut(env).catch(() => "");
  const selfTune = chatId ? await loadSelfTune(env, chatId) : null;
  const dialogCtx = userId ? await buildDialogHint(env, userId) : "";

  const style =
    `Always reply in ${langName(lang)}.\n` +
    "Use a casual, friendly conversational tone (not formal), short sentences, and be concise.\n" +
    "Use emojis sparingly (only when it feels natural).";

  const base =
    (statut ? `${statut.trim()}\n\n` : "") +
    "You are Senti, a Telegram assistant. If user asks to save a file ‚Äî remind about Google Drive and Checklist/Repo.";

  const parts = [base, style, selfTune || "", dialogCtx || "", extra || ""].filter(Boolean);
  return parts.join("\n\n");
}

// ‚îÄ‚îÄ –º–µ–¥—ñ–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function pickPhoto(msg) {
  const a = msg.photo;
  if (!Array.isArray(a) || !a.length) return null;
  const ph = a[a.length - 1];
  return { type: "photo", file_id: ph.file_id, name: `photo_${ph.file_unique_id}.jpg` };
}
function detectAttachment(msg) {
  if (!msg) return null;
  if (msg.document) {
    const d = msg.document;
    return { type: "document", file_id: d.file_id, name: d.file_name || `doc_${d.file_unique_id}` };
  }
  if (msg.video) {
    const v = msg.video;
    return { type: "video", file_id: v.file_id, name: v.file_name || `video_${v.file_unique_id}.mp4` };
  }
  if (msg.audio) {
    const a = msg.audio;
    return { type: "audio", file_id: a.file_id, name: a.file_name || `audio_${a.file_unique_id}.mp3` };
  }
  if (msg.voice) {
    const v = msg.voice;
    return { type: "voice", file_id: v.file_id, name: `voice_${v.file_unique_id}.ogg` };
  }
  if (msg.video_note) {
    const v = msg.video_note;
    return { type: "video_note", file_id: v.file_id, name: `videonote_${v.file_unique_id}.mp4` };
  }
  return pickPhoto(msg);
}
async function tgFileUrl(env, file_id) {
  const r = await fetch(`https://api.telegram.org/bot${env.BOT_TOKEN}/getFile`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({ file_id }),
  });
  const d = await r.json().catch(() => ({}));
  const path = d?.result?.file_path;
  if (!path) throw new Error("getFile: file_path missing");
  return `https://api.telegram.org/file/bot${env.BOT_TOKEN}/${path}`;
}
async function handleIncomingMedia(env, chatId, userId, msg, lang) {
  const att = detectAttachment(msg);
  if (!att) return false;

  const { costImage } = energyCfg(env);
  const spend = await spendEnergy(env, userId, costImage);
  if (!spend.ok) {
    const links = energyLinks(env, userId);
    await sendMessage(env, chatId, tr(lang, "energy_not_enough", costImage, links));
    return true;
  }

  const ut = await getUserTokens(env, userId);
  if (!ut?.refresh_token) {
    const authUrl = abs(env, `/auth/start?u=${userId}`);
    await sendMessage(env, chatId, tr(lang, "drive_auth", authUrl));
    return true;
  }
  const url = await tgFileUrl(env, att.file_id);
  const saved = await driveSaveFromUrl(env, userId, url, att.name);
  await sendMessage(env, chatId, tr(lang, "saved_to_drive", saved?.name || att.name));
  return true;
}

// ‚îÄ‚îÄ –≥–æ–ª–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
export async function handleTelegramWebhook(req, env) {
  if (req.method === "POST") {
    const sec = req.headers.get("x-telegram-bot-api-secret-token");
    if (env.TG_WEBHOOK_SECRET && sec !== env.TG_WEBHOOK_SECRET) {
      return json({ ok: false, error: "unauthorized" }, { status: 401 });
    }
  } else {
    return json({ ok: true, note: "webhook alive (GET)" });
  }

  let update;
  try { update = await req.json(); } catch { return json({ ok: false }, { status: 400 }); }

  const msg =
    update.message ||
    update.edited_message ||
    update.channel_post ||
    update.callback_query?.message;

  const textRaw =
    update.message?.text || update.edited_message?.text || update.callback_query?.data || "";
  const text = (textRaw || "").trim();
  if (!msg) return json({ ok: true });

  const chatId = msg.chat?.id;
  const userId = msg.from?.id;
  const isAdmin = ADMIN(env, userId);

  // resolve language (from KV -> TG -> detect by text), update if user speaks another
  const lang = await getUserLang(env, userId, msg.from?.language_code, text);

  const safe = async (fn) => {
    try { await fn(); } catch (e) { await sendMessage(env, chatId, tr(lang, "generic_error", String(e))); }
  };

  // /start
  if (text === "/start") {
    await safe(async () => {
      await setDriveMode(env, userId, false);
      await sendMessage(env, chatId, tr(lang, "hello"), { reply_markup: mainKeyboard(isAdmin) });
    });
    return json({ ok: true });
  }

  // /diag ‚Äî only admin (left in Ukrainian for you)
  if (text === "/diag" && isAdmin) {
    await safe(async () => {
      const hasGemini   = !!(env.GEMINI_API_KEY || env.GOOGLE_API_KEY);
      const hasCF       = !!(env.CF_ACCOUNT_ID && env.CLOUDFLARE_API_TOKEN);
      const hasOR       = !!env.OPENROUTER_API_KEY;
      const hasFreeBase = !!env.FREE_API_BASE_URL;
      const hasFreeKey  = !!env.FREE_API_KEY;
      const mo = String(env.MODEL_ORDER || "").trim();

      const lines = [
        "üß™ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ AI",
        `MODEL_ORDER: ${mo || "(–ø–æ—Ä–æ–∂–Ω—å–æ)"}`,
        `GEMINI key: ${hasGemini ? "‚úÖ" : "‚ùå"}`,
        `Cloudflare (CF_ACCOUNT_ID + CLOUDFLARE_API_TOKEN): ${hasCF ? "‚úÖ" : "‚ùå"}`,
        `OpenRouter key: ${hasOR ? "‚úÖ" : "‚ùå"}`,
        `FreeLLM (BASE_URL + KEY): ${hasFreeBase && hasFreeKey ? "‚úÖ" : "‚ùå"}`,
      ];

      const entries = mo ? mo.split(",").map(s => s.trim()).filter(Boolean) : [];
      if (entries.length) {
        const health = await getAiHealthSummary(env, entries);
        lines.push("\n‚Äî Health:");
        for (const h of health) {
          const light = h.cool ? "üü•" : (h.slow ? "üü®" : "üü©");
          const ms = h.ewmaMs ? `${Math.round(h.ewmaMs)}ms` : "n/a";
          lines.push(`${light} ${h.provider}:${h.model} ‚Äî ewma ${ms}, fails ${h.failStreak || 0}`);
        }
      }
      await sendMessage(env, chatId, lines.join("\n"));
    });
    return json({ ok: true });
  }

  // /ai
  const aiArg = parseAiCommand(textRaw);
  if (aiArg !== null) {
    await safe(async () => {
      const q = aiArg || "";
      if (!q) {
        await sendMessage(env, chatId, tr(lang, "ai_usage"));
        return;
      }

      const { costText, low } = energyCfg(env);
      const spent = await spendEnergy(env, userId, costText);
      if (!spent.ok) {
        const links = energyLinks(env, userId);
        await sendMessage(env, chatId, tr(lang, "energy_not_enough", costText, links));
        return;
      }

      const systemHint = await buildSystemHint(env, chatId, userId, lang);
      const modelOrder = String(env.MODEL_ORDER || "").trim();
      let reply = "";
      try {
        if (modelOrder) {
          const merged = `${systemHint}\n\nUser: ${q}`;
          reply = await askAnyModel(env, merged, { temperature: 0.6, max_tokens: 800 });
        } else {
          reply = await think(env, q, systemHint);
        }
      } catch (e) {
        reply = `üß† AI error: ${String(e?.message || e)}`;
      }

      if (isBlank(reply)) reply = defaultAiReply();

      await pushDialog(env, userId, "user", q);
      await pushDialog(env, userId, "assistant", reply);

      if (spent.cur <= low) {
        const links = energyLinks(env, userId);
        reply += `\n\n${tr(lang, "energy_low_hint", spent.cur, links.energy)}`;
      }
      await sendMessage(env, chatId, reply);
    });
    return json({ ok: true });
  }

  // Google Drive
  if (text === BTN_DRIVE) {
    await safe(async () => {
      const ut = await getUserTokens(env, userId);
      if (!ut?.refresh_token) {
        const authUrl = abs(env, `/auth/start?u=${userId}`);
        await sendMessage(env, chatId, tr(lang, "drive_auth", authUrl));
        return;
      }
      await setDriveMode(env, userId, true);
      await sendMessage(env, chatId, tr(lang, "drive_on"), { reply_markup: mainKeyboard(isAdmin) });
      await sendMessage(env, chatId, "Open your Drive:", { reply_markup: inlineOpenDrive() });
    });
    return json({ ok: true });
  }

  // Senti (drive off)
  if (text === BTN_SENTI) {
    await safe(async () => {
      await setDriveMode(env, userId, false);
      await sendMessage(env, chatId, tr(lang, "drive_off"), { reply_markup: mainKeyboard(isAdmin) });
    });
    return json({ ok: true });
  }

  // Admin links
  if (text === BTN_CHECK && isAdmin) {
    await safe(async () => {
      const link = abs(env, `/admin/checklist/html?s=${encodeURIComponent(env.WEBHOOK_SECRET || "")}`);
      await sendMessage(env, chatId, tr(lang, "checklist_link", link));
    });
    return json({ ok: true });
  }
  if ((text === "Admin" || text === "/admin") && isAdmin) {
    await safe(async () => {
      const cl = abs(env, `/admin/checklist/html?s=${encodeURIComponent(env.WEBHOOK_SECRET || "")}`);
      const repo = abs(env, `/admin/repo/html?s=${encodeURIComponent(env.WEBHOOK_SECRET || "")}`);
      await sendMessage(env, chatId, tr(lang, "admin_menu", cl, repo, abs(env, "/webhook")));
    });
    return json({ ok: true });
  }

  // Drive mode media
  try {
    if (await getDriveMode(env, userId)) {
      if (await handleIncomingMedia(env, chatId, userId, msg, lang)) return json({ ok: true });
    }
  } catch (e) {
    await sendMessage(env, chatId, tr(lang, "generic_error", String(e)));
    return json({ ok: true });
  }

  // Regular text -> AI (with language + casual style)
  if (text && !text.startsWith("/")) {
    try {
      const { costText, low } = energyCfg(env);
      const spent = await spendEnergy(env, userId, costText);
      if (!spent.ok) {
        const links = energyLinks(env, userId);
        await sendMessage(env, chatId, tr(lang, "energy_not_enough", costText, links));
        return json({ ok: true });
      }

      const systemHint = await buildSystemHint(env, chatId, userId, lang);
      const modelOrder = String(env.MODEL_ORDER || "").trim();
      let out = "";

      if (modelOrder) {
        const merged = `${systemHint}\n\nUser: ${text}`;
        out = await askAnyModel(env, merged, { temperature: 0.6, max_tokens: 800 });
      } else {
        out = await think(env, text, systemHint);
      }

      if (isBlank(out)) out = defaultAiReply();

      await pushDialog(env, userId, "user", text);
      await pushDialog(env, userId, "assistant", out);

      if (spent.cur <= low) {
        const links = energyLinks(env, userId);
        out += `\n\n${tr(lang, "energy_low_hint", spent.cur, links.energy)}`;
      }
      await sendMessage(env, chatId, out);
      return json({ ok: true });
    } catch (e) {
      await sendMessage(env, chatId, defaultAiReply());
      return json({ ok: true });
    }
  }

  // default
  await sendMessage(env, chatId, tr(lang, "hello"), { reply_markup: mainKeyboard(isAdmin) });
  return json({ ok: true });
}