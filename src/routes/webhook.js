// src/routes/webhook.js
// Telegram webhook: —Ç–æ–Ω–∫–∏–π –∫–ª–µ–π –Ω–∞–¥ –º–æ–¥—É–ª—è–º–∏ (i18n / tone / energy / brain / statut).
// –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞: Drive, Senti, (Admin ‚Äî –ª–∏—à–µ –∞–¥–º—ñ–Ω—É). Checklist –≤–∏–Ω–µ—Å–µ–Ω–æ –≤ Admin-–º–µ–Ω—é.

import { driveSaveFromUrl } from "../lib/drive.js";
import { getUserTokens } from "../lib/userDrive.js";
import { abs } from "../utils/url.js";
import { think } from "../lib/brain.js";
import { readStatut } from "../lib/kvChecklist.js";
import { askAnyModel, getAiHealthSummary } from "../lib/modelRouter.js";

// tone
import { getTone, setTone, toneHint } from "../lib/tone.js";
// i18n
import { getUserLang, tr } from "../lib/i18n.js";
// energy
import { getEnergy, spendEnergy } from "../lib/energy.js";
// intent NLU + router
import { detectIntent } from "../lib/nlu.js";
import { runIntent } from "../lib/intentRouter.js";

// --- –ø—Ä—è–º—ñ —ñ–º–ø–æ—Ä—Ç–∏ API-–º–æ–¥—É–ª—ñ–≤ –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤ (—à–ª—è—Ö–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ) ---
import { weatherByCity, formatWeather } from "../lib/apis/weather.js";
import { getUsdUahRate } from "../lib/apis/rates.js";
import { fetchTopNews, formatNewsList } from "../lib/apis/news.js";
import { getHolidays } from "../lib/apis/holidays.js";
import { wikiSummary, formatWiki } from "../lib/apis/wiki.js";

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const json = (data, init = {}) =>
  new Response(JSON.stringify(data, null, 2), {
    headers: { "content-type": "application/json; charset=utf-8" },
    ...init,
  });

// –ê–≤—Ç–æ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —á–∏ —î –≤ —Ç–µ–∫—Å—Ç—ñ Markdown-–ª—ñ–Ω–∫–∏ [title](https://...)
const hasMdLinks = (s = "") => /\[[^\]]+\]\(https?:\/\/[^)]+\)/.test(String(s));
// –ü—Ä–æ—Å—Ç–∞ –µ–≤—Ä–∏—Å—Ç–∏–∫–∞: —á–∏ —î HTML-—Ç–µ–≥–∏ (—â–æ–±–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ parse_mode: HTML)
const looksLikeHtml = (s = "") => /<\/?[a-z][\s>]/i.test(String(s));

async function sendMessage(env, chatId, text, extra = {}) {
  const payload = {
    chat_id: chatId,
    text,
    disable_web_page_preview: true,
    ...(looksLikeHtml(text) ? { parse_mode: "HTML" } : hasMdLinks(text) ? { parse_mode: "Markdown" } : {}),
    ...extra,
  };
  const r = await fetch(`https://api.telegram.org/bot${env.BOT_TOKEN}/sendMessage`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(payload),
  });
  await r.text().catch(() => {});
}

// –∑—Ä—É—á–Ω–∏–π –æ–±–≥–æ—Ä—Ç—á–∏–∫ –¥–ª—è HTML-—Ç–µ–∫—Å—Ç—ñ–≤
const sendHtml = (env, chatId, html, extra = {}) =>
  sendMessage(env, chatId, html, { parse_mode: "HTML", disable_web_page_preview: false, ...extra });

function parseAiCommand(text = "") {
  const s = String(text).trim();
  const m = s.match(/^\/ai(?:@[\w_]+)?(?:\s+([\s\S]+))?$/i);
  if (!m) return null;
  return (m[1] || "").trim();
}
const isBlank = (s) => !s || !String(s).trim();

const BTN_DRIVE = "üìÅ Drive";
const BTN_SENTI = "üß† Senti";
const BTN_ADMIN = "üîß Admin";

const mainKeyboard = (isAdmin = false) => {
  const rows = [[{ text: BTN_DRIVE }, { text: BTN_SENTI }]];
  if (isAdmin) rows.push([{ text: BTN_ADMIN }]); // –±–µ–∑ Checklist
  return { keyboard: rows, resize_keyboard: true };
};

// —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –Ω–∞ Drive
const inlineOpenDrive = () => ({
  inline_keyboard: [[{ text: "Google Drive", url: "https://drive.google.com/drive/my-drive" }]],
});

// –ª–æ–∫–∞–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—î—é
function energyLinks(env, userId) {
  const s = env.WEBHOOK_SECRET || "";
  const qs = `s=${encodeURIComponent(s)}&u=${encodeURIComponent(String(userId || ""))}`;
  return {
    energy: abs(env, `/admin/energy/html?${qs}`),
    checklist: abs(env, `/admin/checklist/html?${qs}`),
  };
}

const ADMIN = (env, userId) => String(userId) === String(env.TELEGRAM_ADMIN_ID);

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ STATE_KV: drive mode ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const DRIVE_MODE_KEY = (uid) => `drive_mode:${uid}`;
function ensureState(env) {
  if (!env.STATE_KV) throw new Error("STATE_KV binding missing");
  return env.STATE_KV;
}
async function setDriveMode(env, userId, on) {
  await ensureState(env).put(DRIVE_MODE_KEY(userId), on ? "1" : "0", { expirationTtl: 3600 });
}
async function getDriveMode(env, userId) {
  return (await ensureState(env).get(DRIVE_MODE_KEY(userId))) === "1";
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Dialog memory (–ª–µ–≥–∫–∏–π) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const DIALOG_KEY = (uid) => `dlg:${uid}`;
const DLG_CFG = { maxTurns: 12, maxBytes: 8_000, ttlSec: 14 * 24 * 3600 };
function ensureDialog(env) { return env.DIALOG_KV || null; }
async function readDialog(env, userId) {
  const kv = ensureDialog(env); if (!kv) return [];
  try { const raw = await kv.get(DIALOG_KEY(userId)); if (!raw) return []; const arr = JSON.parse(raw); return Array.isArray(arr) ? arr : []; }
  catch { return []; }
}
function trimDialog(arr) {
  let out = Array.isArray(arr) ? arr.slice(-DLG_CFG.maxTurns) : [];
  let s = new TextEncoder().encode(JSON.stringify(out)).length;
  while (out.length > 4 && s > DLG_CFG.maxBytes) { out = out.slice(2); s = new TextEncoder().encode(JSON.stringify(out)).length; }
  return out;
}
async function writeDialog(env, userId, arr) {
  const kv = ensureDialog(env); if (!kv) return false;
  const val = JSON.stringify(trimDialog(arr));
  try { await kv.put(DIALOG_KEY(userId), val, { expirationTtl: DLG_CFG.ttlSec }); return true; } catch { return false; }
}
async function pushDialog(env, userId, role, content) {
  const now = Date.now();
  const arr = await readDialog(env, userId);
  arr.push({ r: role, c: String(content || "").slice(0, 1500), t: now });
  return await writeDialog(env, userId, arr);
}
async function buildDialogHint(env, userId) {
  const turns = await readDialog(env, userId);
  if (!turns.length) return "";
  const lines = ["[Context: previous dialog (last messages)]"];
  for (const it of turns.slice(-DLG_CFG.maxTurns)) {
    const who = it.r === "user" ? "User" : "Senti";
    lines.push(`${who}: ${it.c}`);
  }
  return lines.join("\n");
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Self-Tune (–æ–ø—Ü—ñ–π–Ω–æ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async function loadSelfTune(env, chatId) {
  try {
    if (!env.STATE_KV) return null;
    const key = `insight:latest:${chatId}`;
    const raw = await env.STATE_KV.get(key);
    if (!raw) return null;
    const obj = JSON.parse(raw);
    const rules = Array.isArray(obj?.analysis?.rules) ? obj.analysis.rules : [];
    const tone  = obj?.analysis?.tone ? String(obj.analysis.tone).trim() : "";
    if (!rules.length && !tone) return null;

    const lines = [];
    if (tone) lines.push(`‚Ä¢ User tone: ${tone}.`);
    if (rules.length) {
      lines.push("‚Ä¢ Follow these rules:");
      for (const r of rules.slice(0, 5)) lines.push(`  - ${String(r).trim()}`);
    }
    const text = lines.join("\n");
    return text ? `\n\n[Self-Tune]\n${text}\n` : null;
  } catch {
    return null;
  }
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ System hint ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function langName(l) {
  return { uk: "Ukrainian", ru: "Russian", de: "German", en: "English (US)", fr: "French" }[l] || "English (US)";
}
async function buildSystemHint(env, chatId, userId, lang, extra = "") {
  const statut = await readStatut(env).catch(() => "");
  const selfTune = chatId ? await loadSelfTune(env, chatId) : null;
  const dialogCtx = userId ? await buildDialogHint(env, userId) : "";
  const tone = await toneHint(env, chatId, lang);

  const style =
    `Always reply in ${langName(lang)}.\n` +
    "Prefer a conversational, friendly tone (not formal). Short, clear sentences. Emojis only when natural.";

  const base =
    (statut ? `${statut.trim()}\n\n` : "") +
    "You are Senti, a Telegram assistant. If user asks to save a file ‚Äî remind about Google Drive and Checklist/Repo.";

  const parts = [base, style, tone, selfTune || "", dialogCtx || "", extra || ""].filter(Boolean);
  return parts.join("\n\n");
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Media helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function pickPhoto(msg) {
  const a = msg.photo;
  if (!Array.isArray(a) || !a.length) return null;
  const ph = a[a.length - 1];
  return { type: "photo", file_id: ph.file_id, name: `photo_${ph.file_unique_id}.jpg` };
}
function detectAttachment(msg) {
  if (!msg) return null;
  if (msg.document)  { const d = msg.document;  return { type: "document",  file_id: d.file_id, name: d.file_name || `doc_${d.file_unique_id}` }; }
  if (msg.video)     { const v = msg.video;     return { type: "video",     file_id: v.file_id, name: v.file_name || `video_${v.file_unique_id}.mp4` }; }
  if (msg.audio)     { const a = msg.audio;     return { type: "audio",     file_id: a.file_id, name: a.file_name || `audio_${a.file_unique_id}.mp3` }; }
  if (msg.voice)     { const v = msg.voice;     return { type: "voice",     file_id: v.file_id, name: `voice_${v.file_unique_id}.ogg` }; }
  if (msg.video_note){ const v = msg.video_note;return { type: "video_note", file_id: v.file_id, name: `videonote_${v.file_unique_id}.mp4` }; }
  return pickPhoto(msg);
}
async function tgFileUrl(env, file_id) {
  const r = await fetch(`https://api.telegram.org/bot${env.BOT_TOKEN}/getFile`, {
    method: "POST", headers: { "content-type": "application/json" },
    body: JSON.stringify({ file_id }),
  });
  const d = await r.json().catch(() => ({}));
  const path = d?.result?.file_path;
  if (!path) throw new Error("getFile: file_path missing");
  return `https://api.telegram.org/file/bot${env.BOT_TOKEN}/${path}`;
}
async function handleIncomingMedia(env, chatId, userId, msg, lang) {
  const att = detectAttachment(msg);
  if (!att) return false;

  // –¥—ñ—Å—Ç–∞–ª–∏ –∫–æ–Ω—Ñ—ñ–≥ —ñ –ø–æ—Ç–æ—á–Ω—É –µ–Ω–µ—Ä–≥—ñ—é –æ–¥–Ω–∏–º –≤–∏–∫–ª–∏–∫–æ–º
  const info = await getEnergy(env, userId);
  const { costImage } = info;
  if (info.energy < costImage) {
    const links = energyLinks(env, userId);
    await sendMessage(env, chatId, tr(lang, "energy_not_enough", costImage, links));
    return true;
  }
  await spendEnergy(env, userId, costImage, "media");

  const ut = await getUserTokens(env, userId);
  if (!ut?.refresh_token) {
    const authUrl = abs(env, `/auth/start?u=${userId}`);
    await sendMessage(env, chatId, tr(lang, "drive_auth", authUrl));
    return true;
  }
  const url = await tgFileUrl(env, att.file_id);
  const saved = await driveSaveFromUrl(env, userId, url, att.name);
  await sendMessage(env, chatId, tr(lang, "saved_to_drive", saved?.name || att.name));
  return true;
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main handler ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
export async function handleTelegramWebhook(req, env) {
  // webhook auth
  if (req.method === "POST") {
    const sec = req.headers.get("x-telegram-bot-api-secret-token");
    if (env.TG_WEBHOOK_SECRET && sec !== env.TG_WEBHOOK_SECRET) {
      return json({ ok: false, error: "unauthorized" }, { status: 401 });
    }
  } else {
    return json({ ok: true, note: "webhook alive (GET)" });
  }

  let update;
  try { update = await req.json(); } catch { return json({ ok: false }, { status: 400 }); }

  const msg =
    update.message ||
    update.edited_message ||
    update.channel_post ||
    update.callback_query?.message;

  const textRaw =
    update.message?.text || update.edited_message?.text || update.callback_query?.data || "";
  const text = (textRaw || "").trim();
  if (!msg) return json({ ok: true });

  const chatId = msg.chat?.id;
  const userId = msg.from?.id;
  const isAdmin = ADMIN(env, userId);

  // –º–æ–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const lang = await getUserLang(env, userId, msg.from?.language_code, text);

  const safe = async (fn) => {
    try { await fn(); } catch (e) { await sendMessage(env, chatId, tr(lang, "generic_error", String(e))); }
  };

  // /start ‚Äî —Ç—ñ–ª—å–∫–∏ –¥—Ä—É–∂–Ω—î –≤—ñ—Ç–∞–Ω–Ω—è + –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
  if (text === "/start") {
    await safe(async () => {
      await setDriveMode(env, userId, false);
      await sendMessage(env, chatId, tr(lang, "hello"), { reply_markup: mainKeyboard(isAdmin) });
    });
    return json({ ok: true });
  }

  // /tone
  if (text.startsWith("/tone")) {
    await safe(async () => {
      const arg = text.replace(/^\/tone(?:@[\w_]+)?/i, "").trim();
      if (!arg) {
        const cur = await getTone(env, chatId);
        await sendMessage(env, chatId, tr(lang, "tone_current", cur.mode, cur.value, cur.autoLast || ""));
        await sendMessage(env, chatId, tr(lang, "tone_help"));
        return;
      }
      if (/^(help|\?)$/i.test(arg)) { await sendMessage(env, chatId, tr(lang, "tone_help")); return; }
      const ok = await setTone(env, chatId, arg);
      await sendMessage(env, chatId, ok ? tr(lang, "tone_set_ok", arg) : tr(lang, "generic_error", "bad tone value"));
    });
    return json({ ok: true });
  }

  // /diag ‚Äî only admin
  if (text === "/diag" && isAdmin) {
    await safe(async () => {
      const hasGemini   = !!(env.GEMINI_API_KEY || env.GOOGLE_API_KEY);
      const hasCF       = !!(env.CF_ACCOUNT_ID && env.CLOUDFLARE_API_TOKEN);
      const hasOR       = !!env.OPENROUTER_API_KEY;
      const hasFreeBase = !!env.FREE_API_BASE_URL;
      const hasFreeKey  = !!env.FREE_API_KEY;
      const mo = String(env.MODEL_ORDER || "").trim();

      const lines = [
        "üß™ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ AI",
        `MODEL_ORDER: ${mo || "(–ø–æ—Ä–æ–∂–Ω—å–æ)"}`,
        `GEMINI key: ${hasGemini ? "‚úÖ" : "‚ùå"}`,
        `Cloudflare (CF_ACCOUNT_ID + CLOUDFLARE_API_TOKEN): ${hasCF ? "‚úÖ" : "‚ùå"}`,
        `OpenRouter key: ${hasOR ? "‚úÖ" : "‚ùå"}`,
        `FreeLLM (BASE_URL + KEY): ${hasFreeBase && hasFreeKey ? "‚úÖ" : "‚ùå"}`,
      ];

      const entries = mo ? mo.split(",").map(s => s.trim()).filter(Boolean) : [];
      if (entries.length) {
        const health = await getAiHealthSummary(env, entries);
        lines.push("\n‚Äî Health:");
        for (const h of health) {
          const light = h.cool ? "üü•" : (h.slow ? "üü®" : "üü©");
          const ms = h.ewmaMs ? `${Math.round(h.ewmaMs)}ms` : "n/a";
          lines.push(`${light} ${h.provider}:${h.model} ‚Äî ewma ${ms}, fails ${h.failStreak || 0}`);
        }
      }
      await sendMessage(env, chatId, lines.join("\n"), { reply_markup: mainKeyboard(isAdmin) });
    });
    return json({ ok: true });
  }

  // /ai
  const aiArg = parseAiCommand(textRaw);
  if (aiArg !== null) {
    await safe(async () => {
      const q = aiArg || "";
      if (!q) { await sendMessage(env, chatId, tr(lang, "ai_usage")); return; }

      const info = await getEnergy(env, userId);
      const { costText, low, energy } = info;
      if (energy < costText) {
        const links = energyLinks(env, userId);
        await sendMessage(env, chatId, tr(lang, "energy_not_enough", costText, links));
        return;
      }
      const spent = await spendEnergy(env, userId, costText, "text");

      const systemHint = await buildSystemHint(env, chatId, userId, lang);
      const modelOrder = String(env.MODEL_ORDER || "").trim();
      let reply = "";
      try {
        if (modelOrder) {
          const merged = `${systemHint}\n\nUser: ${q}`;
          reply = await askAnyModel(env, merged, { temperature: 0.6, max_tokens: 800 });
        } else {
          reply = await think(env, q, systemHint);
        }
      } catch (e) {
        reply = `üß† AI error: ${String(e?.message || e)}`;
      }

      if (isBlank(reply)) reply = tr(lang, "ai_usage");

      await pushDialog(env, userId, "user", q);
      await pushDialog(env, userId, "assistant", reply);

      if (spent.energy <= low) {
        const links = energyLinks(env, userId);
        reply += `\n\n${tr(lang, "energy_low_hint", spent.energy, links.energy)}`;
      }
      await sendMessage(env, chatId, reply);
    });
    return json({ ok: true });
  }

  // Drive ‚Äî —Ç—ñ–ª—å–∫–∏ –∫–Ω–æ–ø–∫–∞, –±–µ–∑ —Ç–µ–∫—Å—Ç—ñ–≤
  if (text === BTN_DRIVE) {
    await safe(async () => {
      const ut = await getUserTokens(env, userId);
      if (!ut?.refresh_token) {
        const authUrl = abs(env, `/auth/start?u=${userId}`);
        await sendMessage(env, chatId, tr(lang, "drive_auth", authUrl));
        return;
      }
      await setDriveMode(env, userId, true);
      // –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ "–ø–æ—Ä–æ–∂–Ω—î" –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è + —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞
      await sendMessage(env, chatId, "\u2060", { reply_markup: inlineOpenDrive() });
    });
    return json({ ok: true });
  }

  // Senti ‚Äî —Ç–∏—Ö–µ –≤–∏–º–∫–Ω–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –¥–∏—Å–∫–∞
  if (text === BTN_SENTI) {
    await safe(async () => { await setDriveMode(env, userId, false); });
    return json({ ok: true });
  }

  // Admin ‚Äî —ñ–Ω–ª–∞–π–Ω-–º–µ–Ω—é –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ (—ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É)
  const sendAdminMenu = async () => {
    const sec = encodeURIComponent(env.WEBHOOK_SECRET || "");
    const cl = abs(env, `/admin/checklist/html?s=${sec}`);
    const repo = abs(env, `/admin/repo/html?s=${sec}`);
    const hook = abs(env, "/webhook");

    const inline = {
      inline_keyboard: [
        [{ text: "üìã Checklist", url: cl }],
        [{ text: "üìÅ Repo", url: repo }],
        [{ text: "üåê Webhook GET", url: hook }],
      ],
    };
    await sendMessage(env, chatId, "\u2060", { reply_markup: inline });
  };

  if ((text === BTN_ADMIN || text === "/admin") && isAdmin) {
    await safe(async () => {
      await sendAdminMenu();
      await sendMessage(env, chatId, "\u2060", { reply_markup: mainKeyboard(isAdmin) });
    });
    return json({ ok: true });
  }

  // Drive mode: media
  try {
    if (await getDriveMode(env, userId)) {
      if (await handleIncomingMedia(env, chatId, userId, msg, lang)) return json({ ok: true });
    }
  } catch (e) {
    await sendMessage(env, chatId, tr(lang, "generic_error", String(e)));
    return json({ ok: true });
  }

  // ‚îÄ‚îÄ INTENT-FIRST: –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –≤ –∑–æ–≤–Ω—ñ—à–Ω—ñ API –±–µ–∑ —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥ ‚îÄ‚îÄ
  if (text && !text.startsWith("/")) {
    // –®–í–ò–î–ö–Ü –ü–†–Ø–ú–Ü –í–Ü–î–ü–û–í–Ü–î–Ü (HTML) + –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–µ –¥–∂–µ—Ä–µ–ª–æ ‚ÜóÔ∏é
    const lower = text.toLowerCase();

    // –ü–æ–≥–æ–¥–∞
    if (/(^|[\s,])–ø–æ–≥–æ–¥–∞\b|(^|[\s,])weather\b/.test(lower)) {
      try {
        const city = text.replace(/(^|[\s,])(–ø–æ–≥–æ–¥–∞|weather)\b/gi, "").trim() || "–ö–∏—ó–≤";
        const w = await weatherByCity(city);
        const src = w?.provider === "wttr.in" ? "https://wttr.in/" : "https://open-meteo.com/";
        const html = `${formatWeather(w)}\n\n<a href="${src}">‚ÜóÔ∏é</a>`;
        await sendHtml(env, chatId, html);
        return json({ ok: true, intent: "weather" });
      } catch {}
    }

    // –ö—É—Ä—Å USD‚ÜíUAH
    if (/(–∫—É—Ä—Å|–¥–æ–ª–∞—Ä|usd|exchange)/i.test(text)) {
      try {
        const rate = await getUsdUahRate();
        const html = `üíµ –ö—É—Ä—Å USD ‚Üí UAH: <b>${rate.toFixed(2)}‚Ç¥</b>\n<i>–¥–∂–µ—Ä–µ–ª–æ:</i> <a href="https://bank.gov.ua/">–ù–ë–£</a> / <a href="https://exchangerate.host/">exchangerate.host</a> ‚ÜóÔ∏é`;
        await sendHtml(env, chatId, html);
        return json({ ok: true, intent: "rate" });
      } catch {}
    }

    // –ù–æ–≤–∏–Ω–∏
    if (/–Ω–æ–≤–∏–Ω|–Ω–æ–≤–∏–Ω–∏|news/i.test(text)) {
      try {
        const items = await fetchTopNews(env);
        const src = (env.NEWS_API_KEY || env.NEWSDATA_API_KEY) ? "https://newsdata.io/" : "https://www.pravda.com.ua/";
        const html = `${formatNewsList(items)}\n\n<a href="${src}">‚ÜóÔ∏é</a>`;
        await sendHtml(env, chatId, html);
        return json({ ok: true, intent: "news" });
      } catch {}
    }

    // –°–≤—è—Ç–∞
    if (/—Å–≤—è—Ç|—Å–≤—è—Ç–∞|holidays/i.test(text)) {
      try {
        const yearMatch = text.match(/20\d{2}/);
        const year = yearMatch ? Number(yearMatch[0]) : new Date().getFullYear();
        const country = /—É–∫—Ä–∞—ó–Ω|ukrain|ua/i.test(text) ? "UA" : "UA";
        const items = await getHolidays(country, year);
        const head = `üéâ <b>–î–µ—Ä–∂–∞–≤–Ω—ñ —Å–≤—è—Ç–∞ ${country} —É ${year}</b>`;
        const body = items.slice(0, 10).map(h => `‚Ä¢ ${h.date} ‚Äî ${h.name}`).join("\n");
        const html = (items.length ? `${head}\n${body}` : "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—è—Ç–∞ üòï") + `\n\n<a href="https://date.nager.at/">‚ÜóÔ∏é</a>`;
        await sendHtml(env, chatId, html);
        return json({ ok: true, intent: "holidays" });
      } catch {}
    }

    // –í—ñ–∫—ñ
    if (/—Ö—Ç–æ —Ç–∞–∫–∏–π|—Ö—Ç–æ —Ç–∞–∫–∞|—â–æ —Ç–∞–∫–µ|wiki|–≤—ñ–∫—ñ/i.test(lower)) {
      try {
        const q = text.replace(/—Ö—Ç–æ —Ç–∞–∫–∏–π|—Ö—Ç–æ —Ç–∞–∫–∞|—â–æ —Ç–∞–∫–µ|wiki|–≤—ñ–∫—ñ/gi, "").trim() || text;
        const w = await wikiSummary(q, "uk");
        const html = `${formatWiki(w)}\n\n<a href="${w?.url || "https://uk.wikipedia.org/"}">‚ÜóÔ∏é</a>`;
        await sendHtml(env, chatId, html);
        return json({ ok: true, intent: "wiki" });
      } catch {}
    }

    // –Ø–∫—â–æ –∂–æ–¥–µ–Ω —ñ–∑ —à–≤–∏–¥–∫–∏—Ö —à–ª—è—Ö—ñ–≤ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ ‚Äî –ø—Ä–æ–±—É—î–º–æ –≤–∞—à —ñ—Å–Ω—É—é—á–∏–π router
    const intent = detectIntent(text, lang);
    if (intent.type !== "none") {
      try {
        const reply = await runIntent(intent);
        if (reply && reply.trim()) {
          await sendMessage(env, chatId, reply);
          return json({ ok: true, intent: intent.type });
        }
      } catch {
        // —è–∫—â–æ API –≤–ø–∞–ª–æ ‚Äî –º'—è–∫–æ –≤—ñ–¥–ø–∞–¥–∞—î–º–æ –≤ LLM –Ω–∏–∂—á–µ
      }
    }
  }

  // Regular text -> AI (fallback)
  if (text && !text.startsWith("/")) {
    try {
      const info = await getEnergy(env, userId);
      const { costText, low, energy } = info;
      if (energy < costText) {
        const links = energyLinks(env, userId);
        await sendMessage(env, chatId, tr(lang, "energy_not_enough", costText, links));
        return json({ ok: true });
      }
      const spent = await spendEnergy(env, userId, costText, "text");

      const systemHint = await buildSystemHint(env, chatId, userId, lang);
      const modelOrder = String(env.MODEL_ORDER || "").trim();
      let out = "";

      if (modelOrder) {
        const merged = `${systemHint}\n\nUser: ${text}`;
        out = await askAnyModel(env, merged, { temperature: 0.6, max_tokens: 800 });
      } else {
        out = await think(env, text, systemHint);
      }

      if (isBlank(out)) out = tr(lang, "ai_usage");

      await pushDialog(env, userId, "user", text);
      await pushDialog(env, userId, "assistant", out);

      if (spent.energy <= low) {
        const links = energyLinks(env, userId);
        out += `\n\n${tr(lang, "energy_low_hint", spent.energy, links.energy)}`;
      }
      await sendMessage(env, chatId, out);
      return json({ ok: true });
    } catch (e) {
      await sendMessage(env, chatId, tr(lang, "ai_usage"));
      return json({ ok: true });
    }
  }

  // default ‚Äî –∫–æ—Ä–æ—Ç–∫–µ –≤—ñ—Ç–∞–Ω–Ω—è + –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
  await sendMessage(env, chatId, tr(lang, "hello"), { reply_markup: mainKeyboard(isAdmin) });
  return json({ ok: true });
}