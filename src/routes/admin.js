// –ê–¥–º—ñ–Ω-–º–µ–Ω—é —Ç–∞ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
import { drivePing, driveList, driveSaveFromUrl, driveAppendLog } from "../lib/drive.js";
import { getState, setState, clearState } from "../utils/state.js";
import { sendMessage, escape } from "../utils/telegram.js";

export function adminKeyboard() {
  // IMPORTANT: keyboard ‚Äî —Ü–µ –º–∞—Å–∏–≤ –†–Ø–î–ö–Ü–í (–º–∞—Å–∏–≤ –º–∞—Å–∏–≤—ñ–≤)
  return {
    keyboard: [
      [{ text: "Drive ‚úÖ" }, { text: "List 10 üßæ" }],
      [{ text: "Backup URL ‚¨ÜÔ∏è" }, { text: "Checklist +" }],
      [{ text: "–ú–µ–Ω—é" }],
    ],
    resize_keyboard: true,
    is_persistent: true,
  };
}

export async function showAdminMenu(env, chatId) {
  // —Å–∫–∏–¥–∞—î–º–æ –±—É–¥—å-—è–∫–∏–π ‚Äú–æ—á—ñ–∫—É—é URL‚Äù
  await clearState(env, chatId, "awaiting_url");
  return sendMessage(env, chatId,
    "Senti Admin\n‚Äî –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è:\n‚Ä¢ Drive –ø—ñ–Ω–≥ —ñ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤\n‚Ä¢ –®–≤–∏–¥–∫–∏–π –±–µ–∫–∞–ø –∑–∞ URL\n‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —á–µ–∫–ª–∏—Å—Ç",
    { reply_markup: adminKeyboard() }
  );
}

export async function handleAdminButtons(env, chatId, text) {
  const trimmed = (text || "").trim();

  if (trimmed === "Drive ‚úÖ") {
    // —Å–∫–∏–Ω—É—Ç–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è URL, —è–∫—â–æ –±—É–ª–æ
    await clearState(env, chatId, "awaiting_url");
    try {
      await drivePing(env);
      return sendMessage(env, chatId, "üü¢ Drive –¥–æ—Å—Ç—É–ø–Ω–∏–π");
    } catch (e) {
      return sendMessage(env, chatId, `üî¥ Drive –ø–æ–º–∏–ª–∫–∞: ${escape(e.message)}`);
    }
  }

  if (trimmed === "List 10 üßæ") {
    await clearState(env, chatId, "awaiting_url");
    try {
      const files = await driveList(env, 10);
      if (!files.length) return sendMessage(env, chatId, "–ü–æ—Ä–æ–∂–Ω—å–æ.");
      const lines = files.map(
        (f, i) => `${i + 1}. ${escape(f.name)} ‚Äî ${escape(f.webViewLink || f.id)}`
      );
      return sendMessage(env, chatId, lines.join("\n"));
    } catch (e) {
      return sendMessage(env, chatId, `–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫: ${escape(e.message)}`);
    }
  }

  if (trimmed === "Backup URL ‚¨ÜÔ∏è") {
    // —Å—Ç–∞–≤–∏–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è URL
    await setState(env, chatId, "awaiting_url", true);
    return sendMessage(env, chatId,
      "–ù–∞–¥—ñ—à–ª–∏ URL –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É Drive.\n–ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –Ω–∞–∑–≤—É –ø—ñ—Å–ª—è –ø—Ä–æ–±—ñ–ª—É: `https://... —Ñ–∞–π–ª.zip`",
      { parse_mode: "Markdown" }
    );
  }

  if (trimmed === "Checklist +") {
    await setState(env, chatId, "awaiting_checklist_line", true);
    return sendMessage(env, chatId, "–ù–∞–¥—ñ—à–ª–∏ —Ä—è–¥–æ–∫, —è–∫–∏–π –¥–æ–¥–∞—Ç–∏ –¥–æ `senti_checklist.md`", {
      parse_mode: "Markdown",
    });
  }

  if (trimmed === "–ú–µ–Ω—é") {
    await clearState(env, chatId, "awaiting_url");
    await clearState(env, chatId, "awaiting_checklist_line");
    // –ø–æ–∫–∞–∂–µ–º–æ –ø—ñ–¥–∫–∞–∑–∫–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (–∑–≤–∏—á–∞–π–Ω–µ –º–µ–Ω—é)
    return sendMessage(env, chatId,
      "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n/menu ‚Äî –∞–¥–º—ñ–Ω-–º–µ–Ω—é\n/ping ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤'—è–∑–∫—É"
    );
  }

  // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å—Ç–∞–Ω—ñ ‚Äú–æ—á—ñ–∫—É—é URL‚Äù ‚Äî –ø—Ä–æ–±—É—î–º–æ –∑–±–µ—Ä–µ–≥—Ç–∏
  const isAwaitingUrl = await getState(env, chatId, "awaiting_url");
  if (isAwaitingUrl) {
    const parts = trimmed.split(/\s+(.+)?/); // URL [name?]
    const url = parts[0];
    const name = parts[1] || "";
    if (!/^https?:\/\//i.test(url)) {
      return sendMessage(env, chatId, "–ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞–ª—ñ–¥–Ω–∏–π URL (http/https).");
    }
    try {
      const saved = await driveSaveFromUrl(env, url, name);
      await clearState(env, chatId, "awaiting_url");
      return sendMessage(env, chatId, `‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: ${escape(saved.name)}\n${escape(saved.link)}`);
    } catch (e) {
      return sendMessage(env, chatId, `–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${escape(e.message)}`);
    }
  }

  // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å—Ç–∞–Ω—ñ ‚Äú–æ—á—ñ–∫—É—é —Ä—è–¥–æ–∫ –¥–ª—è —á–µ–∫–ª–∏—Å—Ç—É‚Äù
  const isAwaitingLine = await getState(env, chatId, "awaiting_checklist_line");
  if (isAwaitingLine) {
    const line = trimmed;
    if (!line) return sendMessage(env, chatId, "–ù–∞–¥—ñ—à–ª–∏ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫.");
    try {
      await driveAppendLog(env, "senti_checklist.md", line);
      await clearState(env, chatId, "awaiting_checklist_line");
      return sendMessage(env, chatId, "‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ —á–µ–∫–ª–∏—Å—Ç—É.");
    } catch (e) {
      return sendMessage(env, chatId, `–ü–æ–º–∏–ª–∫–∞: ${escape(e.message)}`);
    }
  }

  // –ù–µ–≤—ñ–¥–æ–º–∞ –∫–Ω–æ–ø–∫–∞ ‚Äî –ø–æ–≤–µ—Ä–Ω–µ–º–æ—Å—å –¥–æ –º–µ–Ω—é
  return showAdminMenu(env, chatId);
}