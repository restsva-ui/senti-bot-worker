// src/routes/admin.js
import { adminKeyboard } from "../lib/keyboard.js";

/** –ö–æ–º–∞–Ω–¥–∞, —è–∫–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞—î –∞–¥–º—ñ–Ω-–º–µ–Ω—é */
export function wantAdmin(text = "") {
  const t = String(text || "").trim().toLowerCase();
  return t === "/admin" || t === "–º–µ–Ω—é" || t === "/menu";
}

// –ù–µ–≤–µ–ª–∏—á–∫–∏–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è –∑–≤–µ—Ä–Ω–µ–Ω—å –¥–æ Telegram API
async function tgCall(env, method, payload) {
  const url = `https://api.telegram.org/bot${env.BOT_TOKEN}/${method}`;
  const res = await fetch(url, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(payload || {}),
  });
  const json = await res.json().catch(() => ({}));
  if (!json.ok) {
    throw new Error(`${method} failed: ${res.status} ${res.statusText} ${JSON.stringify(json)}`);
  }
  return json.result;
}

/** –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ (—ñ –ø–æ—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ) –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ –≤ Telegram */
export async function ensureBotCommands(env, chatId = null) {
  const commands = [
    { command: "start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞" },
    { command: "menu",  description: "–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é" },
    { command: "admin", description: "–ê–¥–º—ñ–Ω-–º–µ–Ω—é (–∫–µ—Ä—É–≤–∞–Ω–Ω—è)" },
    { command: "ping",  description: "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤'—è–∑–∫—É" },
    { command: "help",  description: "–î–æ–≤—ñ–¥–∫–∞" },
  ];

  // –°–∫–∏–¥–∞—î–º–æ chat-scope —ñ —Å—Ç–∞–≤–∏–º–æ –Ω–æ–≤—ñ
  if (chatId) {
    try { await tgCall(env, "deleteMyCommands", { scope: { type: "chat", chat_id: chatId } }); } catch (_) {}
    try { await tgCall(env, "setMyCommands", { commands, scope: { type: "chat", chat_id: chatId } }); } catch (_) {}
  }
  // –ù–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫ –æ–Ω–æ–≤–∏–º–æ —ñ default-scope
  try { await tgCall(env, "deleteMyCommands", {}); } catch (_) {}
  try { await tgCall(env, "setMyCommands", { commands }); } catch (_) {}
}

/**
 * –û–±—Ä–æ–±–∫–∞ –∞–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥ —ñ –∫–Ω–æ–ø–æ–∫.
 * –ü–æ–≤–µ—Ä—Ç–∞—î:
 *  - { text, keyboard }
 *  - { text, expect: 'backup-url'|'append-checklist', keyboard? }
 */
export async function handleAdminCommand(env, chatId, text) {
  const t = String(text || "").trim();

  // –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é
  if (wantAdmin(t)) {
    return {
      text:
        "Senti Admin\n‚Äî –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è:\n" +
        "‚Ä¢ Drive –ø—ñ–Ω–≥ —ñ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤\n" +
        "‚Ä¢ –®–≤–∏–¥–∫–∏–π –±–µ–∫–∞–ø –∑–∞ URL\n" +
        "‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —á–µ–∫–ª–∏—Å—Ç",
      keyboard: adminKeyboard(),
    };
  }

  // –¶—ñ –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–æ–±–ª—è—î webhook, —Ç—É—Ç —Ç—ñ–ª—å–∫–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (UX)
  if (t === "drive ‚úÖ" || t === "/gdrive_ping_btn") {
    return { text: "–ü–µ—Ä–µ–≤—ñ—Ä—è—é Drive‚Ä¶", keyboard: adminKeyboard() };
  }

  if (t === "list 10 üßæ" || t === "list 10" || t === "/list10_btn") {
    return { text: "–ó–±–∏—Ä–∞—é –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ñ–∞–π–ª—ñ–≤‚Ä¶", keyboard: adminKeyboard() };
  }

  if (t === "backup url ‚¨ÜÔ∏è" || t === "/backup_btn") {
    return {
      text: "–ù–∞–¥—ñ—à–ª–∏ URL –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É Drive. –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –Ω–∞–∑–≤—É –ø—ñ—Å–ª—è –ø—Ä–æ–±—ñ–ª—É:\n`https://... —Ñ–∞–π–ª.zip`",
      expect: "backup-url",
      keyboard: adminKeyboard(),
    };
  }

  if (t === "checklist ‚ûï" || t === "/checklist_add_btn") {
    return {
      text: "–ù–∞–¥—ñ—à–ª–∏ *–æ–¥–∏–Ω —Ä—è–¥–æ–∫*, —è–∫–∏–π –¥–æ–¥–∞—Ç–∏ –≤ `senti_checklist.md`.",
      expect: "append-checklist",
      keyboard: adminKeyboard(),
    };
  }

  return null;
}