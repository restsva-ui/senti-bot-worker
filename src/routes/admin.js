// –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å: –∫–Ω–æ–ø–∫–∏ + —Å–ª–µ—à–∏ + –¥—ñ–∞–ª–æ–≥–∏
import { drivePing, driveList, driveSaveFromUrl, driveAppendLog } from "../lib/drive.js";
import { getState, setState, clearState } from "../lib/state.js";
import { adminKeyboard } from "../lib/keyboard.js";

const norm = (t) =>
  (t || "")
    .replace(/[\uFE0F]/g, "")
    .replace(/[\p{Extended_Pictographic}]/gu, "")
    .replace(/\s+/g, " ")
    .trim()
    .toLowerCase();

async function send(env, chatId, text, extra = {}) {
  const url = `https://api.telegram.org/bot${env.BOT_TOKEN}/sendMessage`;
  await fetch(url, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, text, parse_mode: "Markdown", ...extra }),
  }).catch(() => {});
}

// ‚Äî‚Äî‚Äî –°–∏—Å—Ç–µ–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ Telegram (–≤–∏–¥–Ω–æ –≤ –º–µ–Ω—é) ‚Äî‚Äî‚Äî
export async function ensureBotCommands(env) {
  const url = `https://api.telegram.org/bot${env.BOT_TOKEN}/setMyCommands`;
  const commands = [
    { command: "admin", description: "–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å (Drive/Backup/Checklist)" },
    { command: "menu", description: "–í—ñ–¥–∫—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å" },
    { command: "help", description: "–î–æ–≤—ñ–¥–∫–∞" },
    { command: "ping", description: "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤'—è–∑–∫—É" },
  ];
  try {
    await fetch(url, {
      method: "POST",
      headers: { "content-type": "application/json" },
      body: JSON.stringify({ commands }),
    });
  } catch {}
}

export function wantAdmin(normText) {
  return normText === "/admin" || normText === "/menu" || normText === "–º–µ–Ω—é";
}

function fmtTime(ts, env) {
  try { return new Date(ts).toLocaleString("uk-UA", { timeZone: env.TZ || "Europe/Kyiv", hour12: false }); }
  catch { return ts; }
}

async function showPanel(env, chatId) {
  await send(
    env,
    chatId,
    [
      "*Senti Admin*",
      "‚Äî –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è:",
      "‚Ä¢ Drive –ø—ñ–Ω–≥ —ñ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤",
      "‚Ä¢ –®–≤–∏–¥–∫–∏–π –±–µ–∫–∞–ø –∑–∞ URL",
      "‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —á–µ–∫–ª–∏—Å—Ç",
    ].join("\n"),
    { reply_markup: adminKeyboard() }
  );
}

async function showDrive(env, chatId) {
  try {
    await drivePing(env);
    await send(env, chatId, "üü¢ Drive OK", { reply_markup: adminKeyboard() });
  } catch (e) {
    await send(env, chatId, "üî¥ Drive –ø–æ–º–∏–ª–∫–∞: " + String(e?.message || e), { reply_markup: adminKeyboard() });
    return;
  }

  try {
    const files = await driveList(env, 10);
    const lines = files.map((f, i) => {
      const when = f.modifiedTime ? fmtTime(f.modifiedTime, env) : "";
      const link = f.webViewLink || `https://drive.google.com/file/d/${f.id}/view?usp=drivesdk`;
      return `${i + 1}. *${f.name}*\nüïí ${when}\nüîó ${link}`;
    });
    await send(env, chatId, ["*–û—Å—Ç–∞–Ω–Ω—ñ 10 —Ñ–∞–π–ª—ñ–≤:*", ...lines].join("\n\n"), { reply_markup: adminKeyboard() });
  } catch (e) {
    await send(env, chatId, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤: " + String(e?.message || e), {
      reply_markup: adminKeyboard(),
    });
  }
}

export async function handleAdminCommand({ env, update, chatId, text, norm: ntext, state }) {
  // –ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª—ñ
  if (wantAdmin(ntext) || ntext === "/start") {
    await showPanel(env, chatId);
    return true;
  }

  // –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–¥—ñ–π –¥—ñ–∞–ª–æ–≥—É (–æ—á—ñ–∫—É—î–º–æ URL —á–∏ —Ä—è–¥–æ–∫ –¥–ª—è —á–µ–∫–ª–∏—Å—Ç–∞)
  if (state?.type === "await_backup_url") {
    const m = text.match(/^(https?:\/\/\S+)(?:\s+(.+))?$/i);
    if (!m) {
      await send(env, chatId, "‚ùóÔ∏è–¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ URL. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑: `https://... [–Ω–∞–∑–≤–∞]`");
      return true;
    }
    const url = m[1];
    const name = (m[2] || "").trim();
    try {
      const saved = await driveSaveFromUrl(env, url, name);
      await send(env, chatId, `‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: *${saved.name}*\nüîó ${saved.link}`, { reply_markup: adminKeyboard() });
      try { await driveAppendLog(env, "senti_checklist.md", `Backup: ${saved.name} ‚Äî ${saved.link}`); } catch {}
    } catch (e) {
      await send(env, chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏: " + String(e?.message || e));
    }
    await clearState(env, chatId);
    return true;
  }

  if (state?.type === "await_checklist_line") {
    const line = (text || "").replace(/\s+/g, " ").trim();
    if (!line) {
      await send(env, chatId, "‚ùóÔ∏è–ù–∞–¥—ñ—à–ª–∏ *–æ–¥–∏–Ω* –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫.");
      return true;
    }
    try {
      const r = await driveAppendLog(env, "senti_checklist.md", line);
      await send(env, chatId, `üü© –î–æ–¥–∞–Ω–æ –≤ *senti_checklist.md*.\nüîó ${r.webViewLink}`, {
        reply_markup: adminKeyboard(),
      });
    } catch (e) {
      await send(env, chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ: " + String(e?.message || e));
    }
    await clearState(env, chatId);
    return true;
  }

  // –ö–Ω–æ–ø–∫–∏ / –∫–æ—Ä–æ—Ç–∫—ñ –∫–æ–º–∞–Ω–¥–∏
  if (["drive ‚úÖ", "drive"].includes(ntext) || ntext === "/drive") {
    await showDrive(env, chatId);
    return true;
  }

  if (["list 10", "list 10 üìÑ", "list10", "/list10"].includes(ntext)) {
    // –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–µ–≥—É—î–º–æ –Ω–∞ showDrive (–≤—ñ–Ω —ñ —Ç–∞–∫ –ø–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –ø—ñ—Å–ª—è –ø—ñ–Ω–≥—É)
    await showDrive(env, chatId);
    return true;
  }

  if (["backup url", "backup url ‚¨ÜÔ∏è", "/backup"].includes(ntext)) {
    await setState(env, chatId, { type: "await_backup_url" });
    await send(
      env,
      chatId,
      "–ù–∞–¥—ñ—à–ª–∏ *URL* –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É Drive. –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –Ω–∞–∑–≤—É –ø—ñ—Å–ª—è –ø—Ä–æ–±—ñ–ª—É:\n`https://... —Ñ–∞–π–ª.zip`",
      { reply_markup: adminKeyboard() }
    );
    return true;
  }

  if (["checklist", "checklist +", "checklist ‚ûï", "/checkadd"].includes(ntext)) {
    await setState(env, chatId, { type: "await_checklist_line" });
    await send(env, chatId, "–ù–∞–¥—ñ—à–ª–∏ *–æ–¥–∏–Ω —Ä—è–¥–æ–∫*, —è–∫–∏–π –¥–æ–¥–∞—Ç–∏ –≤ *senti_checklist.md*.", {
      reply_markup: adminKeyboard(),
    });
    return true;
  }

  return false; // –Ω–µ –º–∏
}