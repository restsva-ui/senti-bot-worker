// src/routes/admin.js
import { adminKeyboard } from "../lib/keyboard.js";
import { drivePing, driveListLatest } from "../lib/drive.js";

/** –ö–æ–º–∞–Ω–¥–∞, —è–∫–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞—î –∞–¥–º—ñ–Ω-–º–µ–Ω—é */
export function wantAdmin(text = "") {
  const t = String(text || "").trim().toLowerCase();
  return t === "/admin" || t === "–º–µ–Ω—é" || t === "/menu";
}

/** –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ –≤ Telegram (—â–æ–± –±—É–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –º–µ–Ω—é) */
export async function ensureBotCommands(env) {
  const url = `https://api.telegram.org/bot${env.BOT_TOKEN}/setMyCommands`;
  const commands = [
    { command: "start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞" },
    { command: "admin", description: "–ê–¥–º—ñ–Ω-–º–µ–Ω—é (–∫–µ—Ä—É–≤–∞–Ω–Ω—è)" },
    { command: "menu", description: "–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é" },
    { command: "ping", description: "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤'—è–∑–∫—É" },
    { command: "help", description: "–î–æ–≤—ñ–¥–∫–∞" },
  ];
  try {
    await fetch(url, {
      method: "POST",
      headers: { "content-type": "application/json" },
      body: JSON.stringify({ commands }),
    });
  } catch (_) {}
}

/**
 * –û–±—Ä–æ–±–∫–∞ –∞–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥ —ñ –∫–Ω–æ–ø–æ–∫.
 * –ü–æ–≤–µ—Ä—Ç–∞—î:
 *  - { text, keyboard } ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è + –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
 *  - { text, expect: 'backup-url'|'append-checklist', keyboard? } ‚Äî —è–∫—â–æ —á–µ–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫
 */
export async function handleAdminCommand(env, chatId, text) {
  const tRaw = String(text || "").trim();
  const t = tRaw.toLowerCase();

  // 1) –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é
  if (wantAdmin(t)) {
    return {
      text:
        "Senti Admin\n‚Äî –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è:\n" +
        "‚Ä¢ Drive –ø—ñ–Ω–≥ —ñ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤\n" +
        "‚Ä¢ –®–≤–∏–¥–∫–∏–π –±–µ–∫–∞–ø –∑–∞ URL\n" +
        "‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —á–µ–∫–ª–∏—Å—Ç",
      keyboard: adminKeyboard(),
    };
  }

  // 2) –ö–Ω–æ–ø–∫–∏ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ (–ø—ñ–¥–ø–∏—Å–∏ –ø–æ–≤–∏–Ω–Ω—ñ –∑–±—ñ–≥–∞—Ç–∏—Å—è –∑ adminKeyboard())
  if (tRaw === "Drive ‚úÖ" || t === "/gdrive_ping_btn") {
    try {
      await drivePing(env);
      return { text: "üü¢ Drive OK", keyboard: adminKeyboard() };
    } catch (e) {
      return { text: "üî¥ Drive –ø–æ–º–∏–ª–∫–∞: " + String(e?.message || e), keyboard: adminKeyboard() };
    }
  }

  if (tRaw === "List 10 üßæ" || t === "list 10" || t === "/list10_btn") {
    try {
      const list = await driveListLatest(env, 10); // [{name, webViewLink, modifiedTime}]
      if (!list?.length) {
        return { text: "–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", keyboard: adminKeyboard() };
      }
      const lines = list.map((f, i) => {
        const dt = new Date(f.modifiedTime || Date.now());
        const time = dt.toISOString().replace("T", " ").replace("Z", "");
        return [
          `${i + 1}. *${f.name}*`,
          `üïì ${time}`,
          f.webViewLink ? `üîó ${f.webViewLink}` : "",
        ].filter(Boolean).join("\n");
      });
      return { text: "–û—Å—Ç–∞–Ω–Ω—ñ 10 —Ñ–∞–π–ª—ñ–≤:\n\n" + lines.join("\n\n"), keyboard: adminKeyboard() };
    } catch (e) {
      return { text: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫: " + String(e?.message || e), keyboard: adminKeyboard() };
    }
  }

  if (tRaw === "Backup URL ‚¨ÜÔ∏è" || t === "/backup_btn") {
    return {
      text: "–ù–∞–¥—ñ—à–ª–∏ URL –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É Drive. –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –Ω–∞–∑–≤—É –ø—ñ—Å–ª—è –ø—Ä–æ–±—ñ–ª—É:\n`https://... —Ñ–∞–π–ª.zip`",
      expect: "backup-url",
      keyboard: adminKeyboard(),
    };
  }

  if (tRaw === "Checklist ‚ûï" || t === "/checklist_add_btn") {
    return {
      text: "–ù–∞–¥—ñ—à–ª–∏ *–æ–¥–∏–Ω —Ä—è–¥–æ–∫*, —è–∫–∏–π –¥–æ–¥–∞—Ç–∏ –≤ `senti_checklist.md`.",
      expect: "append-checklist",
      keyboard: adminKeyboard(),
    };
  }

  // –Ø–∫—â–æ –Ω–µ –≤–ø—ñ–∑–Ω–∞–ª–∏ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ null, —â–æ–± —Ö–µ–Ω–¥–ª–µ—Ä —É webhook.js –ø—Ä–æ—ñ–≥–Ω–æ—Ä—É–≤–∞–≤
  return null;
}