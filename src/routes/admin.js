import { adminKeyboard } from "../lib/keyboard.js";
import { driveList, driveAppendLog } from "../lib/drive.js";

/** –ß–∏ —Ö–æ—á–µ–º–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —Ü—å–æ–≥–æ —Ç–µ–∫—Å—Ç—É */
export function wantAdmin(text) {
  return text === "/admin" || text === "/menu" || text === "–ú–µ–Ω—é";
}

/** –†–µ–≥—ñ—Å—Ç—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ (—â–æ–± —É –ø—ñ–¥–∫–∞–∑–∫–∞—Ö –∑‚Äô—è–≤–∏–ª–∞—Å—è /admin) */
export async function ensureBotCommands(env) {
  try {
    const url = `https://api.telegram.org/bot${env.BOT_TOKEN}/setMyCommands`;
    const commands = [
      { command: "start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞" },
      { command: "help", description: "–î–æ–≤—ñ–¥–∫–∞" },
      { command: "ping", description: "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤'—è–∑–∫—É" },
      { command: "menu", description: "–ú–µ–Ω—é" },
      { command: "admin", description: "–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å" },
    ];
    await fetch(url, {
      method: "POST",
      headers: { "content-type": "application/json" },
      body: JSON.stringify({ commands, scope: { type: "default" }, language_code: "uk" }),
    });
  } catch (_) {}
}

/** –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫/–∫–æ–º–∞–Ω–¥ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ */
export async function handleAdminCommand(env, chatId, text) {
  if (text === "/admin" || text === "/menu" || text === "–ú–µ–Ω—é") {
    return {
      text:
        "Senti Admin\n‚Äî –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è:\n" +
        "‚Ä¢ Drive –ø—ñ–Ω–≥ —ñ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤\n" +
        "‚Ä¢ –®–≤–∏–¥–∫–∏–π –±–µ–∫–∞–ø –∑–∞ URL\n" +
        "‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —á–µ–∫–ª–∏—Å—Ç",
      keyboard: adminKeyboard(),
    };
  }

  if (text === "Drive ‚úÖ") {
    return { text: "üü¢ Drive OK" };
  }

  if (text === "List 10 üìÑ") {
    try {
      const files = await driveList(env, 10);
      const lines = files.map((f, i) =>
        `${i + 1}. ${f.name}\nüïí ${new Date(f.modifiedTime).toLocaleString("uk-UA")}\nüîó ${f.webViewLink}`
      );
      return { text: "–û—Å—Ç–∞–Ω–Ω—ñ 10 —Ñ–∞–π–ª—ñ–≤:\n\n" + lines.join("\n\n") };
    } catch (e) {
      return { text: "‚ùå –ü–æ–º–∏–ª–∫–∞ Drive list: " + String(e?.message || e) };
    }
  }

  if (text === "Checklist ‚ûï") {
    return {
      text: "–ù–∞–¥—ñ—à–ª–∏ *–æ–¥–∏–Ω —Ä—è–¥–æ–∫*, —è–∫–∏–π –¥–æ–¥–∞—Ç–∏ –≤ `senti_checklist.md`.",
      expect: { mode: "append-checklist" },
    };
  }

  if (text === "Backup URL ‚¨ÜÔ∏è") {
    return {
      text: "–ù–∞–¥—ñ—à–ª–∏ URL –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É Drive. –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –Ω–∞–∑–≤—É –ø—ñ—Å–ª—è –ø—Ä–æ–±—ñ–ª—É:\n`https://... —Ñ–∞–π–ª.zip`",
      expect: { mode: "backup-url" },
    };
  }

  return null;
}