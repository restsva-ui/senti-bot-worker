// src/routes/admin.js
import { TG } from "../lib/tg.js";
import { drivePing, driveList, appendToChecklist, getAccessToken } from "../lib/drive.js";

export const adminRoutes = async (req, env, url) => {
  const p = url.pathname;

  // –ú–µ–Ω—é-–ø—ñ–¥–∫–∞–∑–∫–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ
  if (p === "/tg/install-commands-min") {
    await TG.setCommands(env.BOT_TOKEN, { type:"default" }, []);
    if (!env.TELEGRAM_ADMIN_ID) throw new Error("TELEGRAM_ADMIN_ID not set");
    await TG.setCommands(env.BOT_TOKEN, { type:"chat", chat_id: Number(env.TELEGRAM_ADMIN_ID) }, [
      { command: "admin", description: "–í—ñ–¥–∫—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω-–º–µ–Ω—é" },
    ]);
    return new Response(JSON.stringify({ ok:true, installed:"minimal" }), { headers:{ "content-type":"application/json" }});
  }
  if (p === "/tg/clear-commands") {
    await TG.setCommands(env.BOT_TOKEN, { type:"default" }, []);
    if (env.TELEGRAM_ADMIN_ID) {
      await TG.setCommands(env.BOT_TOKEN, { type:"chat", chat_id: Number(env.TELEGRAM_ADMIN_ID) }, []);
    }
    return new Response(JSON.stringify({ ok:true, cleared:true }), { headers:{ "content-type":"application/json" }});
  }

  // –®–≤–∏–¥–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–∏—Å–∫–∞
  if (p === "/gdrive/ping") {
    try {
      const token = await getAccessToken(env);
      const files = await driveList(env, token);
      return new Response(JSON.stringify({ ok:true, files: files.files || [] }), { headers:{ "content-type":"application/json" }});
    } catch (e) {
      return new Response(JSON.stringify({ ok:false, error:String(e) }), { status:500, headers:{ "content-type":"application/json" }});
    }
  }
  if (p === "/gdrive/checklist") {
    const token = await getAccessToken(env);
    const line = url.searchParams.get("line") || `tick ${new Date().toISOString()}`;
    await appendToChecklist(env, token, line);
    return new Response(JSON.stringify({ ok:true }), { headers:{ "content-type":"application/json" }});
  }

  // CI note
  if (p === "/ci/deploy-note") {
    const s = url.searchParams.get("s");
    if (env.WEBHOOK_SECRET && s !== env.WEBHOOK_SECRET) {
      return new Response(JSON.stringify({ ok:false, error:"unauthorized" }), { status:401, headers:{ "content-type":"application/json" }});
    }
    const commit = url.searchParams.get("commit") || "";
    const actor  = url.searchParams.get("actor") || "";
    const depId  = url.searchParams.get("deploy") || env.DEPLOY_ID || "";
    const line = `[deploy] ${new Date().toISOString()} actor=${actor} commit=${commit} deploy=${depId}`;
    const token = await getAccessToken(env);
    await appendToChecklist(env, token, line);
    return new Response(JSON.stringify({ ok:true, line }), { headers:{ "content-type":"application/json" }});
  }

  return null;
};

export const handleAdminCommand = async ({ env, chatId, userId, text, msg, isAdmin, TG, getAccessToken, driveList, appendToChecklist, logDeploy, RAG }) => {
  if (!isAdmin) {
    await TG.text(chatId, "‚õî –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω–∞.", { token: env.BOT_TOKEN });
    return;
  }

  if (text === "/admin") {
    await TG.text(chatId,
`üõ† –ê–¥–º—ñ–Ω-–º–µ–Ω—é

‚Ä¢ /admin_ping ‚Äî ping –∞–¥–º—ñ–Ω-–¥–∏—Å–∫–∞
‚Ä¢ /admin_list ‚Äî —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ (–∞–¥–º—ñ–Ω-–¥–∏—Å–∫)
‚Ä¢ /admin_checklist <—Ä—è–¥–æ–∫> ‚Äî –¥–æ–ø–∏—Å —É —á–µ–∫–ª–∏—Å—Ç
‚Ä¢ /admin_setwebhook ‚Äî –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ –≤–µ–±—Ö—É–∫
‚Ä¢ /admin_refreshcheck ‚Äî —Ä—É—á–Ω–∏–π —Ä–µ—Ñ—Ä–µ—à
‚Ä¢ /admin_note_deploy ‚Äî —Ç–µ—Å—Ç–æ–≤–∞ –¥–µ–ø–ª–æ–π-–Ω–æ—Ç–∞—Ç–∫–∞
‚Ä¢ /ask <–∑–∞–ø–∏—Ç> ‚Äî –ø–∏—Ç–∞–Ω–Ω—è –¥–æ Senti (Gemini + RAG)
‚Ä¢ (reply) /summarize ‚Äî —Å—Ç–∏—Å–Ω—É—Ç–∏ –≤–∏–¥—ñ–ª–µ–Ω–∏–π —Ç–µ–∫—Å—Ç/–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è`,
      { token: env.BOT_TOKEN }
    );
    return;
  }

  if (text.startsWith("/admin_ping")) {
    const r = await (await import("../lib/drive.js")).drivePing(env);
    await TG.text(chatId, `‚úÖ Admin Drive OK. filesCount: ${r.filesCount}`, { token: env.BOT_TOKEN });
    return;
  }

  if (text.startsWith("/admin_list")) {
    const token = await getAccessToken(env);
    const files = await driveList(env, token);
    const arr = files.files || [];
    const msgOut = arr.length
      ? "–ê–¥–º—ñ–Ω –¥–∏—Å–∫:\n" + arr.map(f => `‚Ä¢ ${f.name} (${f.id})`).join("\n")
      : "üìÅ –î–∏—Å–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.";
    await TG.text(chatId, msgOut, { token: env.BOT_TOKEN });
    try { await appendToChecklist(env, token, `admin_list OK ${new Date().toISOString()}`); } catch {}
    return;
  }

  if (text.startsWith("/admin_checklist")) {
    const line = text.replace("/admin_checklist","").trim() || `tick ${new Date().toISOString()}`;
    const token = await getAccessToken(env);
    await appendToChecklist(env, token, line);
    await TG.text(chatId, `‚úÖ –î–æ–¥–∞–Ω–æ: ${line}`, { token: env.BOT_TOKEN });
    return;
  }

  if (text.startsWith("/admin_setwebhook")) {
    const target = `https://${env.SERVICE_HOST}/webhook`;
    await TG.setWebhook(env.BOT_TOKEN, target, env.TG_WEBHOOK_SECRET);
    await TG.text(chatId, `‚úÖ –í–µ–±—Ö—É–∫ ‚Üí ${target}${env.TG_WEBHOOK_SECRET ? " (—Å–µ–∫—Ä–µ—Ç –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ)" : ""}`, { token: env.BOT_TOKEN });
    return;
  }

  if (text.startsWith("/admin_refreshcheck")) {
    try {
      const tok = await getAccessToken(env);
      if (tok) await TG.text(chatId, `‚úÖ Refresh OK (–æ—Ç—Ä–∏–º–∞–Ω–æ access_token).`, { token: env.BOT_TOKEN });
    } catch (e) {
      await TG.text(chatId, `‚ùå Refresh failed: ${String(e)}`, { token: env.BOT_TOKEN });
    }
    return;
  }

  if (text.startsWith("/admin_note_deploy")) {
    const line = await logDeploy(env, { source:"manual", actor:String(userId) });
    await TG.text(chatId, `üìù ${line}`, { token: env.BOT_TOKEN });
    return;
  }

  // ‚Äú—Ä–æ–∑—É–º‚Äù
  if (text.startsWith("/ask")) {
    const { AI } = await import("../lib/ai.js");
    const q = text.replace("/ask","").trim() || "–ü–æ—è—Å–Ω–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø—Ä–æ–µ–∫—Ç—É –∫–æ—Ä–æ—Ç–∫–æ.";
    let ctx = [];
    try { ctx = await RAG.search(env, q, 4); } catch(e){ console.log("RAG search err", e); }
    const system = "–¢–∏ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç Senti. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Å—Ç–∏—Å–ª–æ, –ø–æ —Å—É—Ç—ñ. –Ø–∫—â–æ –¥–∞—î—à –∫—Ä–æ–∫–∏ ‚Äî –Ω—É–º–µ—Ä—É–π. –ö–æ—Ä–∏—Å—Ç—É–π—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –∞–ª–µ –Ω–µ –≤–∏–≥–∞–¥—É–π.";
    const ans = await AI.ask(env, { system, prompt: q, context: ctx });
    await TG.text(chatId, ans || "‚Ä¶", { token: env.BOT_TOKEN });
    return;
  }

  if (text.startsWith("/summarize")) {
    const { AI } = await import("../lib/ai.js");
    const src = msg.reply_to_message?.text || msg.reply_to_message?.caption || "";
    if(!src){
      await TG.text(chatId,"–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π /summarize –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è/—Ç–µ–∫—Å—Ç.",{token:env.BOT_TOKEN});
      return;
    }
    const system = "–°—Ç–∏—Å–Ω–∏ –∑–º—ñ—Å—Ç –¥–æ 5 –ø—É–Ω–∫—Ç—ñ–≤ —ñ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–æ—é. –ù–µ –∑–∞–≥–∞–ª—å–Ω—ñ —Ñ—Ä–∞–∑–∏.";
    const ans = await AI.ask(env, { system, prompt: src });
    await TG.text(chatId, ans || "‚Ä¶", { token: env.BOT_TOKEN });
    return;
  }
};