// [5/7] src/routes/webhook/ai.js
import { askAnyModel } from "../../lib/modelRouter.js";
import { think } from "../../lib/brain.js";
import { buildSystemHint } from "./context.js";
import { spendEnergy } from "../../lib/energy.js";
import { pushContext, rememberUserMessage, rememberBotMessage } from "../../lib/memory.js";
import { energyLinks, defaultAiReply, isBlank } from "./utils.js";

export async function handleAiSlash(TG, env, chatId, userId, query) {
  if (!query) {
    await TG.text(chatId, "‚úçÔ∏è –ù–∞–¥—ñ—à–ª–∏ –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /ai. –ü—Ä–∏–∫–ª–∞–¥:\n/ai –°–∫—ñ–ª—å–∫–∏ –±—É–¥–µ 2+2?");
    return;
  }

  // —Å–ø–∏—Å–∞–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó –∑–∞ —Ç–µ–∫—Å—Ç
  const costText = Number(env.ENERGY_COST_TEXT ?? 1);
  const low      = Number(env.ENERGY_LOW_THRESHOLD ?? 10);
  const spent    = await spendEnergy(env, userId, costText, "text");
  if (spent.energy < 0 || spent.energy <= low) {
    const links = energyLinks(env, userId);
    await TG.text(chatId, `üîã –ù–µ –≤–∏—Å—Ç–∞—á–∞—î –µ–Ω–µ—Ä–≥—ñ—ó (–ø–æ—Ç—Ä—ñ–±–Ω–æ ${costText}).\n–í–æ–Ω–∞ –≤—ñ–¥–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.\n–ö–µ—Ä—É–≤–∞–Ω–Ω—è:\n‚Ä¢ Energy: ${links.energy}\n‚Ä¢ Checklist: ${links.checklist}`);
    return;
  }

  const systemHint = await buildSystemHint(env, chatId);
  const modelOrder = String(env.MODEL_ORDER || "").trim();

  let reply = "";
  try {
    if (modelOrder) {
      const merged = `${systemHint}\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${query}`;
      reply = await askAnyModel(env, merged, { temperature: 0.6, max_tokens: 800 });
    } else {
      reply = await think(env, query, systemHint);
    }
  } catch (e) {
    reply = `üß† –ü–æ–º–∏–ª–∫–∞ AI: ${String(e?.message || e)}`;
  }

  if (isBlank(reply)) reply = defaultAiReply();

  await rememberUserMessage(env, chatId, query);
  await rememberBotMessage(env, chatId, reply);

  if (spent.energy <= low) {
    const links = energyLinks(env, userId);
    reply += `\n\n‚ö†Ô∏è –ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –µ–Ω–µ—Ä–≥—ñ—ó (${spent.energy}). –ö–µ—Ä—É–≤–∞–Ω–Ω—è: ${links.energy}`;
  }
  await TG.text(chatId, reply);
}

export async function handlePlainText(TG, env, chatId, userId, text) {
  const costText = Number(env.ENERGY_COST_TEXT ?? 1);
  const low      = Number(env.ENERGY_LOW_THRESHOLD ?? 10);
  const spent    = await spendEnergy(env, userId, costText, "text");
  if (spent.energy < 0 || spent.energy <= low) {
    const links = energyLinks(env, userId);
    await TG.text(chatId, `üîã –ù–µ –≤–∏—Å—Ç–∞—á–∞—î –µ–Ω–µ—Ä–≥—ñ—ó (–ø–æ—Ç—Ä—ñ–±–Ω–æ ${costText}). –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≤—Ç–æ.\nEnergy: ${links.energy}`);
    return;
  }

  const systemHint = await buildSystemHint(env, chatId);
  const modelOrder = String(env.MODEL_ORDER || "").trim();
  let out = "";

  try {
    if (modelOrder) {
      const merged = `${systemHint}\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${text}`;
      out = await askAnyModel(env, merged, { temperature: 0.6, max_tokens: 800 });
    } else {
      out = await think(env, text, systemHint);
    }
  } catch (e) {
    out = defaultAiReply();
  }

  await rememberUserMessage(env, chatId, text);
  await rememberBotMessage(env, chatId, out);

  if (spent.energy <= low) {
    const links = energyLinks(env, userId);
    out += `\n\n‚ö†Ô∏è –ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –µ–Ω–µ—Ä–≥—ñ—ó (${spent.energy}). –ö–µ—Ä—É–≤–∞–Ω–Ω—è: ${links.energy}`;
  }
  await TG.text(chatId, out);
}
