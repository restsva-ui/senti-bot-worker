// src/routes/aiEvolve.js
// –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–µ—Ä—Å—ñ–π "–º–æ–∑–∫—É" + –∞–≤—Ç–æ-–ø—Ä–æ–º–æ—É—Ç –∑ –¥–µ–∫—ñ–ª—å–∫–æ–º–∞ fallback-—Å–ø–æ—Å–æ–±–∞–º–∏.

import { listArchives, appendChecklist } from "../lib/kvChecklist.js";
// ‚úÖ –Ω–æ–≤–µ: –ø—Ä—è–º–∏–π —ñ–º–ø–æ—Ä—Ç –ø—Ä–æ–º–æ—É—Ç-—Ö–µ–Ω–¥–ª–µ—Ä–∞ —è–∫ –Ω–∞–¥—ñ–π–Ω–∏–π –ª–æ–∫–∞–ª—å–Ω–∏–π fallback
import { handleBrainPromote } from "./brainPromote.js";

const json = (o, status = 200) =>
  new Response(JSON.stringify(o, null, 2), {
    status,
    headers: { "content-type": "application/json; charset=utf-8" },
  });

// –ê–±—Å–æ–ª—é—Ç–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥ baseOrigin + –ø—ñ–¥–∫–ª–µ—é—î–º–æ —Å–µ–∫—Ä–µ—Ç
const withSecFrom = (env, baseOrigin, path) => {
  const u = new URL(path, baseOrigin);
  const s = env.WEBHOOK_SECRET || "";
  if (s) u.searchParams.set("s", s);
  return u.toString();
};

async function safeJson(url, init) {
  try {
    const r = await fetch(url, init);
    const text = await r.text();
    let d = {};
    try { d = JSON.parse(text); } catch { d = { _raw: text }; }
    return { ok: r.ok, status: r.status, data: d, url: typeof url === "string" ? url : url.toString() };
  } catch (e) {
    return { ok: false, status: 0, data: { error: String(e) }, url: typeof url === "string" ? url : url.toString() };
  }
}

async function getCurrentKey(env, origin) {
  const u = withSecFrom(env, origin, "/api/brain/current");
  const r = await safeJson(u);
  // –æ—á—ñ–∫—É—î–º–æ { ok:true, current:"<key>" } –∞–±–æ { ok:true, key:"<key>" }
  return r.data?.current || r.data?.key || null;
}

export async function handleAiEvolve(req, env, url) {
  const p = url.pathname;

  // GET /ai/evolve/run ‚Äî –±–µ—Ä–µ 2 –æ—Å—Ç–∞–Ω–Ω—ñ –∞—Ä—Ö—ñ–≤–∏ —ñ –∑–∞–ø–∏—Å—É—î –∫–æ—Ä–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ —É —á–µ–∫–ª–∏—Å—Ç
  if (p === "/ai/evolve/run" && req.method === "GET") {
    const items = await listArchives(env);
    if (items.length < 2) {
      return json({ ok: false, error: "not_enough_archives", total: items.length }, 400);
    }
    const [current, previous] = [items[0], items[1]]; // –≤—ñ–¥ –Ω–æ–≤—ñ—à–æ–≥–æ –¥–æ —Å—Ç–∞—Ä—ñ—à–æ–≥–æ
    const msg = `üß† evolution: ${previous} > ${current}`;
    await appendChecklist(env, msg);
    return json({ ok: true, message: "evolution summary saved", compared: { previous, current } });
  }

  // GET /ai/evolve/auto ‚Äî selftest ‚Üí promote (–Ω–∞–π–Ω–æ–≤—ñ—à–∏–π –Ω–µ-current –∞—Ä—Ö—ñ–≤)
  if (p === "/ai/evolve/auto" && req.method === "GET") {
    const mk = (path) => withSecFrom(env, url.origin, path);

    // 1) selftest
    const st = await safeJson(mk("/selftest/run"));
    const stOk = Boolean(st.ok && (st.data?.ok ?? true)); // —è–∫—â–æ selftest –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ ok ‚Äî –Ω–µ –±–ª–æ–∫—É—î–º–æ

    // 2) —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö—ñ–≤—ñ–≤
    const items = await listArchives(env);
    if (!items.length) {
      await appendChecklist(env, `‚ùå auto-promote skipped ‚Äî no archives`);
      return json({ ok: false, error: "no_archives" }, 400);
    }

    // 3) —É–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–º–æ—É—Ç—É —Ç–æ–≥–æ, —â–æ –≤–∂–µ —î current
    const currentKey = await getCurrentKey(env, url.origin).catch(() => null);

    // –æ–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à–∏–π key, —è–∫–∏–π –ù–ï –¥–æ—Ä—ñ–≤–Ω—é—î current
    let key = items.find((k) => k !== currentKey) || items[0];

    // 4) —Ä–æ–±–∏–º–æ —Å–ø—Ä–æ–±–∏ –ø—Ä–æ–º–æ—É—Ç—É
    const tries = [];

    // ‚úÖ try #0: –ü–†–Ø–ú–ò–ô –í–ò–ö–õ–ò–ö –•–ï–ù–î–õ–ï–†–ê (–±–µ–∑ –º–µ—Ä–µ–∂—ñ)
    try {
      const directUrl = new URL(mk("/api/brain/promote"));
      // –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é ‚Äî –ø–µ—Ä–µ–¥–∞–º–æ —Å–µ–∫—Ä–µ—Ç —É URL
      directUrl.searchParams.set("key", key);
      const directReq = new Request(directUrl.toString(), { method: "POST" });
      const r0 = await handleBrainPromote?.(directReq, env, directUrl);
      if (r0) {
        const status = r0.status;
        const data = await r0.clone().json().catch(async () => ({ _raw: await r0.text() }));
        tries.push({ method: "DIRECT_HANDLER", status, ok: status < 400, data: ("error" in data) ? undefined : undefined });
        if (status < 400) {
          const line = `üß† auto-promote success ‚Üí ${key} [DIRECT ${status}]${stOk ? "" : " (selftest:fail)"}`;
          await appendChecklist(env, line);
          return json({ ok: true, selftest_ok: stOk, promoted: data?.promoted || key, status, method: "DIRECT" });
        }
      } else {
        tries.push({ method: "DIRECT_HANDLER", status: 0, ok: false });
      }
    } catch (e) {
      tries.push({ method: "DIRECT_HANDLER", status: 0, ok: false, note: String(e) });
    }

    // try #1: GET —ñ–∑ query
    if (key) {
      const getUrl = mk(`/api/brain/promote?key=${encodeURIComponent(key)}`);
      const r1 = await safeJson(getUrl);
      tries.push({ method: "GET_QUERY_DEFAULT", url: r1.url, status: r1.status, ok: r1.ok });
      if (r1.ok) {
        const line = `üß† auto-promote success ‚Üí ${key} [GET_QUERY ${r1.status}]${stOk ? "" : " (selftest:fail)"}`;
        await appendChecklist(env, line);
        return json({ ok: true, selftest_ok: stOk, promoted: r1.data?.promoted || key, status: r1.status, method: "GET_QUERY" });
      }
    }

    // try #2: POST x-www-form-urlencoded
    {
      const postFormUrl = mk("/api/brain/promote");
      const r2 = await safeJson(postFormUrl, {
        method: "POST",
        headers: { "content-type": "application/x-www-form-urlencoded" },
        body: new URLSearchParams({ key }),
      });
      tries.push({ method: "POST_FORM", url: r2.url, status: r2.status, ok: r2.ok });
      if (r2.ok) {
        const line = `üß† auto-promote success ‚Üí ${key} [POST_FORM ${r2.status}]${stOk ? "" : " (selftest:fail)"}`;
        await appendChecklist(env, line);
        return json({ ok: true, selftest_ok: stOk, promoted: r2.data?.promoted || key, status: r2.status, method: "POST_FORM" });
      }
    }

    // try #3: POST JSON
    {
      const postJsonUrl = mk("/api/brain/promote");
      const r3 = await safeJson(postJsonUrl, {
        method: "POST",
        headers: { "content-type": "application/json" },
        body: JSON.stringify({ key }),
      });
      tries.push({ method: "POST_JSON", url: r3.url, status: r3.status, ok: r3.ok });
      if (r3.ok) {
        const line = `üß† auto-promote success ‚Üí ${key} [POST_JSON ${r3.status}]${stOk ? "" : " (selftest:fail)"}`;
        await appendChecklist(env, line);
        return json({ ok: true, selftest_ok: stOk, promoted: r3.data?.promoted || key, status: r3.status, method: "POST_JSON" });
      }

      // –£—Å—ñ —Å–ø—Ä–æ–±–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—è ‚Äî –ª–æ–≥ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      const line =
        `‚ö†Ô∏è auto-promote fail ‚Üí ${key} ` +
        `[${tries.map(t => `${t.method} ${t.status}`).join(" ¬∑ ")}]` +
        (stOk ? "" : " (selftest:fail)");
      await appendChecklist(env, line);

      return json(
        {
          ok: false,
          selftest_ok: stOk,
          promoted: key,
          status: r3.status,
          method: "FAILED",
          tried: tries,
          current: currentKey || null,
        },
        500
      );
    }
  }

  return null;
}