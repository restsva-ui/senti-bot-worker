// src/routes/aiEvolve.js
// –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–µ—Ä—Å—ñ–π "–º–æ–∑–∫—É" + –∞–≤—Ç–æ-–ø—Ä–æ–º–æ—É—Ç –∑ –¥–µ–∫—ñ–ª—å–∫–æ–º–∞ fallback-—Å–ø–æ—Å–æ–±–∞–º–∏.

import { listArchives, appendChecklist } from "../lib/kvChecklist.js";

const json = (o, status = 200) =>
  new Response(JSON.stringify(o, null, 2), {
    status,
    headers: { "content-type": "application/json; charset=utf-8" },
  });

/** –ê–±—Å–æ–ª—é—Ç–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥ baseOrigin + (–∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ) –ø—ñ–¥–∫–ª–µ—é—î–º–æ —Å–µ–∫—Ä–µ—Ç ?s= */
const withSecFrom = (env, baseOrigin, path) => {
  const u = new URL(path, baseOrigin);
  const s = env.WEBHOOK_SECRET || "";
  if (s && !u.searchParams.has("s")) u.searchParams.set("s", s);
  return u.toString();
};

async function safeJson(url, init) {
  try {
    const r = await fetch(url, {
      // –Ω–µ–≤–µ–ª–∏—á–∫—ñ –¥–µ—Ñ–æ–ª—Ç–∏, —è–∫—ñ –Ω–µ –∑–∞–≤–∞–∂–∞—é—Ç—å –ø–µ—Ä–µ–æ–∑–Ω–∞—á–∏—Ç–∏ –≤ init
      headers: { accept: "application/json", ...(init?.headers || {}) },
      ...init,
    });
    const d = await r.json().catch(() => ({}));
    return {
      ok: r.ok,
      status: r.status,
      data: d,
      url: typeof url === "string" ? url : url.toString(),
    };
  } catch (e) {
    return {
      ok: false,
      status: 0,
      data: { error: String(e) },
      url: typeof url === "string" ? url : url.toString(),
    };
  }
}

async function getCurrentKey(env, origin) {
  const u = withSecFrom(env, origin, "/api/brain/current");
  const r = await safeJson(u);
  // –æ—á—ñ–∫—É—î–º–æ { ok:true, current:"<key>" } –∞–±–æ { ok:true, key:"<key>" }
  return r.data?.current || r.data?.key || null;
}

export async function handleAiEvolve(req, env, url) {
  const p = url.pathname;

  // GET /ai/evolve/run ‚Äî –±–µ—Ä–µ 2 –æ—Å—Ç–∞–Ω–Ω—ñ –∞—Ä—Ö—ñ–≤–∏ —ñ –∑–∞–ø–∏—Å—É—î –∫–æ—Ä–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ —É —á–µ–∫–ª–∏—Å—Ç
  if (p === "/ai/evolve/run" && req.method === "GET") {
    const items = await listArchives(env);
    if (!Array.isArray(items) || items.length < 2) {
      return json(
        { ok: false, error: "not_enough_archives", total: items?.length || 0 },
        400
      );
    }
    // –æ—á—ñ–∫—É—î–º–æ, —â–æ listArchives –ø–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥ –Ω–æ–≤—ñ—à–æ–≥–æ –¥–æ —Å—Ç–∞—Ä—ñ—à–æ–≥–æ
    const [current, previous] = [items[0], items[1]];
    const msg = `üß† evolution: ${previous} > ${current}`;
    await appendChecklist(env, msg);
    return json({
      ok: true,
      message: "evolution summary saved",
      compared: { previous, current },
    });
  }

  // GET /ai/evolve/auto ‚Äî selftest ‚Üí promote (–Ω–∞–π–Ω–æ–≤—ñ—à–∏–π –Ω–µ-current –∞—Ä—Ö—ñ–≤)
  if (p === "/ai/evolve/auto" && req.method === "GET") {
    const mk = (path) => withSecFrom(env, url.origin, path);

    // 1) selftest (—ñ–∑ —Å–µ–∫—Ä–µ—Ç–æ–º)
    const st = await safeJson(mk("/selftest/run"));
    const stOk = !!st.ok && !!st.data?.ok;

    // 2) —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö—ñ–≤—ñ–≤
    const items = await listArchives(env);
    if (!Array.isArray(items) || items.length === 0) {
      const line = "‚ùå auto-promote skipped ‚Äî no archives";
      await appendChecklist(env, line);
      return json({ ok: false, error: "no_archives" }, 400);
    }

    // 3) –≤–∏–∑–Ω–∞—á–∞—î–º–æ current —ñ –æ–±–∏—Ä–∞—î–º–æ –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ –ø—Ä–æ–º–æ—É—Ç
    const currentKey = await getCurrentKey(env, url.origin).catch(() => null);

    // –ø–µ—Ä—à–∏–π, —â–æ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ current; —è–∫—â–æ –≤—Å—ñ –æ–¥–Ω–∞–∫–æ–≤—ñ ‚Äî –Ω–µ–º–∞—î —Å–µ–Ω—Å—É –ø—Ä–æ–º–æ—É—Ç–∏—Ç–∏
    let key = items.find((k) => k && k !== currentKey) || null;

    if (!key) {
      const line = `‚ÑπÔ∏è auto-promote skipped ‚Äî nothing new to promote (current=${currentKey || "null"})`;
      await appendChecklist(env, line);
      return json(
        { ok: true, skipped: true, reason: "nothing_new", current: currentKey },
        200
      );
    }

    // 4) —Ä–æ–±–∏–º–æ –∫—ñ–ª—å–∫–∞ —Å–ø—Ä–æ–± –ø—Ä–æ–º–æ—É—Ç—É
    const tries = [];

    // try #1: GET —ñ–∑ query (?key=...)
    {
      const getUrl = mk(`/api/brain/promote?key=${encodeURIComponent(key)}`);
      const r1 = await safeJson(getUrl);
      tries.push({
        method: "GET_QUERY_DEFAULT",
        url: r1.url,
        status: r1.status,
        ok: r1.ok,
      });
      if (r1.ok) {
        const line = `üß† auto-promote success ‚Üí ${key} [GET_QUERY ${r1.status}]${
          stOk ? "" : " (selftest:fail)"
        }`;
        await appendChecklist(env, line);
        return json({
          ok: true,
          selftest_ok: stOk,
          promoted: r1.data?.promoted || key,
          status: r1.status,
          method: "GET_QUERY",
        });
      }
    }

    // try #2: POST x-www-form-urlencoded
    {
      const postFormUrl = mk("/api/brain/promote");
      const r2 = await safeJson(postFormUrl, {
        method: "POST",
        headers: { "content-type": "application/x-www-form-urlencoded" },
        body: new URLSearchParams({ key }),
      });
      tries.push({
        method: "POST_FORM",
        url: r2.url,
        status: r2.status,
        ok: r2.ok,
      });
      if (r2.ok) {
        const line = `üß† auto-promote success ‚Üí ${key} [POST_FORM ${r2.status}]${
          stOk ? "" : " (selftest:fail)"
        }`;
        await appendChecklist(env, line);
        return json({
          ok: true,
          selftest_ok: stOk,
          promoted: r2.data?.promoted || key,
          status: r2.status,
          method: "POST_FORM",
        });
      }
    }

    // try #3: POST JSON
    {
      const postJsonUrl = mk("/api/brain/promote");
      const r3 = await safeJson(postJsonUrl, {
        method: "POST",
        headers: { "content-type": "application/json" },
        body: JSON.stringify({ key }),
      });
      tries.push({
        method: "POST_JSON",
        url: r3.url,
        status: r3.status,
        ok: r3.ok,
      });
      if (r3.ok) {
        const line = `üß† auto-promote success ‚Üí ${key} [POST_JSON ${r3.status}]${
          stOk ? "" : " (selftest:fail)"
        }`;
        await appendChecklist(env, line);
        return json({
          ok: true,
          selftest_ok: stOk,
          promoted: r3.data?.promoted || key,
          status: r3.status,
          method: "POST_JSON",
        });
      }

      // –£—Å—ñ —Å–ø—Ä–æ–±–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—è ‚Äî –ª–æ–≥ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      const line =
        `‚ö†Ô∏è auto-promote fail ‚Üí ${key} ` +
        `[${tries.map((t) => `${t.method} ${t.status}`).join(" ¬∑ ")}]` +
        (stOk ? "" : " (selftest:fail)");
      await appendChecklist(env, line);

      return json(
        {
          ok: false,
          selftest_ok: stOk,
          promoted: key,
          status: r3.status,
          method: "FAILED",
          tried: tries,
          current: currentKey || null,
        },
        500
      );
    }
  }

  return null;
}