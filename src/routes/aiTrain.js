// src/routes/aiTrain.js
import { readChecklist, listArchives, appendChecklist } from "../lib/kvChecklist.js";
import { json } from "../utils/respond.js";

/**
 * /ai/train/analyze ‚Äî —á–∏—Ç–∞—î checklist —ñ –∞—Ä—Ö—ñ–≤–∏, –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç
 * /ai/train/auto ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–æ–º–æ—Ç—É—î –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π –º–æ–∑–æ–∫
 */
export async function handleAiTrain(req, env, url) {
  const p = url.pathname;

  // --- /ai/train/analyze ---
  if (p === "/ai/train/analyze") {
    const checklist = await readChecklist(env);
    const archives = await listArchives(env);

    const lines = checklist.split("\n").slice(-15);
    const greens = lines.filter(l => /–∑–µ–ª–µ–Ω|green|‚úÖ|success|ok/i.test(l));

    const report = {
      ok: true,
      total_archives: archives.length,
      last_logs: lines,
      green_deploys: greens.length,
      last_green: greens.at(-1) || "‚Äî",
    };

    return json(report);
  }

  // --- /ai/train/auto ---
  if (p === "/ai/train/auto") {
    const checklist = await readChecklist(env);
    const archives = await listArchives(env);
    const greens = checklist.split("\n").filter(l => /–∑–µ–ª–µ–Ω|green|‚úÖ|success|ok/i.test(l));
    const last = archives.at(-1);

    if (!last) {
      await appendChecklist(env, "‚ö†Ô∏è auto-train: –∞—Ä—Ö—ñ–≤—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
      return json({ ok: false, error: "no archives found" }, 404);
    }

    const stable = greens.length > 0 && /success|ok|‚úÖ/.test(greens.at(-1));

    if (stable) {
      await env.CHECKLIST_KV.put("brain:current", last);
      await appendChecklist(env, `üß† auto-promote success ‚Üí ${last}`);
      return json({ ok: true, promoted: last });
    } else {
      await appendChecklist(env, "‚ö†Ô∏è auto-train: –Ω–µ–º–∞—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ –¥–µ–ø–ª–æ—é");
      return json({ ok: false, reason: "no stable deploys found" });
    }
  }

  return null;
}