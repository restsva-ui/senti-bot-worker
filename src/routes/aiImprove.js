// src/routes/aiImprove.js
// –ù—ñ—á–Ω–∏–π –∞–≥–µ–Ω—Ç: —á–∏—Ç–∞—î –∫–æ—Ä–æ—Ç–∫—É –ø–∞–º'—è—Ç—å LIKES_KV, —Ä–æ–±–∏—Ç—å —Å—Ç–∏—Å–ª–∏–π –∞–Ω–∞–ª—ñ–∑,
// –∑–±–µ—Ä—ñ–≥–∞—î —ñ–Ω—Å–∞–π—Ç–∏ —É STATE_KV —ñ (–æ–ø—Ü—ñ–π–Ω–æ) –ø–∏—à–µ –Ω–æ—Ç–∞—Ç–∫—É —É CHECKLIST_KV.

import { askAnyModel } from "../lib/modelRouter.js";
import { appendChecklist as appendToChecklist } from "../lib/kvChecklist.js";

const INSIGHT_TTL = 60 * 60 * 24 * 14; // 14 –¥–Ω—ñ–≤
const MEM_PREFIX  = "u:";              // –∑ memory.js: keyFor(chatId) -> u:<chatId>:mem

const json = (data, status = 200) =>
  new Response(JSON.stringify(data, null, 2), {
    status,
    headers: { "content-type": "application/json; charset=utf-8" },
  });

function todayUTC() {
  const d = new Date();
  return new Date(Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate()))
    .toISOString()
    .slice(0, 10);
}

async function kvGetJSON(kv, key, defVal = null) {
  try {
    const raw = await kv.get(key);
    return raw ? JSON.parse(raw) : defVal;
  } catch {
    return defVal;
  }
}
async function kvPutJSON(kv, key, val, ttlSec) {
  const body = JSON.stringify(val);
  await kv.put(key, body, ttlSec ? { expirationTtl: ttlSec } : undefined);
}

function buildSystemHint() {
  return (
    "–¢–∏ ‚Äî –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –Ω—ñ—á–Ω–∏–π –∞–≥–µ–Ω—Ç Senti. " +
    "–û—Ç—Ä–∏–º–∞—î—à —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –¥—ñ–∞–ª–æ–≥—É (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á/–±–æ—Ç). " +
    "–ü–æ–≤–µ—Ä–Ω–∏ –∫–æ—Ä–æ—Ç–∫—ñ —ñ–Ω—Å–∞–π—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —É JSON-—Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
    "{ \"summary\": \"1-2 —Ä–µ—á–µ–Ω–Ω—è —Å—É—Ç—ñ\", " +
    "\"tone\": \"—è–∫—ñ –≤—ñ–¥—á—É—Ç—Ç—è/—Ç–æ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\", " +
    "\"pain_points\": [\"–∫–ª—é—á–æ–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏\"], " +
    "\"ideas\": [\"—â–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö\"], " +
    "\"rules\": [\"–ª–∞–∫–æ–Ω—ñ—á–Ω—ñ –ø–æ—Ä–∞–¥–∏ –±–æ—Ç—É, –º–∞–∫—Å–∏–º—É–º 5\"] }\n" +
    "–ë–µ–∑ –∑–∞–π–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É, –ª–∏—à–µ –≤–∞–ª—ñ–¥–Ω–∏–π JSON."
  );
}

async function analyzeOneUser(env, chatId, state) {
  const messages = (state?.messages || []).slice(-20);
  if (messages.length === 0) return null;

  // –°—Ç–∏—Å–Ω–µ–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —É –ø–ª–æ—Å–∫–∏–π —Ç–µ–∫—Å—Ç (—Ä–æ–ª—å: —Ç–µ–∫—Å—Ç)
  const compact = messages
    .map((m) => `${m.role === "user" ? "U" : "B"}: ${m.text}`)
    .join("\n")
    .slice(0, 8000); // –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤

  const prompt =
    "–û—Å—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥—ñ–∞–ª–æ–≥—É (U ‚Äî user, B ‚Äî bot):\n\n" + compact;

  let analysis;
  try {
    const out = await askAnyModel(env, `${buildSystemHint()}\n\n${prompt}`, {
      temperature: 0.2,
      max_tokens: 600,
    });
    // –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –¥—ñ–∞–≥-—Ç–µ–≥ —É –∫—ñ–Ω—Ü—ñ ‚Äî –≤–∏—Ä—ñ–∂–µ–º–æ –±–ª–æ–∫ —É \n\n[via ...]
    const clean = out.replace(/\n+\[via[\s\S]*$/i, "").trim();
    analysis = JSON.parse(clean);
  } catch (e) {
    analysis = {
      summary: "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –∞–Ω–∞–ª—ñ–∑—É.",
      tone: "–Ω–µ–≤—ñ–¥–æ–º–∏–π",
      pain_points: [],
      ideas: [],
      rules: ["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–æ —Ç–∞ –∫–æ—Ä–æ—Ç–∫–æ."],
      _error: String(e?.message || e),
    };
  }

  return {
    chatId,
    date: todayUTC(),
    analysis,
  };
}

async function listUserKeys(likesKV, cursor = undefined) {
  // Cloudflare KV: list({ prefix, cursor })
  const res = await likesKV.list({ prefix: MEM_PREFIX, cursor });
  return res; // {keys:[{name},..], cursor, list_complete}
}

async function putInsight(env, key, val) {
  if (!env.STATE_KV) return;
  await kvPutJSON(env.STATE_KV, key, val, INSIGHT_TTL);
}

// –ø–∏—à–µ–º–æ —É –≤–∏–¥–∏–º–∏–π "service:checklist" —á–µ—Ä–µ–∑ –∑–∞–≥–∞–ª—å–Ω—É —É—Ç–∏–ª—ñ—Ç—É
async function logChecklist(env, text) {
  try { await appendToChecklist(env, text); } catch {}
}

// –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —á–∞—Ç—ñ–≤ (–∫–ª—é—á—ñ u:<chatId>:mem)
async function countChats(env) {
  if (!env.LIKES_KV) return 0;
  let cursor, cnt = 0;
  do {
    const page = await env.LIKES_KV.list({ prefix: MEM_PREFIX, cursor });
    for (const k of page.keys || []) {
      if (k.name.endsWith(":mem")) cnt++;
    }
    cursor = page.cursor;
    if (page.list_complete) break;
  } while (cursor);
  return cnt;
}

/**
 * –ó–∞–ø—É—Å–∫ –Ω—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: –ø—Ä–æ—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ LIKES_KV, —Ä–æ–±–∏—Ç—å —ñ–Ω—Å–∞–π—Ç–∏ –Ω–∞ –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
 * –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–æ—Ç–∫–∏–π –ø—ñ–¥—Å—É–º–æ–∫.
 */
export async function runNightlyImprove(env, limitPerRun = 50) {
  if (!env.LIKES_KV) return { ok: false, error: "LIKES_KV missing" };

  let cursor;
  let processed = 0;
  const added = [];

  scan: while (true) {
    const page = await listUserKeys(env.LIKES_KV, cursor);
    cursor = page.cursor;
    for (const k of page.keys || []) {
      // –±–µ—Ä–µ–º–æ –ª–∏—à–µ –∫–ª—é—á—ñ –ø–∞–º'—è—Ç—ñ –∑ –ø–æ—Å—Ç—Ñ–∏–∫—Å–æ–º ":mem"
      if (!k.name.endsWith(":mem")) continue;

      // chatId –º—ñ–∂ 'u:' —Ç–∞ ':mem'
      const m = k.name.match(/^u:(.+?):mem$/);
      const chatId = m?.[1];
      if (!chatId) continue;

      const state = await kvGetJSON(env.LIKES_KV, k.name, null);
      const insight = await analyzeOneUser(env, chatId, state);
      if (insight) {
        const dailyKey  = `insight:${insight.date}:${chatId}`;
        const latestKey = `insight:latest:${chatId}`;
        await putInsight(env, dailyKey,  insight);
        await putInsight(env, latestKey, insight);
        added.push(latestKey);
      }

      processed++;
      if (processed >= limitPerRun) break scan;
    }
    if (page.list_complete) break;
  }

  // –≥–ª–æ–±–∞–ª—å–Ω–∞ –∑–≤–µ–¥–µ–Ω–∞ –Ω–æ—Ç–∞ (–≤–∏–¥–∏–º–∞ —É —á–µ–∫–ª–∏—Å—Ç—ñ)
  await logChecklist(
    env,
    `üåô nightly @ ${new Date().toISOString()} ‚Äî insights:${added.length}, scanned:${processed}`
  );

  return { ok: true, scanned: processed, insights: added.length };
}

// –ø—Ä–æ—Å—Ç–∏–π guard —Å–µ–∫—Ä–µ—Ç—É
function ensureSecret(env, url) {
  if (!env.WEBHOOK_SECRET) return true;
  return url.searchParams.get("s") === env.WEBHOOK_SECRET;
}

/** HTTP-—Ä–æ—É—Ç–∏: /ai/improve (POST), /ai/improve/auto, /ai/improve/run */
export async function handleAiImprove(req, env, url) {
  const path = (url.pathname || "").toLowerCase();

  if (!path.startsWith("/ai/improve")) return null;
  if (!ensureSecret(env, url)) return json({ ok: false, error: "unauthorized" }, 401);

  // –ü—ñ–¥–∫–∞–∑–∫–∞ –¥–ª—è GET /ai/improve
  if (path === "/ai/improve" && req.method === "GET") {
    const chats = await countChats(env);
    return json({ ok: true, hint: "POST here to trigger night agent", chats });
  }

  // –ö–Ω–æ–ø–∫–∞ –∑ —á–µ–∫–ª–∏—Å—Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î POST /ai/improve
  if (path === "/ai/improve" && req.method === "POST") {
    const total = await countChats(env);
    await logChecklist(env, `üåô night-agent: start (chats:${total})`);
    try {
      const res = await runNightlyImprove(env, 80);
      await logChecklist(env, `üåô night-agent: done ok=${res.ok} insights=${res.insights} scanned=${res.scanned}`);
      return json({ ok: true, ...res });
    } catch (e) {
      await logChecklist(env, `üåô night-agent: fail ${String(e?.message || e)}`);
      return json({ ok: false, error: String(e?.message || e) }, 500);
    }
  }

  // –°—É–º—ñ—Å–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏
  if ((path === "/ai/improve/run" || path === "/ai/improve/auto") && (req.method === "GET" || req.method === "POST")) {
    const res = await runNightlyImprove(env, 80);
    return json(res, res.ok ? 200 : 500);
  }

  return json({ ok: false, error: "not found" }, 404);
}