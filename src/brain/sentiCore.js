// src/brain/sentiCore.js
// Senti Core ‚Äî –∞–≤—Ç–æ–Ω–æ–º–Ω–∞ –ª–æ–≥—ñ–∫–∞: STATUT ‚Üí –¥—ñ—è ‚Üí –ª–æ–≥ —É —á–µ–∫–ª–∏—Å—Ç

import {
  appendChecklist,
  readChecklist,
  readStatut,
} from "../lib/kvChecklist.js";
import { logDeploy } from "../lib/audit.js";

function safe(val, max = 160) {
  const s = String(val ?? "");
  return s.length > max ? s.slice(0, max) + "‚Ä¶" : s;
}

export const SentiCore = {
  // –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∏–π —Å—Ç–∞—Ä—Ç (—Ä—É—á–Ω–∏–π –∞–±–æ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É cron)
  async boot(env, note = "manual") {
    const statut = await readStatut(env);
    await appendChecklist(env, `ü§ñ brain boot (${note}), statut=${statut ? "present" : "missing"}`);
    return { statut_len: (statut || "").length };
  },

  // –ü–µ—Ä–∏–æ–¥–∏—á–Ω–∏–π self-check (cron)
  async selfCheck(env) {
    const statut = await readStatut(env);
    const checklist = await readChecklist(env);

    // –ü—Ä–æ—Å—Ç–∏–π ¬´health¬ª –º–∞—Ä–∫–µ—Ä —É —á–µ–∫–ª–∏—Å—Ç
    await appendChecklist(env, `ü§ñ self-check ok | statut:${statut ? "1" : "0"} | len=${(statut || "").length}`);

    // (–ú—ñ—Å—Ü–µ –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –ø—Ä–∞–≤–∏–ª –∑—ñ STATUT: –ø–∞—Ä—Å–∏–Ω–≥ —ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è)
    return {
      ok: true,
      statut_len: (statut || "").length,
      checklist_len: (checklist || "").length,
    };
  },

  // –ó–Ω—ñ–º–æ–∫ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç—ñ–≤)
  async snapshot(env) {
    const kvBinds = [
      "CHECKLIST_KV", "DEDUP_KV", "OAUTH_KV", "STATE_KV", "TODO_KV", "USER_OAUTH_KV",
    ].filter(k => env[k]).join(",");

    const vars = {
      SERVICE_HOST: env.SERVICE_HOST,
      TELEGRAM_ADMIN_ID: env.TELEGRAM_ADMIN_ID,
      DRIVE_FOLDER_ID: env.DRIVE_FOLDER_ID,
      DEPLOY_ID: env.DEPLOY_ID,
    };

    const line = `üì¶ env snapshot ‚Üí host=${safe(vars.SERVICE_HOST)} admin=${vars.TELEGRAM_ADMIN_ID} drive=${vars.DRIVE_FOLDER_ID} deploy=${vars.DEPLOY_ID} | kv=[${kvBinds}]`;
    await appendChecklist(env, line);
    return { kvBinds, vars };
  },

  // –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –¥–µ–ø–ª–æ–π (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è CI –∞–±–æ –≤—Ä—É—á–Ω—É)
  async markDeploy(env, info = {}) {
    const line = await logDeploy(env, { source: "brain", ...info });
    await appendChecklist(env, `üöÄ deploy ${safe(line, 200)}`);
    return { line };
  },
};