import { tgSendMessage, tgSendAction, tgGetFileUrl } from "./adapters/telegram.js";
import { aiText, aiVision } from "./ai/providers.js";

export async function handleUpdate(update, env, ctx) {
  try {
    const msg = update?.message || update?.edited_message || update?.channel_post || null;
    if (!msg?.chat?.id) {
      console.info("No message/chat in update");
      return;
    }

    const chatId = msg.chat.id;
    const textIn = (msg.text ?? "").trim();
    const captionIn = (msg.caption ?? "").trim();
    const hasPhoto = Array.isArray(msg.photo) && msg.photo.length > 0;
    const hasDoc = !!msg.document;

    // —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä ¬´–¥—Ä—É–∫—É—î¬ª
    try { await tgSendAction(chatId, "typing", env); } catch (e) { console.error("tgSendAction:", e?.message); }

    // /start
    if (textIn.startsWith("/start")) {
      const hello = [
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø Senti ‚Äî —Ç–≤—ñ–π —É–≤–∞–∂–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫.",
        "‚Ä¢ –ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–º –∫–æ—Ä–æ—Ç–∫–æ —ñ –ø–æ —Å—É—Ç—ñ.",
        "‚Ä¢ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —á–∏ PDF ‚Äî –æ–ø–∏—à—É —ñ –∑—Ä–æ–±–ª—é –≤–∏—Å–Ω–æ–≤–∫–∏.",
        "–°–ø—Ä–æ–±—É–π: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –¥—É–º–∫—É –∞–±–æ –∫–∏–Ω—å –∫–∞—Ä—Ç–∏–Ω–∫—É.",
      ].join("\n");
      await safeSend(chatId, hello, env, msg);
      return;
    }

    // –§–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç
    if (hasPhoto || hasDoc) {
      let fileId = null;
      let mime = null;

      if (hasPhoto) {
        fileId = msg.photo[msg.photo.length - 1]?.file_id; // –Ω–∞–π–±—ñ–ª—å—à–∞
        mime = "image/jpeg";
      } else {
        fileId = msg.document.file_id;
        mime = msg.document.mime_type || "application/octet-stream";
      }

      let fileUrl = null;
      try {
        fileUrl = await tgGetFileUrl(fileId, env);
        console.info("fileUrl:", fileUrl ? "ok" : "null");
      } catch (e) {
        console.error("tgGetFileUrl:", e?.message);
      }

      let bytes = null;
      if (fileUrl) {
        try {
          const res = await fetch(fileUrl);
          if (res.ok) bytes = await res.arrayBuffer();
          else console.error("download file status:", res.status);
        } catch (e) {
          console.error("download file:", e?.message);
        }
      }

      const answer = await aiVision(
        { bytes, mime, caption: captionIn || textIn || "" },
        env
      );
      await safeSend(chatId, answer, env, msg);
      return;
    }

    // –¢–µ–∫—Å—Ç
    if (textIn.length > 0) {
      const answer = await aiText(textIn, env);
      await safeSend(chatId, answer, env, msg);
      return;
    }

    // –ü–æ—Ä–æ–∂–Ω—ñ–π –∞–ø–¥–µ–π—Ç
    await safeSend(
      chatId,
      "–Ø –±–∞—á—É –∞–ø–¥–µ–π—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç—É –π –±–µ–∑ —Ñ–∞–π–ª—É. –ù–∞–ø–∏—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç.",
      env,
      msg
    );
  } catch (e) {
    console.error("handleUpdate fatal:", e?.message);
  }
}

async function safeSend(chatId, text, env, msg) {
  try {
    await tgSendMessage(chatId, text || "üòÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ—Ä–æ–∂–Ω—è, –∞–ª–µ —è –Ω–∞ –∑–≤‚Äô—è–∑–∫—É.", { reply_to_message_id: msg?.message_id }, env);
  } catch (e) {
    console.error("tgSendMessage:", e?.message);
  }
}