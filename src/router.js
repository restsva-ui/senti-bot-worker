// –†–æ—É—Ç–µ—Ä Telegram-–∞–ø–¥–µ–π—Ç—ñ–≤: /start, –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç, –∫–Ω–æ–ø–∫–∏

import { tgSendMessage, tgSendAction, tgGetFileUrl } from './adapters/telegram.js';
import { aiText, aiVision } from './ai/providers.js';

export async function handleUpdate(update, env) {
  const msg = update.message || update.edited_message || null;
  const cq = update.callback_query || null;

  // –Ø–∫—â–æ –ø—Ä–∏–π—à–ª–∞ callback_query ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–º–æ, —â–æ–±–∏ –Ω–µ –≤–∏—Å—ñ–ª–æ "–≥–æ–¥–∏–Ω–Ω–∏–∫"
  if (cq) {
    // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É, —è–∫—â–æ –±—É–¥–µ –º–µ–Ω—é.
    return new Response('ok');
  }

  if (!msg || !msg.chat) return new Response('ok');

  const chatId = msg.chat.id;
  const text = (msg.text ?? msg.caption ?? '').trim();

  // --- /start ---
  if (text.startsWith('/start')) {
    const hello =
      'üëã –ü—Ä–∏–≤—ñ—Ç! –Ø Senti ‚Äî —Ç–≤—ñ–π —É–≤–∞–∂–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫.\n' +
      '‚Ä¢ –ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–º –∫–æ—Ä–æ—Ç–∫–æ —ñ –ø–æ —Å—É—Ç—ñ.\n' +
      '‚Ä¢ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —á–∏ PDF ‚Äî –æ–ø–∏—à—É —ñ –∑—Ä–æ–±–ª—é –≤–∏—Å–Ω–æ–≤–∫–∏.\n' +
      '–°–ø—Ä–æ–±—É–π: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –¥—É–º–∫—É –∞–±–æ –∫–∏–Ω—å –∫–∞—Ä—Ç–∏–Ω–∫—É.';
    await tgSendMessage(env, chatId, hello);
    return new Response('ok');
  }

  // --- –ú–µ–¥—ñ—è –∑ –ø—ñ–¥–ø–∏—Å–æ–º (–ø–æ–∫–∏ —â–æ —è–∫ –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç) ---
  if (msg.photo || msg.document) {
    await tgSendAction(env, chatId, 'typing');
    const prompt = text || '–û–ø–∏—à–∏ —Ü–µ –ø—Ä–æ—Å—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.';
    const reply = await aiText({ prompt, env });
    await tgSendMessage(env, chatId, reply);
    return new Response('ok');
  }

  // --- –ó–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç ---
  if (text) {
    await tgSendAction(env, chatId, 'typing');
    const reply = await aiText({ prompt: text, env });
    await tgSendMessage(env, chatId, reply);
    return new Response('ok');
  }

  // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –∑ –≤–∏—â–µ ‚Äî –º–æ–≤—á–∫–∏ –æ–∫
  return new Response('ok');
}