// src/router.js

/**
 * –†–æ—É—Ç–µ—Ä –¥–ª—è –Ω–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥ —ñ –∫–Ω–æ–ø–æ–∫:
 *  - /menu        ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏
 *  - /likepanel   ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–Ω–µ–ª—å –∑ –ª–∞–π–∫–æ–º/–¥–∏—Å–ª–∞–π–∫–æ–º
 *  - /stats       ‚Äî –∑–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å—ñ—Ö –ø–∞–Ω–µ–ª—è—Ö —É —á–∞—Ç—ñ
 *  - callback_query: "like", "dislike", "cmd:likepanel", "cmd:stats"
 *
 * –ü—Ä–∞—Ü—é—î —Ä–∞–∑–æ–º —ñ–∑ src/index.js (–¥–µ handleBasic –æ–±—Ä–æ–±–ª—è—î /start, /ping, kv, echo).
 */

import {
  sendMessage,
  editMessageText,
  answerCallbackQuery,
} from "./lib/tg.js";

/** @typedef {import('@cloudflare/workers-types').KVNamespace} KVNamespace */

/**
 * –ì–æ–ª–æ–≤–Ω–∏–π –≤—Ö—ñ–¥: –æ—Ç—Ä–∏–º—É—î update, –æ—Ç–æ—á—É—î try/catch —ñ —Ä–æ—É—Ç–∏—Ç—å.
 * –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è fire-and-forget –∑ index.js
 * @param {Env} env
 * @param {any} update
 */
export async function routeUpdate(env, update) {
  try {
    if (update.callback_query) {
      await handleCallback(env, update.callback_query);
      return;
    }
    if (update.message) {
      await handleMessage(env, update.message);
      return;
    }
  } catch (e) {
    console.error("routeUpdate:", e?.stack || e);
  }
}

/**
 * –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Ç—ñ–ª—å–∫–∏ –Ω–∞—à—ñ –Ω–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏)
 * @param {Env} env
 * @param {any} msg
 */
async function handleMessage(env, msg) {
  const chatId = msg.chat?.id;
  const text = (msg.text || "").trim();

  if (!chatId || !text) return;

  if (text === "/menu") {
    await showMenu(env, chatId);
    return;
  }

  if (text === "/likepanel") {
    await createLikePanel(env, chatId);
    return;
  }

  if (text === "/stats") {
    await sendStats(env, chatId);
    return;
  }

  // –Ü–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏/—Ç–µ–∫—Å—Ç–∏ –æ–±—Ä–æ–±–ª—è—î –±–∞–∑–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ —É handleBasic (index.js)
}

/**
 * –û–±—Ä–æ–±–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
 * @param {Env} env
 * @param {any} cb
 */
async function handleCallback(env, cb) {
  const data = cb.data || "";
  const chatId = cb.message?.chat?.id;
  const msgId = cb.message?.message_id;
  const cbId = cb.id;

  // –ë–µ–∑–ø–µ—á–Ω–µ ACK, —â–æ–± —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∫—Ä—É—Ç–∏–ª–æ—Å—å "–≥–æ–¥–∏–Ω–Ω–∏—á–æ–∫"
  const ack = (text = "‚úÖ") =>
    answerCallbackQuery(env, cbId, { text, show_alert: false }).catch(() => {});

  if (!chatId) {
    await ack();
    return;
  }

  // –ú–µ–Ω—é: –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –∫–Ω–æ–ø–∫—É
  if (data === "cmd:likepanel") {
    await ack("–°—Ç–≤–æ—Ä—é—é –ø–∞–Ω–µ–ª—å‚Ä¶");
    await createLikePanel(env, chatId);
    return;
  }
  if (data === "cmd:stats") {
    await ack("–ì–æ—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É‚Ä¶");
    await sendStats(env, chatId);
    return;
  }

  // –õ–∞–π–∫–∏
  if ((data === "like" || data === "dislike") && msgId) {
    await ack("–î—è–∫—É—é!");
    await updateLikes(env, chatId, msgId, data);
    return;
  }

  await ack();
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏
 */
async function showMenu(env, chatId) {
  const reply_markup = {
    inline_keyboard: [
      [{ text: "üëç –ü–∞–Ω–µ–ª—å –ª–∞–π–∫—ñ–≤", callback_data: "cmd:likepanel" }],
      [{ text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "cmd:stats" }],
    ],
  };

  await sendMessage(env, {
    chat_id: chatId,
    text: "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
    reply_markup,
  });
}

/**
 * –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–Ω–µ–ª—å –ª–∞–π–∫—ñ–≤ (–∫–Ω–æ–ø–∫–∏)
 */
async function createLikePanel(env, chatId) {
  const reply_markup = {
    inline_keyboard: [
      [
        { text: "üëç", callback_data: "like" },
        { text: "üëé", callback_data: "dislike" },
      ],
    ],
  };

  await sendMessage(env, {
    chat_id: chatId,
    text: "–ù–∞—Ç–∏—Å–Ω–∏, —â–æ–± –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏:",
    reply_markup,
  });
}

/**
 * –û–Ω–æ–≤–∏—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –ª–∞–π–∫—ñ–≤ —É KV —Ç–∞ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 */
async function updateLikes(env, chatId, messageId, kind /* 'like'|'dislike' */) {
  const kv = env.STATE;
  if (!kv) return;

  const key = `likes:${chatId}:${messageId}`;
  let obj = { like: 0, dislike: 0 };

  try {
    const raw = await kv.get(key);
    if (raw) obj = JSON.parse(raw);
  } catch (_) {}

  obj[kind] = (obj[kind] || 0) + 1;

  await kv.put(key, JSON.stringify(obj));

  // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∫–Ω–æ–ø–∫–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è)
  const text = `–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:\nüëç ${obj.like}   üëé ${obj.dislike}`;
  const reply_markup = {
    inline_keyboard: [
      [
        { text: "üëç", callback_data: "like" },
        { text: "üëé", callback_data: "dislike" },
      ],
    ],
  };

  await editMessageText(env, {
    chat_id: chatId,
    message_id: messageId,
    text,
    reply_markup,
  });
}

/**
 * –ó–≤–µ—Å—Ç–∏ –ø—Ä–æ—Å—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å—ñ—Ö –ø–∞–Ω–µ–ª—è—Ö –ª–∞–π–∫—ñ–≤ —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–∞—Ç—ñ
 */
async function sendStats(env, chatId) {
  const kv = env.STATE;
  if (!kv) {
    await sendMessage(env, {
      chat_id: chatId,
      text: "‚ùå KV (STATE) –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–æ ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
    });
    return;
  }

  const prefix = `likes:${chatId}:`;
  let totalLike = 0;
  let totalDislike = 0;

  try {
    let cursor = undefined;
    do {
      const { keys, cursor: next } = await kv.list({ prefix, cursor });
      for (const k of keys) {
        const raw = await kv.get(k.name);
        if (!raw) continue;
        try {
          const obj = JSON.parse(raw);
          totalLike += obj.like || 0;
          totalDislike += obj.dislike || 0;
        } catch {}
      }
      cursor = next;
    } while (cursor);
  } catch (e) {
    console.error("stats list error:", e?.stack || e);
  }

  const text = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç—É:\n\nüëç –í–ø–æ–¥–æ–±–∞–π–æ–∫: ${totalLike}\nüëé –î–∏–∑–ª–∞–π–∫—ñ–≤: ${totalDislike}`;
  await sendMessage(env, { chat_id: chatId, text });
}