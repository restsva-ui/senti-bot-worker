// –î—É–∂–µ –æ–±–µ—Ä–µ–∂–Ω–∏–π —Ä–æ—É—Ç–µ—Ä: –∑–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î.
// –ë–∞–≥–∞—Ç–æ –ª–æ–≥—ñ–≤, —â–æ–± –ª–æ–≤–∏—Ç–∏ –ø—Ä–∏—á–∏–Ω–∏ –º–æ–≤—á–∞–Ω–∫–∏.

import { tgSendMessage, tgSendAction, tgGetFileUrl } from "./adapters/telegram.js";
import { aiText, aiVision } from "./ai/providers.js";

export async function handleUpdate(update, env, ctx) {
  try {
    const msg = update?.message || update?.edited_message || null;
    if (!msg || !msg.chat) {
      console.info("No message in update (maybe callback_query, etc.)");
      return;
    }

    const chatId = msg.chat.id;
    const textIn = (msg.text ?? "").trim();
    const captionIn = (msg.caption ?? "").trim();
    const hasPhoto = Array.isArray(msg.photo) && msg.photo.length > 0;
    const hasDoc = !!msg.document;

    // –ó–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î–º–æ, —â–æ ¬´–¥—Ä—É–∫—É—î–º–æ¬ª
    try { await tgSendAction(chatId, "typing", env); } catch (e) {
      console.error("tgSendAction error:", e?.message);
    }

    // /start ‚Äî –¥—Ä—É–∂–Ω—î –≤—ñ—Ç–∞–Ω–Ω—è
    if (textIn.startsWith("/start")) {
      const hello = [
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø Senti ‚Äî —Ç–≤—ñ–π —É–≤–∞–∂–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫.",
        "‚Ä¢ –ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–º –∫–æ—Ä–æ—Ç–∫–æ —ñ –ø–æ —Å—É—Ç—ñ.",
        "‚Ä¢ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —á–∏ PDF ‚Äî –æ–ø–∏—à—É —ñ –∑—Ä–æ–±–ª—é –≤–∏—Å–Ω–æ–≤–∫–∏.",
        "–°–ø—Ä–æ–±—É–π: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –¥—É–º–∫—É –∞–±–æ –∫–∏–Ω—å –∫–∞—Ä—Ç–∏–Ω–∫—É.",
      ].join("\n");
      await safeSend(chatId, hello, env, msg);
      return;
    }

    // –§–æ—Ç–æ / –¥–æ–∫—É–º–µ–Ω—Ç
    if (hasPhoto || hasDoc) {
      let fileId = null;
      let mime = null;

      if (hasPhoto) {
        // –±–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å–Ω—É (–æ—Å—Ç–∞–Ω–Ω—è —É –º–∞—Å–∏–≤—ñ)
        fileId = msg.photo[msg.photo.length - 1]?.file_id;
        mime = "image/jpeg"; // TG –¥–ª—è photo –Ω–µ –ø—Ä–∏—Å–∏–ª–∞—î mime ‚Äî —Å—Ç–∞–≤–∏–º–æ –¥–µ—Ñ–æ–ª—Ç
      } else if (hasDoc) {
        fileId = msg.document.file_id;
        mime = msg.document.mime_type || "application/octet-stream";
      }

      let fileUrl = null;
      try {
        fileUrl = await tgGetFileUrl(fileId, env);
      } catch (e) {
        console.error("tgGetFileUrl error:", e?.message);
      }

      // –Ø–∫—â–æ –∑ —è–∫–æ—ó—Å—å –ø—Ä–∏—á–∏–Ω–∏ –Ω–µ –∑–º–æ–≥–ª–∏ –¥—ñ—Å—Ç–∞—Ç–∏ url –∞–±–æ –±–∞–π—Ç–∏ ‚Äî –¥–∞—î–º–æ —Å—Ç–∞–±—ñ–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      if (!fileUrl) {
        const fallback = [
          "üìù –ë–∞—á—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è/—Ñ–∞–π–ª.",
          "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä—è–º–∏–π URL –≤—ñ–¥ Telegram (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —ñ–Ω–æ–¥—ñ).",
          "–Ø –≤—Å–µ –æ–¥–Ω–æ –º–æ–∂—É –¥–∞—Ç–∏ –±–∞–∑–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –ù–∞–ø–∏—à–∏, —â–æ —Å–∞–º–µ —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞ —Ü—å–æ–º—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ/—É —Ñ–∞–π–ª—ñ.",
        ].join("\n");
        await safeSend(chatId, fallback, env, msg);
        return;
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏–º–æ –±–∞–π—Ç–∏ (–±–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö CV)
      let bytes = null;
      try {
        const res = await fetch(fileUrl);
        if (res.ok) bytes = await res.arrayBuffer();
      } catch (e) {
        console.error("download file error:", e?.message);
      }

      const visionReply = await aiVision(
        { bytes, mime, caption: captionIn || textIn || "" },
        env
      );
      await safeSend(chatId, visionReply, env, msg);
      return;
    }

    // –¢–µ–∫—Å—Ç
    if (textIn.length > 0) {
      const reply = await aiText(textIn, env);
      await safeSend(chatId, reply, env, msg);
      return;
    }

    // –í–∑–∞–≥–∞–ª—ñ –±–µ–∑ —Ç–µ–∫—Å—Ç—É/–º–µ–¥—ñ–∞
    await safeSend(
      chatId,
      "–Ø –±–∞—á—É –∞–ø–¥–µ–π—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç—É —Ç–∞ –±–µ–∑ —Ñ–∞–π–ª—É. –ù–∞–ø–∏—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç.",
      env,
      msg
    );
  } catch (e) {
    console.error("handleUpdate fatal:", e?.message);
  }
}

// –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑ –¥—Ä—É–∑–Ω—ñ–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –ø–æ–º–∏–ª–æ–∫
async function safeSend(chatId, text, env, msg) {
  try {
    await tgSendMessage(chatId, text, { reply_to_message_id: msg?.message_id }, env);
  } catch (e) {
    console.error("tgSendMessage error:", e?.message);
  }
}