// src/router.js

import { tgSendMessage, tgSendChatAction, tgGetFileUrl } from "./adapters/telegram.js";
import { aiText, aiVision } from "./ai/providers.js";

/** –ü—Ä–æ—Å—Ç–∏–π —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Ç—Ä—å–æ—Ö –º–æ–≤ */
function t(key, lang = "uk") {
  const L = (lang || "uk").startsWith("ru") ? "ru"
        : (lang || "uk").startsWith("uk") ? "uk"
        : "en";

  const dict = {
    uk: {
      hello: "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø Senti ‚Äî —Ç–≤—ñ–π —É–≤–∞–∂–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫.\n‚Ä¢ –ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–º –∫–æ—Ä–æ—Ç–∫–æ —ñ –ø–æ —Å—É—Ç—ñ.\n‚Ä¢ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —á–∏ PDF ‚Äî –æ–ø–∏—à—É —ñ –∑—Ä–æ–±–ª—é –≤–∏—Å–Ω–æ–≤–∫–∏.\n–°–ø—Ä–æ–±—É–π: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –¥—É–º–∫—É –∞–±–æ –∫–∏–Ω—å –∫–∞—Ä—Ç–∏–Ω–∫—É.",
      empty: "–ì–æ—Ç–æ–≤–æ! –Ø –æ—Ç—Ä–∏–º–∞–≤ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç —ñ –≤—ñ–¥–ø–æ–≤—ñ–º –ø—Ä–æ—Å—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:\n\n‚Ä¢ (–ø–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç)",
      typing: "–î—É–º–∞—é –Ω–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é‚Ä¶",
      seenNoUrl: "–ë–∞—á—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –∞–ª–µ –Ω–µ –æ—Ç—Ä–∏–º–∞–≤ –π–æ–≥–æ URL –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.",
      docSaved: "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ —Ñ–∞–π–ª. –°–ø—Ä–æ–±—É—é –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏‚Ä¶",
      oops: "–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.",
    },
    ru: {
      hello: "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Senti ‚Äî —Ç–≤–æ–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n‚Ä¢ –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–≤–µ—á—É –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ PDF ‚Äî –æ–ø–∏—à—É –∏ —Å–¥–µ–ª–∞—é –≤—ã–≤–æ–¥—ã.\n–ü–æ–ø—Ä–æ–±—É–π: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º—ã—Å–ª—å –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É.",
      empty: "–ì–æ—Ç–æ–≤–æ! –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—á—É –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:\n\n‚Ä¢ (–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å)",
      typing: "–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º‚Ä¶",
      seenNoUrl: "–í–∏–∂—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –µ–≥–æ URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
      docSaved: "–ó–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É—é –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å‚Ä¶",
      oops: "–ü—Ä–æ—Å—Ç–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
    },
    en: {
      hello: "üëã Hi! I‚Äôm Senti ‚Äî your concise assistant.\n‚Ä¢ Send text ‚Äî I‚Äôll answer briefly.\n‚Ä¢ Send a photo or PDF ‚Äî I‚Äôll describe it and summarize.\nTry it: just type a thought or drop an image.",
      empty: "Got it! I received your request and will reply in simple words:\n\n‚Ä¢ (empty request)",
      typing: "Thinking‚Ä¶",
      seenNoUrl: "I see an image, but didn‚Äôt get its URL for analysis.",
      docSaved: "File received. Let me analyze‚Ä¶",
      oops: "Sorry, something went wrong. Please try again.",
    },
  };

  return dict[L][key];
}

function pickLang(update) {
  // Telegram –∑–∞–∑–≤–∏—á–∞–π –ø–µ—Ä–µ–¥–∞—î language_code —É from.language_code
  return update?.message?.from?.language_code || "uk";
}

function getText(m) {
  if (!m) return "";
  if (typeof m.text === "string") return m.text.trim();
  if (m.caption) return String(m.caption).trim();
  return "";
}

export default {
  async fetch(request, env) {
    try {
      // (–û–ø—Ü—ñ–π–Ω–æ) –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç—É –≤–µ–±—Ö—É–∫–∞
      const secret = env.WEBHOOK_SECRET;
      if (secret) {
        const got = request.headers.get("x-telegram-bot-api-secret-token");
        if (got !== secret) {
          return new Response("Forbidden", { status: 403 });
        }
      }

      if (request.method !== "POST") {
        return new Response("ok", { status: 200 });
      }

      const update = await request.json().catch(() => ({}));
      const msg = update.message || update.edited_message || null;
      if (!msg) return new Response("ok", { status: 200 });

      const chatId = msg.chat?.id;
      const lang = pickLang({ message: msg });

      // /start
      const text = getText(msg);
      if (text?.startsWith("/start")) {
        await tgSendMessage(env, chatId, t("hello", lang));
        return new Response("ok", { status: 200 });
      }

      // PHOTO
      if (msg.photo && Array.isArray(msg.photo) && msg.photo.length) {
        // –±–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ (–æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç)
        const best = msg.photo[msg.photo.length - 1];
        const fileId = best.file_id;
        const url = await tgGetFileUrl(env, fileId);

        if (!url) {
          await tgSendMessage(env, chatId, t("seenNoUrl", lang), { reply_to_message_id: msg.message_id });
          return new Response("ok", { status: 200 });
        }

        await tgSendChatAction(env, chatId, "typing");
        const prompt = getText(msg) || "–û–ø–∏—à–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è";

        try {
          const result = await aiVision(url, env, { prompt, lang });
          const reply = (result && (result.summary || result.text || result.caption)) || t("oops", lang);
          await tgSendMessage(env, chatId, reply, { reply_to_message_id: msg.message_id });
        } catch (e) {
          console.error("aiVision error:", e);
          await tgSendMessage(env, chatId, t("oops", lang), { reply_to_message_id: msg.message_id });
        }

        return new Response("ok", { status: 200 });
      }

      // DOCUMENT (PDF / images)
      if (msg.document) {
        const fileId = msg.document.file_id;
        const mime = msg.document.mime_type || "";
        const url = await tgGetFileUrl(env, fileId);

        if (!url) {
          await tgSendMessage(env, chatId, t("seenNoUrl", lang), { reply_to_message_id: msg.message_id });
          return new Response("ok", { status: 200 });
        }

        await tgSendChatAction(env, chatId, "typing");

        // –î–ª—è PDF —Ç–∞ image/* –∑–∞–ø—É—Å–∫–∞—î–º–æ aiVision
        if (mime === "application/pdf" || mime.startsWith("image/")) {
          const prompt = getText(msg) || "–ó—Ä–æ–±–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫";
          try {
            const result = await aiVision(url, env, { prompt, lang });
            const reply = (result && (result.summary || result.text || result.caption)) || t("oops", lang);
            await tgSendMessage(env, chatId, reply, { reply_to_message_id: msg.message_id });
          } catch (e) {
            console.error("aiVision error:", e);
            await tgSendMessage(env, chatId, t("oops", lang), { reply_to_message_id: msg.message_id });
          }
        } else {
          // —ñ–Ω—à—ñ —Ç–∏–ø–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –ø–æ–∫–∏ –Ω–µ –æ–±—Ä–æ–±–ª—è—î–º–æ
          await tgSendMessage(env, chatId, t("docSaved", lang), { reply_to_message_id: msg.message_id });
        }

        return new Response("ok", { status: 200 });
      }

      // TEXT (–∑–≤–∏—á–∞–π–Ω–∏–π –¥—ñ–∞–ª–æ–≥)
      if (text && !text.startsWith("/")) {
        await tgSendChatAction(env, chatId, "typing");
        try {
          const out = await aiText(text, env, { lang });
          const reply = (out && (out.answer || out.text || out.summary)) || t("empty", lang);
          await tgSendMessage(env, chatId, reply, { reply_to_message_id: msg.message_id });
        } catch (e) {
          console.error("aiText error:", e);
          await tgSendMessage(env, chatId, t("oops", lang), { reply_to_message_id: msg.message_id });
        }
        return new Response("ok", { status: 200 });
      }

      // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ
      await tgSendMessage(env, chatId, t("empty", lang), { reply_to_message_id: msg?.message_id });
      return new Response("ok", { status: 200 });
    } catch (e) {
      console.error("router fatal:", e);
      return new Response("ok", { status: 200 });
    }
  },
};