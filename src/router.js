// src/router.js
// –ü—Ä–æ—Å—Ç–∏–π —Ä–æ—É—Ç–µ—Ä Telegram-–≤–µ–±—Ö—É–∫–∞: /start, —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∏.
// –ù–µ —Å–≤—ñ—Ç–∏–º–æ –º–æ–¥–µ–ª—ñ —É –≤—ñ—Ç–∞–ª—å–Ω–æ–º—É —Ç–µ–∫—Å—Ç—ñ. –ü—ñ–¥—Ç—Ä–∏–º—É—î edited_message —Ç–∞ callback_query.

import { tgSendMessage, tgSendAction, tgGetFileUrl } from "./adapters/telegram.js";
import { aiText, aiVision } from "./ai/providers.js";

const WELCOME =
  "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø Senti ‚Äî —Ç–≤—ñ–π —É–≤–∞–∂–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫.\n" +
  "‚Ä¢ –ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–º –∫–æ—Ä–æ—Ç–∫–æ —ñ –ø–æ —Å—É—Ç—ñ.\n" +
  "‚Ä¢ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —á–∏ PDF ‚Äî –æ–ø–∏—à—É —ñ –∑—Ä–æ–±–ª—é –≤–∏—Å–Ω–æ–≤–∫–∏.\n" +
  "–°–ø—Ä–æ–±—É–π: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –¥—É–º–∫—É –∞–±–æ –∫–∏–Ω—å –∫–∞—Ä—Ç–∏–Ω–∫—É.";

function extractMessage(update) {
  // –ü—ñ–¥—Ç—Ä–∏–º—É—î message, edited_message, callback_query
  if (update?.message) return update.message;
  if (update?.edited_message) return update.edited_message;
  if (update?.callback_query?.message) return update.callback_query.message;
  return null;
}

function extractText(update, msg) {
  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ: text -> callback data -> caption -> ""
  return (
    update?.message?.text ??
    update?.edited_message?.text ??
    update?.callback_query?.data ??
    msg?.caption ??
    ""
  ).trim();
}

async function fetchFileBytes(fileUrl) {
  const res = await fetch(fileUrl);
  if (!res.ok) throw new Error(`Failed to fetch file: ${res.status}`);
  return new Uint8Array(await res.arrayBuffer());
}

export async function handleUpdate(update, env) {
  try {
    // –Ø–∫—â–æ —Ü–µ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –ø—ñ–Ω–≥ –∞–±–æ —Å–º—ñ—Ç—Ç—î–≤–∏–π –∑–∞–ø–∏—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ 200 OK
    if (!update || typeof update !== "object") {
      return new Response("ok", { status: 200 });
    }

    // –õ–µ–≥–∫–∏–π –ª–æ–≥ –∫–ª—é—á—ñ–≤ –∞–ø–¥–µ–π—Ç–∞ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    try {
      const keys = Object.keys(update);
      console.log("TG update keys:", ...keys);
    } catch {}

    const msg = extractMessage(update);
    if (!msg || !msg.chat) {
      // –ù–µ–º–∞ —á–∞—Ç—É ‚Äî –Ω—ñ—á–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏
      return new Response("ok", { status: 200 });
    }

    const chatId = msg.chat.id;
    const text = extractText(update, msg);

    // /start -> –¥—Ä—É–∂–Ω—î –≤—ñ—Ç–∞–Ω–Ω—è
    if (text.startsWith("/start")) {
      await tgSendMessage(env, chatId, WELCOME);
      return new Response("ok", { status: 200 });
    }

    // –§–æ—Ç–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç -> vision
    if (msg.photo?.length || msg.document) {
      await tgSendAction(env, chatId, "upload_photo");

      // –±–µ—Äe–º–æ –Ω–∞–π–±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç
      let fileId;
      if (msg.photo?.length) {
        const biggest = msg.photo.reduce((a, b) =>
          (a.file_size || 0) > (b.file_size || 0) ? a : b
        );
        fileId = biggest.file_id;
      } else if (msg.document) {
        fileId = msg.document.file_id;
      }

      try {
        const fileUrl = await tgGetFileUrl(env, fileId);
        const bytes = await fetchFileBytes(fileUrl);
        const visionResult = await aiVision(env, bytes, {
          filename: msg.document?.file_name,
          mime: msg.document?.mime_type,
        });

        const reply =
          (msg.caption?.trim() ? `üìù –¢–≤—ñ–π –ø—ñ–¥–ø–∏—Å: ${msg.caption.trim()}\n\n` : "") +
          (visionResult?.trim() || "–Ø –æ—Ç—Ä–∏–º–∞–≤ —Ñ–∞–π–ª, –∞–ª–µ –Ω–µ –∑–º—ñ–≥ –π–æ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏.");

        await tgSendMessage(env, chatId, reply);
      } catch (e) {
        console.error("Vision error:", e?.stack || e?.message || e);
        await tgSendMessage(
          env,
          chatId,
          "–ù–µ –≤–∏–π—à–ª–æ –æ–±—Ä–æ–±–∏—Ç–∏ —Ñ–∞–π–ª ü§ñ. –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–±–æ –º–µ–Ω—à–∏–π —Ä–æ–∑–º—ñ—Ä."
        );
      }

      return new Response("ok", { status: 200 });
    }

    // –ó–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç -> –∫–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if (text) {
      await tgSendAction(env, chatId, "typing");
      try {
        const answer = await aiText(env, text, {
          user: msg.from?.id,
          name: msg.from?.first_name,
          username: msg.from?.username,
          lang: msg.from?.language_code,
        });

        await tgSendMessage(env, chatId, answer || "–ì–æ—Ç–æ–≤–æ ‚úÖ");
      } catch (e) {
        console.error("aiText error:", e?.stack || e?.message || e);
        await tgSendMessage(env, chatId, "–ó–∞–≤–∏—Å —Ç—Ä—ñ—à–∫–∏. –°–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏ ‚úçÔ∏è");
      }
      return new Response("ok", { status: 200 });
    }

    // –Ø–∫—â–æ –ø—Ä–∏–π—à–ª–æ —â–æ—Å—å —ñ–Ω—à–µ (—Å—Ç–∏–∫–µ—Ä–∏ —Ç–æ—â–æ) ‚Äî –≤–≤—ñ—á–ª–∏–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    await tgSendMessage(env, chatId, "–ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç–µ–∫—Å—Ç –∞–±–æ —Ñ–∞–π–ª/—Ñ–æ—Ç–æ üìé");
    return new Response("ok", { status: 200 });
  } catch (err) {
    console.error("Router fatal:", err?.stack || err?.message || err);
    // –ó–∞–≤–∂–¥–∏ 200 –¥–ª—è Telegram, —â–æ–± –Ω–µ —Ä–µ—Ç—Ä–∞—ó–≤
    return new Response("ok", { status: 200 });
  }
}