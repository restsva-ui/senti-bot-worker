// src/router.js
import { sendMessage, answerCallbackQuery, editMessageText } from "./lib/tg.js";

// –ö–æ–º–∞–Ω–¥–∏ ‚Äî –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ –±–µ–∑ –∂–æ—Ä—Å—Ç–∫–æ—ó –ø—Ä–∏–≤'—è–∑–∫–∏ –¥–æ –Ω–∞–∑–≤ –µ–∫—Å–ø–æ—Ä—Ç—ñ–≤,
// —â–æ–± –Ω–µ –∑–ª–∞–º–∞—Ç–∏—Å—è, —è–∫—â–æ —Ñ–∞–π–ª —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ –º–∞—î –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó.
import * as Menu from "./commands/menu.js";
import * as Stats from "./commands/stats.js";
import * as LikePanel from "./commands/likepanel.js";

/**
 * –ì–æ–ª–æ–≤–Ω–∏–π —Ä–æ—É—Ç–µ—Ä –∞–ø–¥–µ–π—Ç–∞ –≤—ñ–¥ Telegram
 * @param {Env} env
 * @param {*} update
 */
export async function routeUpdate(env, update) {
  // 1) callback_query (–Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫)
  if (update.callback_query) {
    const cq = update.callback_query;
    const data = cq.data || "";
    const chatId = cq.message?.chat?.id;
    const messageId = cq.message?.message_id;

    // –ª–∞–π–∫–∏ ‚Äî –¥–µ–ª–µ–≥—É—î–º–æ, —è–∫—â–æ —î –æ–±—Ä–æ–±–Ω–∏–∫
    if (data.startsWith("like:")) {
      if (typeof LikePanel.onLikePanelCallback === "function") {
        return LikePanel.onLikePanelCallback(env, update);
      }
      // fallback: –ø—Ä–æ—Å—Ç–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
      await answerCallbackQuery(env, cq.id, { text: "üëç" });
      return;
    }

    // –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–∞–Ω–µ–ª—ñ –ª–∞–π–∫—ñ–≤ –∑ –∫–Ω–æ–ø–∫–∏
    if (data === "likepanel") {
      if (typeof LikePanel.onLikePanel === "function") {
        return LikePanel.onLikePanel(env, update);
      }
      await answerCallbackQuery(env, cq.id, { text: "–ü–∞–Ω–µ–ª—å –ª–∞–π–∫—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" });
      return;
    }

    // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if (data === "stats") {
      if (typeof Stats.onStats === "function") {
        return Stats.onStats(env, update);
      }
      await answerCallbackQuery(env, cq.id, { text: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" });
      return;
    }

    // about
    if (data === "about") {
      await editMessageText(
        env,
        chatId,
        messageId,
        "ü§ñ Senti ‚Äî –±–æ—Ç –Ω–∞ Cloudflare Workers. –ö–æ–º–∞–Ω–¥–∏: /menu, /stats, /likepanel"
      );
      await answerCallbackQuery(env, cq.id);
      return;
    }

    // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–ª—ñ–∫
    await answerCallbackQuery(env, cq.id);
    return;
  }

  // 2) –∑–≤–∏—á–∞–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  const msg = update.message || update.edited_message;
  if (!msg) return;

  const text = (msg.text || "").trim();
  const chatId = msg.chat?.id;

  // –ö–æ–º–∞–Ω–¥–∏ —á–µ—Ä–µ–∑ —Å–ª–µ—à
  if (text.startsWith("/")) {
    const [cmd] = text.split(/\s+/, 1);
    switch (cmd) {
      case "/menu":
        if (typeof Menu.onMenu === "function") {
          return Menu.onMenu(env, update);
        }
        return sendMessage(env, chatId, "üìã –ú–µ–Ω—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.");

      case "/stats":
        if (typeof Stats.onStats === "function") {
          return Stats.onStats(env, update);
        }
        return sendMessage(env, chatId, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.");

      case "/likepanel":
        if (typeof LikePanel.onLikePanel === "function") {
          return LikePanel.onLikePanel(env, update);
        }
        return sendMessage(env, chatId, "üëç –ü–∞–Ω–µ–ª—å –ª–∞–π–∫—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.");

      // —ñ–Ω—à—ñ –≤–∞—à—ñ —ñ—Å–Ω—É—é—á—ñ –∫–æ–º–∞–Ω–¥–∏ (/start, /ping, /kvset, /kvget)
      // –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è —É –≤–∞—à–æ–º—É –ø–æ—Ç–æ—á–Ω–æ–º—É index.js ‚Äî —Ç—É—Ç –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω—é—î–º–æ.
      default:
        // –ù–µ—Ö–∞–π –±–∞–∑–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ –∑ index.js –æ–ø—Ä–∞—Ü—é—î —Ü–µ —è–∫ –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç
        return; // –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ –≤ —Ä–æ—É—Ç–µ—Ä—ñ
    }
  }

  // –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç ‚Äî —Ç–µ–∂ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ:
  // –ø–æ—Ç–æ—á–Ω–∞ ‚Äú–µ—Ö–æ/—Å—Ç–∞—Ä—Ç‚Äù –ª–æ–≥—ñ–∫–∞ –ª–∏—à–∞—î—Ç—å—Å—è —É –≤–∞—à–æ–º—É index.js.
  return;
}

export default { routeUpdate };