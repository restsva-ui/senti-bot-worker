// –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∞–ø–¥–µ–π—Ç—ñ–≤ Telegram.
// –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏: –¥–ª—è photo/document –¥—ñ—Å—Ç–∞—î–º–æ file_url —ñ –ø–µ—Ä–µ–¥–∞—î–º–æ –≤ aiVision.

import { tgSendMessage, tgSendAction, tgGetFileUrl } from "./adapters/telegram.js";
import { aiText, aiVision } from "./ai/providers.js";

function pickLargestPhoto(photos) {
  if (!Array.isArray(photos) || photos.length === 0) return null;
  return photos[photos.length - 1]; // –Ω–∞–π–±—ñ–ª—å—à–∞ —Ä–æ–∑–¥—ñ–ª—å–Ω–∞
}

function trimOrNull(s) {
  if (typeof s !== "string") return null;
  const t = s.trim();
  return t.length ? t : null;
}

export async function handleUpdate(update, env) {
  const msg = update?.message || update?.edited_message;
  if (!msg) return;

  const chatId = msg.chat.id;
  const userText = trimOrNull(msg.text ?? msg.caption ?? "");

  // 1) –§–æ—Ç–æ
  if (msg.photo && msg.photo.length) {
    const largest = pickLargestPhoto(msg.photo);
    await tgSendAction(chatId, "upload_photo", env);

    const fileUrl = await tgGetFileUrl(largest.file_id, env);
    if (!fileUrl) {
      await tgSendMessage(chatId, "‚ö†Ô∏è –ë–∞—á—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –∞–ª–µ –Ω–µ –∑–º—ñ–≥ –æ—Ç—Ä–∏–º–∞—Ç–∏ URL –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.", env);
      return;
    }

    // –ü—ñ–¥–∫–∞–∑–∫–∞ –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è = caption –∞–±–æ —Ç–µ–∫—Å—Ç –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const visionHint = userText || "–û–ø–∏—à–∏ –≥–æ–ª–æ–≤–Ω–µ –Ω–∞ —Ñ–æ—Ç–æ –∫–æ—Ä–æ—Ç–∫–æ —ñ –ø–æ —Å—É—Ç—ñ.";
    const result = await aiVision(fileUrl, env, { hint: visionHint, source: "photo" });

    const safe = result?.trim() || "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—Ä–æ–±–∏—Ç–∏ –≤–∏—Å–Ω–æ–≤–æ–∫ –∑ —Ü—å–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.";
    await tgSendMessage(chatId, safe, env);
    return;
  }

  // 2) –î–æ–∫—É–º–µ–Ω—Ç (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è/PDF)
  if (msg.document) {
    await tgSendAction(chatId, "upload_document", env);

    const doc = msg.document;
    const mime = doc.mime_type || "";
    const fileUrl = await tgGetFileUrl(doc.file_id, env);

    if (!fileUrl) {
      await tgSendMessage(chatId, "‚ö†Ô∏è –ë–∞—á—É –¥–æ–∫—É–º–µ–Ω—Ç, –∞–ª–µ –Ω–µ –∑–º—ñ–≥ –æ—Ç—Ä–∏–º–∞—Ç–∏ URL –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.", env);
      return;
    }

    if (mime.startsWith("image/") || mime === "application/pdf") {
      const visionHint = userText || (mime === "application/pdf"
        ? "–ó—Ä–æ–±–∏ —Å—Ç–∏—Å–ª–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç –≤–º—ñ—Å—Ç—É PDF."
        : "–û–ø–∏—à–∏ –≥–æ–ª–æ–≤–Ω–µ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ.");
      const result = await aiVision(fileUrl, env, { hint: visionHint, source: mime });
      const safe = result?.trim() || "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—Ä–æ–±–∏—Ç–∏ –≤–∏—Å–Ω–æ–≤–æ–∫ –∑ —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É.";
      await tgSendMessage(chatId, safe, env);
      return;
    }

    // –Ü–Ω—à—ñ —Ç–∏–ø–∏ –¥–æ–∫—ñ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–µ–º–æ, —â–æ –ø–æ–∫–∏ –Ω–µ –æ–±—Ä–æ–±–ª—è—î–º–æ
    await tgSendMessage(chatId, `–û—Ç—Ä–∏–º–∞–≤ –¥–æ–∫—É–º–µ–Ω—Ç (${mime}). –ü–æ–∫–∏ —â–æ –≤–º—ñ—é –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏ —Ç–∞ PDF.`, env);
    return;
  }

  // 3) –ß–∏—Å—Ç–∏–π —Ç–µ–∫—Å—Ç
  if (userText) {
    await tgSendAction(chatId, "typing", env);
    const answer = await aiText(userText, env);
    const safe = answer?.trim() || "–ì–æ—Ç–æ–≤–æ! –Ø –æ—Ç—Ä–∏–º–∞–≤ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç —ñ –≤—ñ–¥–ø–æ–≤—ñ–º –ø—Ä–æ—Å—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:\n\n‚Ä¢ (–ø–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç)";
    await tgSendMessage(chatId, safe, env);
    return;
  }

  // 4) –§–æ–ª–±–µ–∫
  await tgSendMessage(
    chatId,
    "üëã –ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ —á–∏ PDF ‚Äî –æ–ø–∏—à—É, –≤–∏—Ç—è–≥–Ω—É —Ñ–∞–∫—Ç–∏ –∞–±–æ –∑—Ä–æ–±–ª—é –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫.",
    env
  );
}