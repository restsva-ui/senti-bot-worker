// src/router.js

import { tgSendMessage, tgSendChatAction, tgGetFileUrl } from "./adapters/telegram.js";
import { aiText, aiVision } from "./ai/providers.js";

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç—É –≤–µ–±—Ö—É–∫–∞:
 *  - —à–ª—è—Ö —Ç–∏–ø—É /<WEBHOOK_SECRET>
 *  - —Ç–∞/–∞–±–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-Bot-Api-Secret-Token
 */
function isFromTelegram(request, env, pathname) {
  const headerSecret = request.headers.get("x-telegram-bot-api-secret-token");
  const pathOk =
    pathname === `/${env.WEBHOOK_SECRET}` ||
    pathname === `/${env.WEBHOOK_SECRET}/`;
  const headerOk = headerSecret && headerSecret === env.WEBHOOK_SECRET;
  return pathOk || headerOk;
}

function pickLargestPhoto(photos = []) {
  if (!Array.isArray(photos) || photos.length === 0) return null;
  return photos.reduce((a, b) => (a.file_size > b.file_size ? a : b));
}

function getLangFromMessage(msg) {
  // –Ø–∫—â–æ Telegram –Ω–µ –¥–∞–≤ language_code ‚Äî –ø–æ–≤–µ—Ä–Ω–µ–º–æ 'uk' —è–∫ –¥–µ—Ñ–æ–ª—Ç
  return (msg?.from?.language_code || "uk").toLowerCase();
}

async function handleTextMessage(env, msg, text) {
  const chatId = msg.chat.id;

  if (text === "/start") {
    const hello =
      "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø Senti ‚Äî —Ç–≤—ñ–π —É–≤–∞–∂–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫.\n" +
      "‚Ä¢ –ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–º –∫–æ—Ä–æ—Ç–∫–æ —ñ –ø–æ —Å—É—Ç—ñ.\n" +
      "‚Ä¢ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —á–∏ PDF ‚Äî –æ–ø–∏—à—É —ñ –∑—Ä–æ–±–ª—é –≤–∏—Å–Ω–æ–≤–∫–∏.\n" +
      "–°–ø—Ä–æ–±—É–π: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –¥—É–º–∫—É –∞–±–æ –∫–∏–Ω—å –∫–∞—Ä—Ç–∏–Ω–∫—É.";
    return tgSendMessage(env.TELEGRAM_TOKEN, chatId, hello);
  }

  // –Ü–Ω–¥–∏–∫–∞—Ü—ñ—è "typing‚Ä¶"
  await tgSendChatAction(env.TELEGRAM_TOKEN, chatId, "typing");

  const lang = getLangFromMessage(msg);
  const result = await aiText(env, text, { lang, userId: String(msg.from?.id || "") });

  const reply =
    result?.text?.trim() ||
    "–ì–æ—Ç–æ–≤–æ! –Ø –æ—Ç—Ä–∏–º–∞–≤ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç —ñ –≤—ñ–¥–ø–æ–≤—ñ–º –ø—Ä–æ—Å—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:\n\n‚Ä¢ (–ø–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç)";
  return tgSendMessage(env.TELEGRAM_TOKEN, chatId, reply);
}

async function handleMediaMessage(env, msg) {
  const chatId = msg.chat.id;

  // –Ü–Ω–¥–∏–∫–∞—Ü—ñ—è "upload_photo" / "typing"
  await tgSendChatAction(env.TELEGRAM_TOKEN, chatId, "upload_photo");

  let fileId = null;
  let mediaKind = null;
  let caption = msg.caption || "";

  if (msg.photo && msg.photo.length) {
    const best = pickLargestPhoto(msg.photo);
    fileId = best?.file_id || msg.photo[msg.photo.length - 1]?.file_id;
    mediaKind = "photo";
  } else if (msg.document) {
    fileId = msg.document.file_id;
    mediaKind = "document";
  } else if (msg.sticker) {
    fileId = msg.sticker.file_id;
    mediaKind = "sticker";
  }

  if (!fileId) {
    return tgSendMessage(
      env.TELEGRAM_TOKEN,
      chatId,
      "–ë–∞—á—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –∞–ª–µ –Ω–µ –æ—Ç—Ä–∏–º–∞–≤ –π–æ–≥–æ URL –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É."
    );
  }

  const url = await tgGetFileUrl(env.TELEGRAM_TOKEN, fileId);
  if (!url) {
    return tgSendMessage(
      env.TELEGRAM_TOKEN,
      chatId,
      "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª Telegram –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É."
    );
  }

  // –ü–æ–ø—Ä–æ—Å–∏–º–æ –º–æ–¥–µ–ª—å –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è/–¥–æ–∫ —ñ –¥–∞—Ç–∏ —Å—Ç–∏—Å–ª–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫
  const lang = getLangFromMessage(msg);
  const result = await aiVision(env, { url, caption, kind: mediaKind, lang });

  const reply =
    result?.text?.trim() ||
    "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ —Ñ–∞–π–ª. –°–∫–∞–∂–∏, —â–æ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ: –≤–∏–ø–∏—Å–∞—Ç–∏ —Ç–µ–∫—Å—Ç, –∑–Ω–∞–π—Ç–∏ —á–∏—Å–ª–∞/–¥–∞—Ç–∏, –∑—Ä–æ–±–∏—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫ —Ç–æ—â–æ.";
  return tgSendMessage(env.TELEGRAM_TOKEN, chatId, reply);
}

async function handleUpdate(env, update) {
  try {
    const msg = update.message || update.edited_message;
    if (!msg) return;

    if (typeof msg.text === "string" && msg.text.trim().length > 0) {
      return await handleTextMessage(env, msg, msg.text.trim());
    }

    if (msg.photo || msg.document || msg.sticker) {
      return await handleMediaMessage(env, msg);
    }
  } catch (err) {
    console.error("router: handleUpdate error:", err);
  }
}

export default {
  /**
   * Cloudflare Worker entry
   */
  async fetch(request, env, ctx) {
    const { pathname } = new URL(request.url);

    // –ü—ñ–Ω–≥ –¥–ª—è —à–≤–∏–¥–∫–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    if (request.method === "GET" && pathname === "/") {
      return new Response("ok", { status: 200 });
    }

    if (request.method !== "POST") {
      return new Response("Not Found", { status: 404 });
    }

    // –ü—Ä–∏–π–º–∞—î–º–æ –ª–∏—à–µ –≤–∏–∫–ª–∏–∫–∏ Telegram –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—ñ
    if (!isFromTelegram(request, env, pathname)) {
      return new Response("Not Found", { status: 404 });
    }

    let update = null;
    try {
      update = await request.json();
    } catch {
      return new Response("Bad Request", { status: 400 });
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    ctx.waitUntil(handleUpdate(env, update));
    return new Response("OK", { status: 200 });
  },
};