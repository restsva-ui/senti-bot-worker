// src/router.js
// –î—É–∂–µ –ø—Ä–æ—Å—Ç–∏–π —Ä–æ—É—Ç–µ—Ä: /start, —Ñ–æ—Ç–æ, –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç.
// –ü—ñ–∑–Ω—ñ—à–µ —Å—é–¥–∏ –ª–µ–≥–∫–æ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏.

/* Imports, —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ */
import { tgSendMessage, tgSendAction, tgGetFileUrl } from "./adapters/telegram.js";
import { generateText, analyzeImage } from "./ai/providers.js";

/** –ì–æ–ª–æ–≤–Ω–∏–π –≤—Ö—ñ–¥ –¥–ª—è –∞–ø–¥–µ–π—Ç–∞ –≤—ñ–¥ Telegram */
export async function handleUpdate(update, env) {
  const msg = update?.message;
  if (!msg || !msg.chat || (!msg.text && !msg.caption && !msg.photo)) return;

  const chatId = msg.chat.id;
  const text = (msg.text ?? msg.caption ?? "").trim();
  const locale = (env.BOT_LOCALE || "uk").toLowerCase();

  // 1) –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –∫–æ—Ä–æ—Ç–∫–µ –¥—Ä—É–∂–Ω—î –≤—ñ—Ç–∞–Ω–Ω—è (–±–µ–∑ –∑–≥–∞–¥–∫–∏ –º–æ–¥–µ–ª–µ–π)
  if (text.startsWith("/start")) {
    const hello =
      "–ü—Ä–∏–≤—ñ—Ç! üöÄ –î–∞–≤–∞–π –∑—Ä–æ–±–∏–º–æ —Ü–µ–π –¥–µ–Ω—å —è—Å–∫—Ä–∞–≤—ñ—à–∏–º.\n\n" +
      "‚Ä¢ –ù–∞–¥—ñ—à–ª–∏ *—Ç–µ–∫—Å—Ç* ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–º –ª–∞–∫–æ–Ω—ñ—á–Ω–æ.\n" +
      "‚Ä¢ –ü—Ä–∏—à–ª–∏ *—Ñ–æ—Ç–æ* ‚Äî –æ–ø–∏—à—É —Ç–∞ –¥–∞–º *–≤–∏—Å–Ω–æ–≤–∫–∏*.\n";
    await tgSendMessage(chatId, hello, { parse_mode: "Markdown" });
    return;
  }

  // 2) –Ø–∫—â–æ —î —Ñ–æ—Ç–æ ‚Äî –±–µ—Ä–µ–º–æ –Ω–∞–π—è–∫—ñ—Å–Ω—ñ—à–µ —ñ —Ä–æ–±–∏–º–æ vision-–∞–Ω–∞–ª—ñ–∑
  if (msg.photo && Array.isArray(msg.photo) && msg.photo.length > 0) {
    try {
      await tgSendAction(chatId, "upload_photo");

      // –±–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç (–æ—Å—Ç–∞–Ω–Ω—ñ–π —É –º–∞—Å–∏–≤—ñ)
      const fileId = msg.photo[msg.photo.length - 1].file_id;
      const fileUrl = await tgGetFileUrl(env, fileId);

      const prompt =
        text && text.length > 0
          ? text
          : "–û–ø–∏—à–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –î–∞–π –∫–æ—Ä–æ—Ç–∫—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ –≤ –∫—ñ–Ω—Ü—ñ —Å–ø–∏—Å–∫–æ–º.";

      const reply = await analyzeImage(env, {
        imageUrl: fileUrl,
        prompt,
        locale,
      });

      await tgSendMessage(chatId, reply);
    } catch (e) {
      await tgSendMessage(
        chatId,
        "–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–¥—ñ—à–ª–∏ —ñ–Ω—à–µ —Ñ–æ—Ç–æ."
      );
      console.error("vision error:", e);
    }
    return;
  }

  // 3) –Ü–Ω–∞–∫—à–µ ‚Äî –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç ‚Üí —Ç–µ–∫—Å—Ç–æ–≤–∞ –º–æ–¥–µ–ª—å
  if (text) {
    try {
      await tgSendAction(chatId, "typing");

      const reply = await generateText(env, {
        prompt: text,
        locale,
      });

      await tgSendMessage(chatId, reply);
    } catch (e) {
      await tgSendMessage(
        chatId,
        "–•–º‚Ä¶ –Ω–µ –≤–∏–π—à–ª–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏. –°–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
      );
      console.error("text error:", e);
    }
  }
}