// src/router.ts
// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π —Ä–æ—É—Ç–µ—Ä Telegram-–∞–ø–¥–µ–π—Ç—ñ–≤.
// ‚úÖ –ó–ë–ï–†–ï–ñ–ï–ù–û –ø–æ—Ç–æ—á–Ω—É –ª–æ–≥—ñ–∫—É –∫–æ–º–∞–Ω–¥ (/start, /ping, /menu, /likepanel, /help)
// ‚úÖ –î–û–î–ê–ù–û –±–µ–∑–ø–µ—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫—Ä–æ–∫—ñ–≤ –∑ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º (runSafe)

import { sendMessage, answerCallbackQuery } from "./telegram";
import { cmdStart as start } from "./commands/start";
import { cmdPing as ping } from "./commands/ping";
import { menu } from "./commands/menu";
import { help } from "./commands/help";
// —è–∫—â–æ —É –≤–∞—Å —ñ–Ω—à–∞ –Ω–∞–∑–≤–∞/–µ–∫—Å–ø–æ—Ä—Ç —É likepanel.ts ‚Äî –∑–∞–ª–∏—à—Ç–µ —è–∫ –±—É–ª–æ —É –≤–∞—Å
import { likepanel } from "./commands/likepanel";

type TGUser = { id: number };
type TGChat = { id: number };
type TGMessage = { message_id: number; from?: TGUser; chat: TGChat; text?: string };
type TGCallbackQuery = { id: string; from: TGUser; message?: TGMessage; data?: string };

type TGUpdate = {
  update_id: number;
  message?: TGMessage;
  callback_query?: TGCallbackQuery;
};

// -----------------------
// helpers
// -----------------------
function extractCommand(text: string | undefined): string | null {
  if (!text) return null;
  const t = text.trim();
  if (!t.startsWith("/")) return null;
  return t.split(/\s+/)[0].toLowerCase();
}

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –æ–±–≥–æ—Ä—Ç–∫–∞ –∫—Ä–æ–∫—ñ–≤ –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –ø–æ–º–∏–ª–æ–∫.
 * –ù–ï –∫–∏–¥–∞—î –ø–æ–º–∏–ª–∫—É –¥–æ–≥–æ—Ä–∏ ‚Äî —â–æ–± –æ–¥–∏–Ω –∑–±—ñ–π –Ω–µ –≤–∞–ª–∏–≤ —É–≤–µ—Å—å –∞–ø–¥–µ–π—Ç.
 */
async function runSafe<T>(label: string, fn: () => Promise<T>): Promise<T | undefined> {
  try {
    return await fn();
  } catch (err: any) {
    const msg = typeof err?.message === "string" ? err.message : String(err);
    console.error(`[router] step "${label}" failed:`, msg);
    return undefined;
  }
}

// -----------------------
// main handler
// -----------------------
export async function handleUpdate(update: TGUpdate): Promise<Response> {
  try {
    // 1) –ö–æ–º–∞–Ω–¥–∏ —É –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö
    if (update.message) {
      const chatId = update.message.chat.id;
      const cmd = extractCommand(update.message.text);

      if (cmd) {
        switch (cmd) {
          case "/start":
            await runSafe("command:/start", async () => {
              await start(chatId);
            });
            break;

          case "/ping":
            await runSafe("command:/ping", async () => {
              await ping(chatId);
            });
            break;

          case "/menu":
            await runSafe("command:/menu", async () => {
              await menu(chatId);
            });
            break;

          case "/likepanel":
            await runSafe("command:/likepanel", async () => {
              // —è–∫—â–æ –≤–∞—à likepanel –ø–æ—Ç—Ä–µ–±—É—î —ñ–Ω—à—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ ‚Äî –ø—ñ–¥—Å—Ç–∞–≤—Ç–µ —è–∫ —É –≤–∞—Å
              await likepanel(chatId);
            });
            break;

          case "/help":
            await runSafe("command:/help", async () => {
              await help(chatId);
            });
            break;

          default:
            await runSafe("command:unknown", async () => {
              await sendMessage(chatId, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à—ñ—Ç—å /help");
            });
        }
      }
    }

    // 2) –û–±—Ä–æ–±–∫–∞ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ (callback_query)
    if (update.callback_query) {
      const cq = update.callback_query;
      const chatId = cq.message?.chat.id;
      const data = cq.data;

      // –∑–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback ‚Äî –ø—Ä–∏–±–∏—Ä–∞—î "loading‚Ä¶"
      await runSafe("callback:answer", async () => {
        await answerCallbackQuery(cq.id);
      });

      if (chatId && data) {
        await runSafe(`callback:data:${data}`, async () => {
          if (data === "cb_ping") {
            await ping(chatId);
          } else if (data === "cb_likepanel") {
            await likepanel(chatId);
          } else if (data === "cb_help") {
            await help(chatId);
          } else {
            await sendMessage(chatId, "ü§∑‚Äç‚ôÇÔ∏è –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –∫–Ω–æ–ø–∫–∏.");
          }
        });
      }
    }

    // 200 OK –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —â–æ—Å—å –≤–ø–∞–ª–æ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ ‚Äî –ø–æ–º–∏–ª–∫–∏ –≤–∂–µ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–æ
    return new Response(JSON.stringify({ ok: true }), {
      status: 200,
      headers: { "content-type": "application/json" },
    });
  } catch (err: any) {
    // –§—ñ–Ω–∞–ª—å–Ω–∞ ¬´—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞¬ª –Ω–∞ –≤–µ—Å—å –∞–ø–¥–µ–π—Ç
    const msg = typeof err?.message === "string" ? err.message : String(err);
    console.error("[router] unhandled error:", msg);

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 200, —â–æ–± Telegram –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–≤ –∞–ø–¥–µ–π—Ç –±–µ–∑–∫—ñ–Ω–µ—á–Ω–æ.
    // –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ —ñ–Ω—à—É —Å–µ–º–∞–Ω—Ç–∏–∫—É ‚Äî –∑–º—ñ–Ω—ñ—Ç—å –Ω–∞ 500.
    return new Response(JSON.stringify({ ok: false, error: "internal" }), {
      status: 200,
      headers: { "content-type": "application/json" },
    });
  }
}