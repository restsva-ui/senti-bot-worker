// src/router.ts
import { CFG } from "./config";
import {
  sendMessage,
  editMessageText,
  answerCallbackQuery, // ‚Üê —ñ—Å–Ω—É—î –≤ api.ts
} from "./telegram/api";

// --------- KV helpers ---------
type Counts = { like: number; dislike: number };

const COUNTS_KEY = "likes:counts";
const USER_KEY = (id: number) => `likes:user:${id}`;

async function getCounts(): Promise<Counts> {
  try {
    const raw = await CFG.kv.get(COUNTS_KEY);
    if (!raw) return { like: 0, dislike: 0 };
    const parsed = JSON.parse(raw) as Counts;
    return {
      like: Number(parsed.like || 0),
      dislike: Number(parsed.dislike || 0),
    };
  } catch {
    return { like: 0, dislike: 0 };
  }
}

async function setCounts(c: Counts) {
  await CFG.kv.put(COUNTS_KEY, JSON.stringify(c));
}

/**
 * –†–µ—î—Å—Ç—Ä—É—î –≥–æ–ª–æ—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
 * - —è–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É–≤ —Ç–µ —Å–∞–º–µ ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω—é—î–º–æ
 * - —è–∫—â–æ –∑–º—ñ–Ω–∏–≤ üëç‚ÜîÔ∏èüëé ‚Äî –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ
 */
async function registerVote(userId: number, choice: "like" | "dislike"): Promise<Counts> {
  const prev = await CFG.kv.get(USER_KEY(userId));
  const counts = await getCounts();

  if (prev === choice) {
    // –±–µ–∑ –∑–º—ñ–Ω
    return counts;
  }

  // –∑–Ω—è—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≥–æ–ª–æ—Å (—è–∫—â–æ –±—É–≤)
  if (prev === "like") counts.like = Math.max(0, counts.like - 1);
  if (prev === "dislike") counts.dislike = Math.max(0, counts.dislike - 1);

  // –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –≥–æ–ª–æ—Å
  if (choice === "like") counts.like += 1;
  else counts.dislike += 1;

  // –∑–±–µ—Ä–µ–≥—Ç–∏
  await CFG.kv.put(USER_KEY(userId), choice);
  await setCounts(counts);
  return counts;
}

// --------- UI helpers ---------
function mainMenuKeyboard() {
  return {
    inline_keyboard: [
      [{ text: "üîÅ Ping", callback_data: "menu:ping" }],
      [{ text: "üëç –õ–∞–π–∫–∏", callback_data: "menu:likepanel" }],
      [{ text: "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data: "menu:help" }],
    ],
  };
}

function likesKeyboard() {
  return {
    inline_keyboard: [
      [{ text: "üëç", callback_data: "vote:like" }, { text: "üëé", callback_data: "vote:dislike" }],
    ],
  };
}

function likesCaption(c: Counts) {
  return `–û—Ü—ñ–Ω–∫–∏: üëç ${c.like} | üëé ${c.dislike}`;
}

// --------- Commands ---------
async function cmdStart(chatId: number) {
  await sendMessage(
    chatId,
    "üëã –ü—Ä–∏–≤—ñ—Ç! –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Cloudflare Workers. –ù–∞–ø–∏—à—ñ—Ç—å /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏."
  );
}

async function cmdHelp(chatId: number) {
  const text =
    "üßæ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n" +
    "/start ‚Äî –∑–∞–ø—É—Å–∫ —ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è\n" +
    "/ping ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞\n" +
    "/menu ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n" +
    "/likepanel ‚Äî –ø–∞–Ω–µ–ª—å –ª–∞–π–∫—ñ–≤\n" +
    "/help ‚Äî –¥–æ–≤—ñ–¥–∫–∞";
  await sendMessage(chatId, text);
}

async function cmdPing(chatId: number) {
  await sendMessage(chatId, "pong ‚úÖ");
}

async function cmdMenu(chatId: number) {
  await sendMessage(chatId, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", { reply_markup: mainMenuKeyboard() });
}

async function cmdLikePanel(chatId: number) {
  const counts = await getCounts();
  await sendMessage(chatId, likesCaption(counts), { reply_markup: likesKeyboard() });
}

// --------- Callback handlers ---------
async function cbMenu(chatId: number, messageId: number, data: string) {
  if (data === "menu:ping") {
    await editMessageText(chatId, messageId, "pong ‚úÖ");
  } else if (data === "menu:likepanel") {
    const counts = await getCounts();
    await editMessageText(chatId, messageId, likesCaption(counts), {
      reply_markup: likesKeyboard(),
    });
  } else if (data === "menu:help") {
    const text =
      "üßæ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n" +
      "/start ‚Äî –∑–∞–ø—É—Å–∫ —ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è\n" +
      "/ping ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞\n" +
      "/menu ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n" +
      "/likepanel ‚Äî –ø–∞–Ω–µ–ª—å –ª–∞–π–∫—ñ–≤\n" +
      "/help ‚Äî –¥–æ–≤—ñ–¥–∫–∞";
    await editMessageText(chatId, messageId, text, { reply_markup: mainMenuKeyboard() });
  } else {
    await editMessageText(chatId, messageId, "ü§∑‚Äç‚ôÇÔ∏è –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –∫–Ω–æ–ø–∫–∏.", {
      reply_markup: mainMenuKeyboard(),
    });
  }
}

async function cbVote(
  fromId: number,
  chatId: number,
  messageId: number,
  data: "vote:like" | "vote:dislike"
) {
  const choice = data === "vote:like" ? "like" : "dislike";
  const counts = await registerVote(fromId, choice);
  await answerCallbackQuery("‚úÖ –ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ");
  await editMessageText(chatId, messageId, likesCaption(counts), { reply_markup: likesKeyboard() });
}

// --------- Entry ---------
export async function handleUpdate(update: any) {
  try {
    if (update.message) {
      const msg = update.message;
      const chatId: number = msg.chat?.id;
      const text: string = (msg.text || "").trim();

      if (text.startsWith("/start")) return cmdStart(chatId);
      if (text.startsWith("/help")) return cmdHelp(chatId);
      if (text.startsWith("/ping")) return cmdPing(chatId);
      if (text.startsWith("/menu")) return cmdMenu(chatId);
      if (text.startsWith("/likepanel")) return cmdLikePanel(chatId);

      // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ–∫–∞–∂–µ–º–æ help
      return cmdHelp(chatId);
    }

    if (update.callback_query) {
      const cb = update.callback_query;
      const fromId: number = cb.from?.id;
      const data: string = cb.data || "";
      const chatId: number | undefined = cb.message?.chat?.id;
      const messageId: number | undefined = cb.message?.message_id;

      // Telegram –≤–∏–º–∞–≥–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ callback
      // (–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –¥–∞–ª—ñ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ)
      // –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–º –Ω–æ—Ç—ñ—Ñ—ñ–∫–∞—Ü—ñ—î—é –≤ cbVote
      if (!chatId || !messageId) {
        await answerCallbackQuery();
        return;
      }

      if (data.startsWith("menu:")) {
        await answerCallbackQuery();
        return cbMenu(chatId, messageId, data);
      }

      if (data === "vote:like" || data === "vote:dislike") {
        return cbVote(fromId, chatId, messageId, data as "vote:like" | "vote:dislike");
      }

      await answerCallbackQuery("ü§∑‚Äç‚ôÇÔ∏è –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è");
    }
  } catch (err) {
    console.error("handleUpdate fatal:", (err as Error).message || err);
  }
}