// src/router.ts
import { sendMessage, answerCallback } from "./telegram/api";
import type { Update } from "./telegram/types";
import { CFG } from "./config";
import { cmdLikePanel } from "./commands/likepanel";
import { cmdKvTest, cmdResetLikes } from "./commands/kvdebug";

/** –î—ñ—Å—Ç–∞—î –∫–æ–º–∞–Ω–¥—É –∑ —Ç–µ–∫—Å—Ç—É: /ping, /ping@bot, –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —á–∏ –±–µ–∑ */
function extractCommand(text?: string): string | null {
  if (!text || !text.startsWith("/")) return null;
  // –≤—ñ–¥–∫–∏–¥–∞—î–º–æ –≤—Å–µ –ø—ñ—Å–ª—è –ø—Ä–æ–±—ñ–ª—É
  const first = text.trim().split(/\s+/)[0]; // "/ping" –∞–±–æ "/ping@bot"
  const withoutMention = first.split("@")[0]; // "/ping"
  return withoutMention.toLowerCase();       // –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–≥—ñ—Å—Ç—Ä
}

export async function routeUpdate(update: Update): Promise<void> {
  // 1) callback –∫–Ω–æ–ø–∫–∏ (–ª–∞–π–∫–∏)
  if (update.callback_query) {
    const cq = update.callback_query;
    const chatId = cq.message?.chat.id;
    if (!chatId) return;
    // –ø–µ—Ä–µ–¥–∞–π –≤ —ñ—Å–Ω—É—é—á–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –ª–∞–π–∫—ñ–≤
    await answerCallback(cq.id, "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ");
    await cmdLikePanel(chatId, { data: cq.data || "" });
    return;
  }

  // 2) –∑–≤–∏—á–∞–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  const msg = update.message;
  if (!msg || !msg.text) return;

  const chatId = msg.chat.id;
  const cmd = extractCommand(msg.text);

  // –ö–æ–º–∞–Ω–¥–∏, –¥–æ—Å—Ç—É–ø–Ω—ñ –≤—Å—ñ–º
  if (cmd === "/start") {
    await sendMessage(chatId,
      "üëã –ü—Ä–∏–≤—ñ—Ç! –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Cloudflare Workers. –ù–∞–ø–∏—à—ñ—Ç—å /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏."
    );
    return;
  }

  if (cmd === "/help") {
    await sendMessage(chatId,
`üìÑ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/start ‚Äî –∑–∞–ø—É—Å–∫ —ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
/ping ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞
/menu ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/likepanel ‚Äî –ø–∞–Ω–µ–ª—å –ª–∞–π–∫—ñ–≤
/kvtest ‚Äî —Å—Ç–∞–Ω KV
/resetlikes ‚Äî —Å–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏`);
    return;
  }

  if (cmd === "/ping") {
    await sendMessage(chatId, "pong ‚úÖ");
    return;
  }

  if (cmd === "/menu") {
    await sendMessage(chatId,
      "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
      {
        reply_markup: {
          keyboard: [
            [{ text: "üîÅ Ping" }],
            [{ text: "üëç –õ–∞–π–∫–∏" }],
            [{ text: "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞" }],
          ],
          resize_keyboard: true,
          one_time_keyboard: false,
        }
      }
    );
    return;
  }

  if (cmd === "/likepanel") {
    await cmdLikePanel(chatId);
    return;
  }

  // –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞
  const isOwner = String(chatId) === String(CFG.ownerId);
  if (isOwner && cmd === "/kvtest") {
    await cmdKvTest(chatId);
    return;
  }
  if (isOwner && cmd === "/resetlikes") {
    await cmdResetLikes(chatId);
    return;
  }

  // –§–æ–ª–±–µ–∫: —ñ–≥–Ω–æ—Ä—É—î–º–æ –∞–±–æ –º º—è–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
  // await sendMessage(chatId, "–ù–µ —Ä–æ–∑—É–º—ñ—é –∫–æ–º–∞–Ω–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ /help");
}