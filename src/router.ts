// src/router.ts
import { setEnv, type Env } from "./config";
import { sendMessage, answerCallbackQuery } from "./telegram/api";

import { cmdStart as start } from "./commands/start";
import { cmdPing as ping } from "./commands/ping";
import { menu } from "./commands/menu";
import { likepanel, handleLikeCallback } from "./commands/likepanel";
import { help } from "./commands/help";
import { diag } from "./commands/diag";              // ‚öôÔ∏è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
import { handleKVGet, handleKVList } from "./commands/kvdebug"; // üß∞ KV debug

// --- –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ —Ç–∏–ø–∏ Telegram --------------------------
type TGUser = { id: number };
type TGChat = { id: number };
type TGMessage = { message_id: number; from?: TGUser; chat: TGChat; text?: string };
type TGCallbackQuery = { id: string; from: TGUser; message?: TGMessage; data?: string };
type TGUpdate = { update_id: number; message?: TGMessage; callback_query?: TGCallbackQuery };

// --- –•–µ–ª–ø–µ—Ä –¥–ª—è –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ ----------------------
function extractCommand(text?: string): string | null {
  if (!text || !text.startsWith("/")) return null;
  return text.trim().split(/\s+/)[0].toLowerCase();
}

// --- –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –æ–Ω–æ–≤–ª–µ–Ω—å ------------------------
async function handleUpdate(update: TGUpdate): Promise<Response> {
  try {
    // 1) –ö–æ–º–∞–Ω–¥–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö
    if (update.message) {
      const chatId = update.message.chat.id;
      const text = update.message.text ?? "";
      const cmd = extractCommand(text);

      if (cmd) {
        switch (cmd) {
          case "/start":
            await start(chatId);
            break;
          case "/ping":
            await ping(chatId);
            break;
          case "/menu":
            await menu(chatId);
            break;
          case "/likepanel":
            await likepanel(chatId);
            break;
          case "/help":
            await help(chatId);
            break;
          case "/diag":
            await diag(chatId);
            break;

          // üß∞ –°–ª—É–∂–±–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ KV (–∑ —á–µ–∫-–ª–∏—Å—Ç–∞)
          case "/kvlist":
            await handleKVList(chatId);
            break;
          case "/kvget": {
            const [, key] = text.split(/\s+/, 2);
            if (!key) {
              await sendMessage(chatId, "‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /kvget <–∫–ª—é—á>");
            } else {
              await handleKVGet(chatId, key);
            }
            break;
          }

          default:
            // –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ ‚Äî –ø—ñ–¥–∫–∞–∂–µ–º–æ /help
            await sendMessage(chatId, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à—ñ—Ç—å /help");
        }
      }
    }

    // 2) –û–±—Ä–æ–±–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
    if (update.callback_query) {
      const cq = update.callback_query;

      // –ø—Ä–∏–±—Ä–∞—Ç–∏ ¬´loading‚Ä¶¬ª —É Telegram
      await answerCallbackQuery(cq.id).catch(() => {});

      // –õ–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏ (–ø–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ)
      if (await handleLikeCallback(update)) {
        return new Response(JSON.stringify({ ok: true }), {
          headers: { "content-type": "application/json" },
          status: 200,
        });
      }

      // –Ø–∫—â–æ –¥—ñ–π—à–ª–∏ —Å—é–¥–∏ ‚Äî –Ω–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –∫–Ω–æ–ø–∫–∏
      const chatId = cq.message?.chat.id;
      if (chatId) {
        await sendMessage(chatId, "ü§∑‚Äç‚ôÇÔ∏è –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –∫–Ω–æ–ø–∫–∏.");
      }
    }

    return new Response(JSON.stringify({ ok: true }), {
      headers: { "content-type": "application/json" },
      status: 200,
    });
  } catch (err) {
    // fail-safe, —â–æ–± Telegram –Ω–µ –≤—ñ–¥–∫–ª—é—á–∏–≤ –≤–µ–±—Ö—É–∫
    console.error("handleUpdate fatal:", err);
    return new Response(JSON.stringify({ ok: false }), {
      headers: { "content-type": "application/json" },
      status: 200,
    });
  }
}

// --- –§–∞–±—Ä–∏–∫–∞ –¥–ª—è src/index.ts --------------------------
export function makeRouter() {
  return {
    async handle(request: Request, env: Env, _ctx: ExecutionContext): Promise<Response> {
      setEnv(env); // —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ ENV –¥–ª—è –≤—Å—å–æ–≥–æ –∫–æ–¥—É

      if (request.method === "POST") {
        const update = (await request.json().catch(() => ({}))) as TGUpdate;
        return handleUpdate(update);
      }

      // –ü—Ä–æ—Å—Ç–∏–π healthcheck –Ω–∞ GET
      return new Response("OK", { status: 200 });
    },
  };
}