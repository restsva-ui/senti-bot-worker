// src/router.ts
import { sendMessage, answerCallback } from "./telegram/api";
import type { Update } from "./telegram/types";
import { CFG } from "./config";
import { cmdLikePanel } from "./commands/likepanel";
import { cmdKvTest, cmdResetLikes } from "./commands/kvdebug";

/** –í–∏–¥—ñ–ª—è—î –∫–æ–º–∞–Ω–¥—É –∑ —Ç–µ–∫—Å—Ç—É: /ping, /ping@bot, /PING  */
function extractCommand(text?: string): string | null {
  if (!text || !text.startsWith("/")) return null;
  const first = text.trim().split(/\s+/)[0]; // "/ping" –∞–±–æ "/ping@bot"
  const withoutMention = first.split("@")[0];
  return withoutMention.toLowerCase();
}

export async function routeUpdate(update: Update): Promise<void> {
  try {
    // 1) callback –∫–Ω–æ–ø–∫–∏ (–ª–∞–π–∫–∏)
    if (update.callback_query) {
      const cq = update.callback_query;
      const chatId = cq.message?.chat.id;
      if (!chatId) return;
      await answerCallback(cq.id, "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ");
      await cmdLikePanel(chatId, { data: cq.data || "" });
      return;
    }

    // 2) –∑–≤–∏—á–∞–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const msg = update.message;
    if (!msg || !msg.text) return;

    const chatId = msg.chat.id;
    const raw = msg.text.trim();
    const lower = raw.toLowerCase();

    // A) –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω—ñ –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ —Å–ª–µ—à–∞)
    if (lower === "üîÅ ping" || lower === "ping") {
      await sendMessage(chatId, "pong ‚úÖ");
      return;
    }
    if (lower === "üëç –ª–∞–π–∫–∏") {
      await cmdLikePanel(chatId);
      return;
    }
    if (lower === "‚ÑπÔ∏è –¥–æ–ø–æ–º–æ–≥–∞" || lower === "–¥–æ–ø–æ–º–æ–≥–∞" || lower === "help") {
      await sendMessage(chatId,
`üìÑ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/start ‚Äî –∑–∞–ø—É—Å–∫ —ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
/ping ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞
/menu ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/likepanel ‚Äî –ø–∞–Ω–µ–ª—å –ª–∞–π–∫—ñ–≤
/kvtest ‚Äî —Å—Ç–∞–Ω KV
/resetlikes ‚Äî —Å–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏`);
      return;
    }

    // B) –°–ª–µ—à-–∫–æ–º–∞–Ω–¥–∏ (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º @username)
    const cmd = extractCommand(raw);

    if (cmd === "/start") {
      await sendMessage(
        chatId,
        "üëã –ü—Ä–∏–≤—ñ—Ç! –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Cloudflare Workers. –ù–∞–ø–∏—à—ñ—Ç—å /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏."
      );
      return;
    }

    if (cmd === "/help") {
      await sendMessage(chatId,
`üìÑ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/start ‚Äî –∑–∞–ø—É—Å–∫ —ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
/ping ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞
/menu ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/likepanel ‚Äî –ø–∞–Ω–µ–ª—å –ª–∞–π–∫—ñ–≤
/kvtest ‚Äî —Å—Ç–∞–Ω KV
/resetlikes ‚Äî —Å–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏`);
      return;
    }

    if (cmd === "/ping") {
      await sendMessage(chatId, "pong ‚úÖ");
      return;
    }

    if (cmd === "/menu") {
      await sendMessage(chatId, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", {
        reply_markup: {
          keyboard: [
            [{ text: "üîÅ Ping" }],
            [{ text: "üëç –õ–∞–π–∫–∏" }],
            [{ text: "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞" }],
          ],
          resize_keyboard: true,
          one_time_keyboard: false,
        },
      });
      return;
    }

    if (cmd === "/likepanel") {
      await cmdLikePanel(chatId);
      return;
    }

    // –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏
    const isOwner = String(chatId) === String(CFG.ownerId);
    if (isOwner && cmd === "/kvtest") {
      await cmdKvTest(chatId);
      return;
    }
    if (isOwner && cmd === "/resetlikes") {
      await cmdResetLikes(chatId);
      return;
    }

    // C) –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π —Ñ–æ–ª–±–µ–∫ (—Ç–∏–º—á–∞—Å–æ–≤–æ, —â–æ–± –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ –∞–ø–¥–µ–π—Ç–∏ –¥–æ—Ö–æ–¥—è—Ç—å)
    await sendMessage(chatId, `ü§ñ –û—Ç—Ä–∏–º–∞–≤: "${raw}" (cmd: ${cmd ?? "‚Äî"})`);
  } catch (e) {
    // –ú º—è–∫–∏–π –∑–∞—Ö–∏—Å—Ç, —â–æ–± –Ω–µ –ø–∞–¥–∞—Ç–∏ —Ç–∏—Ö–æ
    try {
      const owner = Number(CFG.ownerId);
      if (owner) {
        await sendMessage(owner, `‚ö†Ô∏è Router error: ${(e as Error).message}`);
      }
    } catch { /* ignore */ }
  }
}