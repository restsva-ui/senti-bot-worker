// src/router.ts
import { setEnv, type Env, CFG, getCfg } from "./config";
import { sendMessage, answerCallbackQuery } from "./telegram/api";
import { cmdStart as start } from "./commands/start";
import { cmdPing as ping } from "./commands/ping";
import { menu } from "./commands/menu";
import { likepanel, handleLikeCallback } from "./commands/likepanel";
import { help } from "./commands/help";

// --- –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ —Ç–∏–ø–∏ Telegram ---
type TGUser = { id: number };
type TGChat = { id: number };
type TGMessage = {
  message_id: number;
  from?: TGUser;
  chat: TGChat;
  text?: string;
};
type TGCallbackQuery = {
  id: string;
  from: TGUser;
  message?: TGMessage;
  data?: string;
};
type TGUpdate = {
  update_id: number;
  message?: TGMessage;
  callback_query?: TGCallbackQuery;
};

// --- –£—Ç–∏–ª—ñ—Ç–∏ ---
function extractCommand(text?: string): string | null {
  if (!text || !text.startsWith("/")) return null;
  return text.trim().split(/\s+/)[0].toLowerCase();
}

function isFromTelegram(req: Request): boolean {
  // —è–∫—â–æ —Å–µ–∫—Ä–µ—Ç –ù–ï –∑–∞–¥–∞–Ω–∏–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ—Ö (–∑—Ä—É—á–Ω–æ –ø—ñ–¥ —á–∞—Å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ)
  const secret = getCfg("webhookSecret");
  if (!secret) return true;
  const got = req.headers.get("x-telegram-bot-api-secret-token") || "";
  return got === secret;
}

// --- –ì–æ–ª–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –æ–Ω–æ–≤–ª–µ–Ω—å ---
async function handleUpdate(update: TGUpdate): Promise<Response> {
  try {
    // 1) –ö–æ–º–∞–Ω–¥–∏ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö
    if (update.message) {
      const chatId = update.message.chat.id;
      const cmd = extractCommand(update.message.text);

      if (cmd) {
        switch (cmd) {
          case "/start":
            await start(chatId);
            break;
          case "/ping":
            await ping(chatId);
            break;
          case "/menu":
            await menu(chatId);
            break;
          case "/likepanel":
            await likepanel(chatId);
            break;
          case "/help":
            await help(chatId);
            break;
          case "/diag": {
            const lines = [
              "üß™ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Senti",
              "",
              `Telegram API base: ${getCfg("apiBase")}`,
              `BOT_TOKEN: ${getCfg("botToken") ? "‚úÖ" : "‚ùå"}`,
              "",
              "üõ†Ô∏è –ú–æ–¥–µ–ª—ñ:",
              `OpenRouter key: ${getCfg("openrouterKey") ? "‚úÖ" : "‚ùå"}`,
              `OpenRouter model: ${getCfg("openrouterModel")}`,
              `OpenRouter vision: ${getCfg("openrouterVisionModel")}`,
              "",
              "‚öôÔ∏è –Ü–Ω—à–µ:",
              `CF AI Gateway: ${getCfg("cfAiGatewayBase") ? "‚úÖ" : "‚Äî"}`,
              `OWNER_ID: ${getCfg("ownerId") || "‚Äî"}`,
            ];
            await sendMessage(chatId, lines.join("\n"));
            break;
          }
          default:
            await sendMessage(
              chatId,
              "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à—ñ—Ç—å /help"
            );
        }
      }
    }

    // 2) callback-–∫–Ω–æ–ø–∫–∏
    if (update.callback_query) {
      const cq = update.callback_query;
      const chatId = cq.message?.chat.id;
      const data = cq.data;

      // –ø—Ä–∏–±–∏—Ä–∞—î–º–æ ‚Äúloading‚Ä¶‚Äù
      await answerCallbackQuery(cq.id).catch(() => {});

      // –ª–∞–π–∫–∏ (–ø–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ)
      if (await handleLikeCallback(update)) {
        return jsonOk();
      }

      if (chatId && data) {
        if (data === "cb_ping") await ping(chatId);
        else if (data === "cb_help") await help(chatId);
        else await sendMessage(chatId, "ü§∑‚Äç‚ôÇÔ∏è –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –∫–Ω–æ–ø–∫–∏.");
      }
    }

    return jsonOk();
  } catch (e) {
    // —â–æ–± –±–∞—á–∏—Ç–∏ —Ñ–µ–π–ª–∏ –Ω–∞–≤—ñ—Ç—å –±–µ–∑ Logpush
    console.error("handleUpdate fatal:", (e as Error)?.message || e);
    return jsonOk();
  }
}

function jsonOk() {
  return new Response(JSON.stringify({ ok: true }), {
    headers: { "content-type": "application/json" },
    status: 200,
  });
}

// --- –ü—É–±–ª—ñ—á–Ω–∞ —Ñ–∞–±—Ä–∏–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞, —è–∫ –æ—á—ñ–∫—É—î src/index.ts ---
export function makeRouter() {
  return {
    async handle(request: Request, env: Env, _ctx: ExecutionContext) {
      setEnv(env);

      // –ë–∞–∑–æ–≤–∏–π healthcheck
      if (request.method === "GET") {
        return new Response("OK", { status: 200 });
      }

      // –ü—Ä–∏–π–º–∞—î–º–æ –ª–∏—à–µ –≤–∞–ª—ñ–¥–Ω—ñ POST-–∏ (—Å–µ–∫—Ä–µ—Ç –æ–ø—Ü—ñ–π–Ω–∏–π)
      if (request.method !== "POST" || !isFromTelegram(request)) {
        return new Response("OK", { status: 200 });
      }

      const update = (await request.json().catch(() => ({}))) as TGUpdate;
      return handleUpdate(update);
    },
  };
}