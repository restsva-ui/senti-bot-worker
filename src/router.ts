// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π —Ä–æ—É—Ç–µ—Ä –∞–ø–¥–µ–π—Ç–∞ Telegram
// ‚úî –ü–µ—Ä–µ–≤—ñ—Ä—è—î —à–ª—è—Ö –≤–µ–±—Ö—É–∫–∞ —Ç–∞ —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
// ‚úî –ê–∫—É—Ä–∞—Ç–Ω–æ –ø–∞—Ä—Å–∏—Ç—å JSON (–±–µ–∑ 500 –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö)
// ‚úî –õ–æ–≥—É—î –≤—Å–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ –≤ Workers Logs
// ‚úî –ó–±–µ—Ä—ñ–≥–∞—î —ñ—Å–Ω—É—é—á—É –ª–æ–≥—ñ–∫—É –∫–æ–º–∞–Ω–¥ + callback

import { setEnv, type Env } from "./config";
import { sendMessage, answerCallbackQuery } from "./telegram/api";
import { cmdStart as start } from "./commands/start";
import { cmdPing as ping } from "./commands/ping";
import { menu } from "./commands/menu";
import { likepanel, handleLikeCallback } from "./commands/likepanel";
import { help } from "./commands/help";

// ‚ùóÔ∏è–º–∞—î –∑–±—ñ–≥–∞—Ç–∏—Å—è –∑ —Ç–∏–º, —â–æ —Ç–∏ –∑–∞–¥–∞–≤ —É setWebhook (—ñ –≤ URL)
const WEBHOOK_SECRET = "senti1984";

type TGUser = { id: number };
type TGChat = { id: number };
type TGMessage = { message_id: number; from?: TGUser; chat: TGChat; text?: string };
type TGCallbackQuery = { id: string; from: TGUser; message?: TGMessage; data?: string };
type TGUpdate = { update_id: number; message?: TGMessage; callback_query?: TGCallbackQuery };

function extractCommand(text?: string): string | null {
  if (!text || !text.startsWith("/")) return null;
  return text.trim().split(/\s+/)[0].toLowerCase();
}

async function handleUpdate(update: TGUpdate): Promise<Response> {
  // 1) –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–∫–æ–º–∞–Ω–¥–∏
  if (update.message) {
    const chatId = update.message.chat.id;
    const cmd = extractCommand(update.message.text);

    if (cmd) {
      switch (cmd) {
        case "/start":
          await start(chatId);
          break;
        case "/ping":
          await ping(chatId);
          break;
        case "/menu":
          await menu(chatId);
          break;
        case "/likepanel":
          await likepanel(chatId);
          break;
        case "/help":
          await help(chatId);
          break;
        default:
          await sendMessage(chatId, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à—ñ—Ç—å /help");
      }
    }
  }

  // 2) –Ü–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (callback_query)
  if (update.callback_query) {
    const cq = update.callback_query;
    const chatId = cq.message?.chat.id;
    const data = cq.data;

    // –ø—Ä–∏–±–∏—Ä–∞—î–º–æ ‚Äúloading‚Ä¶‚Äù
    await answerCallbackQuery(cq.id).catch(() => {});

    // –ª–∞–π–∫–∏ (–ø–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ)
    try {
      const handled = await handleLikeCallback(update);
      if (handled) {
        return new Response(JSON.stringify({ ok: true }), {
          headers: { "content-type": "application/json" },
          status: 200,
        });
      }
    } catch (e) {
      // –Ω–µ –≤–∞–ª–∏–º–æ –∞–ø–¥–µ–π—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–ª–æ–≥—É—î–º–æ
      console.error("handleLikeCallback error:", (e as Error)?.message ?? e);
    }

    if (chatId && data) {
      if (data === "cb_ping") {
        await ping(chatId);
      } else if (data === "cb_help") {
        await help(chatId);
      } else {
        await sendMessage(chatId, "ü§∑‚Äç‚ôÇÔ∏è –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –∫–Ω–æ–ø–∫–∏.");
      }
    }
  }

  return new Response(JSON.stringify({ ok: true }), {
    headers: { "content-type": "application/json" },
    status: 200,
  });
}

// –ü—É–±–ª—ñ—á–Ω–∏–π —Ñ–∞–±—Ä–∏—á–Ω–∏–π –º–µ—Ç–æ–¥, —è–∫–∏–π –æ—á—ñ–∫—É—î src/index.ts
export function makeRouter() {
  return {
    async handle(request: Request, env: Env, _ctx: ExecutionContext): Promise<Response> {
      setEnv(env); // —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ ENV –¥–ª—è –≤—Å—å–æ–≥–æ –∫–æ–¥—É

      const url = new URL(request.url);
      const path = url.pathname;

      // Healthcheck –Ω–∞ GET /
      if (request.method === "GET") {
        if (path === "/" || path === "") return new Response("OK", { status: 200 });
        return new Response("Not found", { status: 404 });
      }

      // –ü—Ä–∏–π–º–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ POST –Ω–∞ —Ç–æ—á–Ω–∏–π —à–ª—è—Ö –≤–µ–±—Ö—É–∫–∞
      if (request.method !== "POST" || path !== `/webhook/${WEBHOOK_SECRET}`) {
        console.warn("Unexpected request:", request.method, path);
        return new Response("Not found", { status: 404 });
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤—ñ–¥ Telegram
      const hdrSecret = request.headers.get("x-telegram-bot-api-secret-token");
      if (hdrSecret !== WEBHOOK_SECRET) {
        console.error("Secret header mismatch", { got: hdrSecret });
        // –í–∞–∂–ª–∏–≤–æ: 403, —â–æ–± Telegram –æ–¥—Ä–∞–∑—É –∑—Ä–æ–∑—É–º—ñ–≤, —â–æ URL/secret –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ
        return new Response("Forbidden", { status: 403 });
      }

      // –ë–µ–∑–ø–µ—á–Ω–∏–π JSON-–ø–∞—Ä—Å–∏–Ω–≥
      let update: TGUpdate | null = null;
      try {
        update = (await request.json()) as TGUpdate;
      } catch (e) {
        console.error("Update JSON parse error:", (e as Error)?.message ?? e);
        // 200, —â–æ–± Telegram –Ω–µ —Ä–µ—Ç—Ä–∞—ó–≤ —Å–º—ñ—Ç—Ç—è
        return new Response(JSON.stringify({ ok: false, error: "bad_json" }), {
          headers: { "content-type": "application/json" },
          status: 200,
        });
      }

      // –¢—Ä–æ—Ö–∏ –∫–æ—Ä–∏—Å–Ω–∏—Ö –ª–æ–≥—ñ–≤ (—É–≤—ñ–º–∫–Ω–∏ Workers Logs)
      try {
        console.log("Incoming update (short):", {
          hasMessage: !!update?.message,
          hasCallback: !!update?.callback_query,
          mid: update?.message?.message_id,
          chat: update?.message?.chat?.id ?? update?.callback_query?.message?.chat?.id,
        });
      } catch {}

      // –û–±—Ä–æ–±–∫–∞ –∞–ø–¥–µ–π—Ç–∞ –∑ catch-all, —â–æ–± –Ω–µ –≤—ñ–¥–¥–∞–≤–∞—Ç–∏ 500
      try {
        return await handleUpdate(update!);
      } catch (e) {
        console.error("handleUpdate fatal:", (e as Error)?.message ?? e);
        return new Response(JSON.stringify({ ok: false, error: "internal" }), {
          headers: { "content-type": "application/json" },
          status: 200, // 200, —â–æ–± Telegram –Ω–µ –∑–∞—Å–ø–∞–º–∏–≤ —Ä–µ—Ç—Ä–∞—è–º–∏
        });
      }
    },
  };
}