import { CFG } from "./config";
import {
  sendMessage,
  editMessageText,
  answerCallbackQuery,
} from "./telegram/api";

// ===================== KV & Likes =====================

type Counts = { like: number; dislike: number };

const COUNTS_KEY = "likes:counts";
const USER_KEY = (id: number) => `likes:user:${id}`;

async function getCounts(): Promise<Counts> {
  try {
    const raw = await CFG.kv.get(COUNTS_KEY);
    if (!raw) return { like: 0, dislike: 0 };
    const parsed = JSON.parse(raw) as Partial<Counts>;
    return {
      like: Number(parsed.like ?? 0),
      dislike: Number(parsed.dislike ?? 0),
    };
  } catch {
    return { like: 0, dislike: 0 };
  }
}

async function setCounts(c: Counts) {
  await CFG.kv.put(COUNTS_KEY, JSON.stringify(c));
}

/** –û–¥–∏–Ω –≥–æ–ª–æ—Å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –ø–µ—Ä–µ–º–∏–∫–∞—Ç–∏ üëç‚ÜîÔ∏èüëé */
async function registerVote(
  userId: number,
  choice: "like" | "dislike"
): Promise<Counts> {
  const prev = await CFG.kv.get(USER_KEY(userId));
  const counts = await getCounts();

  if (prev === choice) return counts;

  // –∑–Ω—è—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≥–æ–ª–æ—Å
  if (prev === "like") counts.like = Math.max(0, counts.like - 1);
  if (prev === "dislike") counts.dislike = Math.max(0, counts.dislike - 1);

  // –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π
  if (choice === "like") counts.like += 1;
  else counts.dislike += 1;

  await CFG.kv.put(USER_KEY(userId), choice);
  await setCounts(counts);
  return counts;
}

// ===================== UI helpers =====================

function mainMenuKeyboard() {
  return {
    inline_keyboard: [
      [{ text: "üîÅ Ping", callback_data: "menu:ping" }],
      [{ text: "üëç –õ–∞–π–∫–∏", callback_data: "menu:likepanel" }],
      [{ text: "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data: "menu:help" }],
    ],
  };
}

function likesKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üëç", callback_data: "vote:like" },
        { text: "üëé", callback_data: "vote:dislike" },
      ],
    ],
  };
}

function likesCaption(c: Counts) {
  return "–û—Ü—ñ–Ω–∫–∏: üëç " + c.like + " | üëé " + c.dislike;
}

// ===================== Commands =====================

async function cmdStart(chatId: number) {
  await sendMessage(
    chatId,
    "üëã –ü—Ä–∏–≤—ñ—Ç! –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Cloudflare Workers. –ù–∞–ø–∏—à—ñ—Ç—å /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏."
  );
}

async function cmdHelp(chatId: number) {
  const text =
    "üßæ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n" +
    "/start ‚Äî –∑–∞–ø—É—Å–∫ —ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è\n" +
    "/ping ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞\n" +
    "/menu ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n" +
    "/likepanel ‚Äî –ø–∞–Ω–µ–ª—å –ª–∞–π–∫—ñ–≤\n" +
    "/kvtest ‚Äî –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ KV\n" +
    "/resetlikes ‚Äî —Å–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏\n" +
    "/help ‚Äî –¥–æ–≤—ñ–¥–∫–∞";
  await sendMessage(chatId, text);
}

async function cmdPing(chatId: number) {
  await sendMessage(chatId, "pong ‚úÖ");
}

async function cmdMenu(chatId: number) {
  await sendMessage(chatId, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", {
    reply_markup: mainMenuKeyboard(),
  });
}

async function cmdLikePanel(chatId: number) {
  const counts = await getCounts();
  await sendMessage(chatId, likesCaption(counts), {
    reply_markup: likesKeyboard(),
  });
}

// ======= Debug/maintenance =======

export async function cmdKvTest(chatId: number) {
  try {
    // —Å–ø—Ä–æ–±–∞ –¥—ñ—Å—Ç–∞—Ç–∏ —ñ –∑–∞–ø–∏—Å–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    const ok = !!CFG.kv;
    let detail = ok ? "OK" : "‚ùå";
    const counts = await getCounts();
    await sendMessage(
      chatId,
      [
        "KV —Å—Ç–∞—Ç—É—Å",
        `LIKES_KV: ${detail}`,
        "",
        "–õ—ñ—á–∏–ª—å–Ω–∏–∫–∏",
        `üëç like: ${counts.like}`,
        `üëé dislike: ${counts.dislike}`,
      ].join("\n")
    );
  } catch (e) {
    await sendMessage(chatId, "‚ùå KV –ø–æ–º–∏–ª–∫–∞: " + (e as Error).message);
  }
}

export async function cmdResetLikes(chatId: number) {
  if (!CFG.kv) {
    await sendMessage(chatId, "‚ùå KV –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π");
    return;
  }
  // –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –∫–ª—é—á—ñ likes:user:* (–ø—ñ–¥—á–∏—Å—Ç–∏–º–æ –ª–∏—à–µ –≤—ñ–¥–æ–º–∏—Ö 1000 ‚Äî –±—ñ–ª—å—à –Ω—ñ–∂ –¥–æ—Å–∏—Ç—å)
  let deleted = 0;
  const list = CFG.kv.list({ prefix: "likes:user:" });
  for await (const { name } of list) {
    await CFG.kv.delete(name);
    deleted++;
  }
  await CFG.kv.put(COUNTS_KEY, JSON.stringify({ like: 0, dislike: 0 }));
  await sendMessage(
    chatId,
    `‚úÖ –°–∫–∏–Ω—É—Ç–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ (üëç0 | üëé0) —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –≥–æ–ª–æ—Å—ñ–≤: ${deleted}`
  );
}

// ===================== Callback handlers =====================

async function cbMenu(chatId: number, messageId: number, data: string) {
  if (data === "menu:ping") {
    await editMessageText(chatId, messageId, "pong ‚úÖ", {
      reply_markup: mainMenuKeyboard(),
    });
    return;
  }
  if (data === "menu:likepanel") {
    const counts = await getCounts();
    await editMessageText(chatId, messageId, likesCaption(counts), {
      reply_markup: likesKeyboard(),
    });
    return;
  }
  if (data === "menu:help") {
    const text =
      "üßæ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n" +
      "/start ‚Äî –∑–∞–ø—É—Å–∫ —ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è\n" +
      "/ping ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞\n" +
      "/menu ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n" +
      "/likepanel ‚Äî –ø–∞–Ω–µ–ª—å –ª–∞–π–∫—ñ–≤\n" +
      "/kvtest ‚Äî –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ KV\n" +
      "/resetlikes ‚Äî —Å–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏\n" +
      "/help ‚Äî –¥–æ–≤—ñ–¥–∫–∞";
    await editMessageText(chatId, messageId, text, {
      reply_markup: mainMenuKeyboard(),
    });
    return;
  }
  await editMessageText(chatId, messageId, "ü§∑‚Äç‚ôÇÔ∏è –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –∫–Ω–æ–ø–∫–∏.", {
    reply_markup: mainMenuKeyboard(),
  });
}

async function cbVote(
  fromId: number,
  chatId: number,
  messageId: number,
  data: "vote:like" | "vote:dislike"
) {
  const choice = data === "vote:like" ? "like" : "dislike";
  const counts = await registerVote(fromId, choice);
  (globalThis as any).__cb_id = undefined; // –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ç—É—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –∞–ª–µ—Ä—Ç–æ–º
  await editMessageText(chatId, messageId, likesCaption(counts), {
    reply_markup: likesKeyboard(),
  });
}

// ===================== Entry point =====================

export async function handleUpdate(update: any) {
  try {
    // –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è / –∫–æ–º–∞–Ω–¥–∏
    if (update.message) {
      const msg = update.message;
      const chatId: number = msg.chat?.id;
      const text: string = (msg.text || "").trim();

      if (text.startsWith("/start")) return cmdStart(chatId);
      if (text.startsWith("/help")) return cmdHelp(chatId);
      if (text.startsWith("/ping")) return cmdPing(chatId);
      if (text.startsWith("/menu")) return cmdMenu(chatId);
      if (text.startsWith("/likepanel")) return cmdLikePanel(chatId);
      if (text.startsWith("/kvtest")) return cmdKvTest(chatId);
      if (text.startsWith("/resetlikes")) return cmdResetLikes(chatId);

      return cmdHelp(chatId);
    }

    // callback_query
    if (update.callback_query) {
      const cb = update.callback_query;
      const fromId: number = cb.from?.id;
      const data: string = cb.data || "";
      const chatId: number | undefined = cb.message?.chat?.id;
      const messageId: number | undefined = cb.message?.message_id;

      // –∑–±–µ—Ä–µ–∂–µ–º–æ id –¥–ª—è answerCallbackQuery (—è–∫—â–æ –¥–µ—Å—å –≤–∏–∫–ª–∏—á–µ–º–æ)
      (globalThis as any).__cb_id = cb.id;

      if (!chatId || !messageId) {
        await answerCallbackQuery();
        return;
      }

      if (data.startsWith("menu:")) {
        await answerCallbackQuery();
        await cbMenu(chatId, messageId, data);
        return;
      }

      if (data === "vote:like" || data === "vote:dislike") {
        await answerCallbackQuery("‚úÖ –ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ");
        await cbVote(fromId, chatId, messageId, data);
        return;
      }

      await answerCallbackQuery("ü§∑‚Äç‚ôÇÔ∏è –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è");
      return;
    }
  } catch (err) {
    console.error("handleUpdate fatal:", (err as Error).message || err);
  }
}