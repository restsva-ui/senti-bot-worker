// src/router.ts
import { setEnv, type Env } from "./config";
import { sendMessage, answerCallbackQuery } from "./telegram/api";
import { cmdStart as start } from "./commands/start";
import { cmdPing as ping } from "./commands/ping";
import { menu } from "./commands/menu";
import { likepanel, handleLikeCallback } from "./commands/likepanel";
import { help } from "./commands/help";

// –¢–∏–ø–∏ Telegram (–º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ)
type TGUser = { id: number };
type TGChat = { id: number };
type TGMessage = { message_id: number; from?: TGUser; chat: TGChat; text?: string };
type TGCallbackQuery = { id: string; from: TGUser; message?: TGMessage; data?: string };
type TGUpdate = { update_id: number; message?: TGMessage; callback_query?: TGCallbackQuery };

function extractCommand(text?: string): string | null {
  if (!text || !text.startsWith("/")) return null;
  return text.trim().split(/\s+/)[0].toLowerCase();
}

async function handleUpdate(update: TGUpdate): Promise<Response> {
  // 1) –ö–æ–º–∞–Ω–¥–∏ (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
  if (update.message) {
    const chatId = update.message.chat.id;
    const cmd = extractCommand(update.message.text);

    if (cmd) {
      switch (cmd) {
        case "/start":
          await start(chatId);
          break;
        case "/ping":
          await ping(chatId);
          break;
        case "/menu":
          await menu(chatId);
          break;
        case "/likepanel":
          await likepanel(chatId);
          break;
        case "/help":
          await help(chatId);
          break;
        default:
          await sendMessage(chatId, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à—ñ—Ç—å /help");
      }
    }
  }

  // 2) callback-–∫–Ω–æ–ø–∫–∏
  if (update.callback_query) {
    const cq = update.callback_query;
    const chatId = cq.message?.chat.id;
    const data = cq.data;

    // –ø–µ—Ä—à –∑–∞ –≤—Å–µ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ "loading‚Ä¶"
    await answerCallbackQuery(cq.id).catch(() => {});

    // –ª–∞–π–∫–∏ (–ø–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ)
    if (await handleLikeCallback(update)) {
      return new Response(JSON.stringify({ ok: true }), {
        headers: { "content-type": "application/json" },
        status: 200,
      });
    }

    if (chatId && data) {
      if (data === "cb_ping") await ping(chatId);
      else if (data === "cb_help") await help(chatId);
      else await sendMessage(chatId, "ü§∑‚Äç‚ôÇÔ∏è –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –∫–Ω–æ–ø–∫–∏.");
    }
  }

  return new Response(JSON.stringify({ ok: true }), {
    headers: { "content-type": "application/json" },
    status: 200,
  });
}

// –ü—É–±–ª—ñ—á–Ω–∏–π —Ñ–∞–±—Ä–∏—á–Ω–∏–π –º–µ—Ç–æ–¥, —è–∫–æ–≥–æ –æ—á—ñ–∫—É—î src/index.ts
export function makeRouter() {
  return {
    async handle(request: Request, env: Env, _ctx: ExecutionContext): Promise<Response> {
      setEnv(env); // —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ ENV –¥–ª—è –≤—Å—å–æ–≥–æ –∫–æ–¥—É

      if (request.method === "POST") {
        const update = (await request.json().catch(() => ({}))) as TGUpdate;
        return handleUpdate(update);
      }

      // –ü—Ä–æ—Å—Ç–∏–π healthcheck –Ω–∞ GET
      return new Response("OK", { status: 200 });
    },
  };
}