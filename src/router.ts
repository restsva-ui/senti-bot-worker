// src/router.ts
// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π —Ä–æ—É—Ç–µ—Ä –∞–ø–¥–µ–π—Ç–∞ Telegram.
// –ü—ñ–¥—Ç—Ä–∏–º—É—î –∫–æ–º–∞–Ω–¥–∏ /start, /ping, /menu, /likepanel, /help —ñ callback_query.

import { sendMessage, answerCallbackQuery } from "./telegram";

// ‚ö†Ô∏è –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä–µ–∞–ª—å–Ω–∏—Ö –Ω–∞–∑–≤ –µ–∫—Å–ø–æ—Ä—Ç—ñ–≤ —É —Ñ–∞–π–ª–∞—Ö –∫–æ–º–∞–Ω–¥:
import { cmdStart as start } from "./commands/start";
import { cmdPing as ping } from "./commands/ping";
import { menu } from "./commands/menu";
import { openLikePanel as likepanel, handleLikeCallback } from "./commands/likepanel";
import { help } from "./commands/help";

type TGUser = { id: number };
type TGChat = { id: number };
type TGMessage = { message_id: number; from?: TGUser; chat: TGChat; text?: string };
type TGCallbackQuery = { id: string; from: TGUser; message?: TGMessage; data?: string };

type TGUpdate = {
  update_id: number;
  message?: TGMessage;
  callback_query?: TGCallbackQuery;
};

function extractCommand(text: string | undefined): string | null {
  if (!text) return null;
  if (!text.startsWith("/")) return null;
  const cmd = text.trim().split(/\s+/)[0].toLowerCase();
  return cmd;
}

export async function handleUpdate(update: TGUpdate): Promise<Response> {
  try {
    // 1) –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏
    if (update.message) {
      const chatId = update.message.chat.id;
      const cmd = extractCommand(update.message.text);

      if (cmd) {
        switch (cmd) {
          case "/start":
            await start(chatId);
            break;
          case "/ping":
            await ping(chatId);
            break;
          case "/menu":
            await menu(chatId);
            break;
          case "/likepanel":
            await likepanel(chatId);
            break;
          case "/help":
            await help(chatId);
            break;
          default:
            await sendMessage(chatId, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à—ñ—Ç—å /help");
        }
      }
    }

    // 2) –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    if (update.callback_query) {
      const cq = update.callback_query;
      const chatId = cq.message?.chat.id;
      const data = cq.data;

      // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ "loading‚Ä¶" —É –∫–ª—ñ—î–Ω—Ç—ñ
      await answerCallbackQuery(cq.id).catch(() => {});

      if (chatId && data) {
        // —Ç–≤–æ—ó —Å—Ç–∞—Ä—ñ –∫–Ω–æ–ø–∫–∏ –∑ –º–µ–Ω—é
        if (data === "cb_ping") {
          await ping(chatId);
        } else if (data === "cb_likepanel") {
          await likepanel(chatId);
        } else if (data === "cb_help") {
          await help(chatId);
        }
        // –Ω–æ–≤—ñ callback-–∏ –∑ likepanel.ts: "like:up"/"like:down"/"like:panel"
        else if (data.startsWith("like:")) {
          await handleLikeCallback({} as any, update); // env –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è answer/edit —É —Ç–≤–æ—ó–π —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó tg()
        } else {
          await sendMessage(chatId, "ü§∑‚Äç‚ôÇÔ∏è –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –∫–Ω–æ–ø–∫–∏.");
        }
      }
    }

    return new Response(JSON.stringify({ ok: true }), {
      headers: { "content-type": "application/json" },
      status: 200,
    });
  } catch (err: any) {
    try {
      console.error("Router error:", typeof err?.message === "string" ? err.message : String(err));
    } catch {}
    return new Response(JSON.stringify({ ok: false, error: "internal" }), {
      headers: { "content-type": "application/json" },
      status: 500,
    });
  }
}