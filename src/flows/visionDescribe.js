// src/flows/visionDescribe.js
// –û–ø–∏—Å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è + –ø—Ä–æ–±–∞ –≤–∏—è–≤–ª–µ–Ω–Ω—è –º—ñ—Å—Ü—è (PLACE=...) —ñ –ª—ñ–Ω–∫ –Ω–∞ Google Maps.

import { askVision } from "../lib/modelRouter.js";
import { buildVisionHintByLang, makeVisionUserPrompt } from "./visionPolicy.js";

function buildMapsLink(placeText) {
  const q = encodeURIComponent(String(placeText || "").trim());
  if (!q) return "";
  return `https://www.google.com/maps/search/?api=1&query=${q}`;
}

export async function visionDescribe(env, lang, imageUrl, userQuestion = "") {
  const hint = buildVisionHintByLang(lang);
  const userPrompt = makeVisionUserPrompt(userQuestion);

  const res = await askVision(env, { imageUrl, systemHint: hint, userPrompt });
  let text = String(res?.text || "").trim();
  if (!text) return "–ù–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π.";

  // –°–ø—Ä–æ–±–∞ –≤–∏–¥—ñ–ª–∏—Ç–∏ PLACE=...
  let place = "";
  const m = text.match(/^\s*PLACE\s*=\s*(.+?)\s*$/mi);
  if (m) {
    place = m[1].trim();
    // –ø—Ä–∏–±–µ—Ä–µ–º–æ —Ç–µ—Ö—Ä—è–¥–æ–∫ PLACE= –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É, —â–æ–± –Ω–µ —Å–≤—ñ—Ç–∏—Ç–∏ —Å–∏—Ä–∏–º
    text = text.replace(m[0], "").replace(/\n{2,}/g, "\n").trim();
  }

  if (place) {
    const maps = buildMapsLink(place);
    text += `\n\nüìç –ú—ñ—Å—Ü–µ/–æ—Ä—ñ—î–Ω—Ç–∏—Ä: ${place}\nüîó –ö–∞—Ä—Ç–∞: ${maps}`;
  }
  return text;
}
