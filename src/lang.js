// src/lang.js ‚Äî language & NER utils for Senti v4.0

// ===== KV helpers for chat language =====
const kvKey = (chatId, key) => `chat:${chatId}:${key}`;
export async function getChatLang(kv, chatId) {
  try { return await kv.get(kvKey(chatId, "lang")); } catch { return null; }
}
export async function setChatLang(kv, chatId, langCode) {
  try { await kv.put(kvKey(chatId, "lang"), langCode, { expirationTtl: 90 * 24 * 3600 }); } catch {}
}

// ===== Lightweight language detection =====
const langHints = {
  uk: /[—ñ—ó—î“ë–Ü–á–Ñ“ê]|(–ø—Ä–∏–≤—ñ—Ç|–±—É–¥—å –ª–∞—Å–∫–∞|–¥—è–∫—É—é|—Å—å–æ–≥–æ–¥–Ω—ñ|–≥—Ä–Ω|–¥–æ–ª–∞—Ä|—î–≤—Ä–æ)/i,
  ru: /[—ë–™–™—ã–´—ç–≠]|(–ø—Ä–∏–≤–µ—Ç|–ø–æ–∂–∞–ª—É–π—Å—Ç–∞|—Å–ø–∞—Å–∏–±–æ|—Å–µ–≥–æ–¥–Ω—è|—Ä—É–±|–¥–æ–ª–ª–∞—Ä|–µ–≤—Ä–æ)/i,
  de: /\b(und|oder|nicht|heute|morgen|euro|danke|bitte)\b/i,
  fr: /\b(et|ou|pas|aujourd‚Äôhui|demain|merci|s‚Äôil vous pla√Æt|euro)\b/i,
  en: /\b(and|or|please|thanks|today|tomorrow|usd|euro|dollar)\b/i,
};
export async function detectLang(text) {
  if (!text) return "uk";
  const t = text.trim();
  if (langHints.uk.test(t)) return "uk";
  if (langHints.ru.test(t)) return "ru";
  if (langHints.de.test(t)) return "de";
  if (langHints.fr.test(t)) return "fr";
  if (langHints.en.test(t)) return "en";
  if (/[A-Za-z]/.test(t) && !/[–ê-–Ø–∞-—è–Ü–á–Ñ“ê–Å–™–´–≠]/.test(t)) return "en";
  return "uk";
}

// ===== Persona tone =====
export function ensurePersonaTone({ name, lang, genderTone }) {
  const first = (name || "").toString().trim();
  if (first) return first;
  if (genderTone === "fem") return lang==="uk"?"–ø–æ–¥—Ä—É–≥–æ":lang==="ru"?"–ø–æ–¥—Ä—É–≥–∞":"sis";
  if (genderTone === "masc") return lang==="uk"?"–¥—Ä—É–∂–µ":lang==="ru"?"–¥—Ä—É–≥":"bro";
  return lang==="uk"?"–¥—Ä—É–∂–µ":lang==="ru"?"–¥—Ä—É–≥":"friend";
}

// –ñ–∏–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è ‚Äî –±–µ–∑ –¥—É–±–ª—è–∂—É –∑–≤–µ—Ä—Ç–∞–Ω–Ω—è
export function buildGreet({ name, lang, genderTone }) {
  const first = (name || "").toString().trim();
  const call = first
    ? first
    : genderTone === "fem" ? (lang==="uk"?"–ø–æ–¥—Ä—É–≥–æ":lang==="ru"?"–ø–æ–¥—Ä—É–≥–∞":"sis")
    : genderTone === "masc" ? (lang==="uk"?"–¥—Ä—É–∂–µ":lang==="ru"?"–¥—Ä—É–≥":"bro")
    : (lang==="uk"?"–¥—Ä—É–∂–µ":lang==="ru"?"–¥—Ä—É–≥":"friend");
  const emoji = ["üòâ","üòä","ü§ù","‚ú®","üöÄ"][Math.floor(Math.random()*5)];
  if (lang === "uk") return `${call}, –ø—Ä–∏–≤—ñ—Ç ${emoji} –Ø Senti. –ù–∞–ø–∏—à–∏ –∫—ñ–ª—å–∫–∞ —Å–ª—ñ–≤ ‚Äî –¥–æ–ø–æ–º–æ–∂—É.`;
  if (lang === "ru") return `${call}, –ø—Ä–∏–≤–µ—Ç ${emoji} –Ø Senti. –ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–ª–æ–≤ ‚Äî –ø–æ–º–æ–≥—É.`;
  if (lang === "de") return `${call}, hallo ${emoji} Ich bin Senti. Schreib kurz, wobei helfen.`;
  if (lang === "fr") return `${call}, salut ${emoji} Je suis Senti. Dis-moi en quelques mots.`;
  return `${call}, hi ${emoji} I'm Senti ‚Äî tell me in a few words and I'll help.`;
}

// ===== Gender tone extractor =====
export function extractGenderTone(text) {
  const t = (text || "").toLowerCase();
  if (!t) return "neutral";
  if (/(–ø–æ–¥—Ä—É–≥–æ|—Å–µ—Å—Ç—Ä–æ|sis|—è\s+–¥—ñ–≤—á–∏–Ω–∞|—è\s+–∂–µ–Ω—â–∏–Ω–∞)/i.test(t)) return "fem";
  if (/(–¥—Ä—É–∂–µ|–±—Ä–æ|bro|—è\s+—Ö–ª–æ–ø–µ—Ü—å|—è\s+–º—É–∂—á–∏–Ω–∞)/i.test(t)) return "masc";
  return "neutral";
}

// ===== Numbers & currency NER =====
const CURR_MAP = new Map([
  ["uah","UAH"], ["–≥—Ä–Ω","UAH"], ["–≥—Ä–∏–≤–Ω","UAH"], ["–≥—Ä–∏–≤–Ω—è","UAH"], ["–≥—Ä–∏–≤–Ω—ñ","UAH"], ["‚Ç¥","UAH"],
  ["usd","USD"], ["$","USD"], ["–¥–æ–ª–∞—Ä","USD"], ["–¥–æ–ª–∞—Ä—ñ–≤","USD"], ["–¥–æ–ª–ª–∞—Ä—ã","USD"], ["–¥–æ–ª–ª–∞—Ä","USD"], ["–±–∞–∫—Å","USD"], ["–±–∞–∫—Å–∏","USD"],
  ["eur","EUR"], ["‚Ç¨","EUR"], ["—î–≤—Ä–æ","EUR"], ["–µ–≤—Ä–æ","EUR"],
]);
function normCurrencyToken(tok) {
  if (!tok) return null;
  const k = tok.toLowerCase();
  return CURR_MAP.get(k) || tok.toUpperCase();
}
function findCurrencies(text) {
  const res = [];
  const patterns = [
    /uah|–≥—Ä–Ω|–≥—Ä–∏–≤–Ω\w*|‚Ç¥/gi,
    /usd|\$|–¥–æ–ª–ª–∞—Ä\w*|–¥–æ–ª–∞—Ä\w*|–±–∞–∫—Å\w*/gi,
    /eur|‚Ç¨|—î–≤—Ä–æ|–µ–≤—Ä–æ/gi,
  ];
  for (const p of patterns) {
    const m = text.match(p);
    if (m) res.push(...m.map(normCurrencyToken));
  }
  return [...new Set(res)];
}

export function parseNumbersAndCurrency(text) {
  const out = { amount: null, baseCurrency: null, quoteCurrency: null };
  if (!text) return out;
  const t = text.replace(/\s+/g, " ").trim();

  const mAmtCompact = t.match(/(\d+(?:[.,]\d+)?)(?=\s*[‚Ç¨$‚Ç¥]|(?:\s|$))/);
  const mAmtLoose = t.match(/(\d+(?:[.,]\d+)?)/);
  let amount = null;
  if (mAmtCompact) amount = Number(mAmtCompact[1].replace(",", "."));
  else if (mAmtLoose) amount = Number(mAmtLoose[1].replace(",", "."));
  out.amount = amount ?? 1;

  const curList = findCurrencies(t);
  let base = null, quote = null;

  const dir = t.match(/(?:–≤|—É|to|in)\s+([A-Za-z–ê-–Ø–∞-—è–Ü–á–Ñ“ê—ë–Å‚Ç¨$‚Ç¥]+)\b/i);
  if (dir && curList.length) {
    const qTok = dir[1].replace(/[^\p{L}‚Ç¨$‚Ç¥]/gu, "");
    quote = normCurrencyToken(qTok);
  }

  const afterAmt = t.match(/(\d+(?:[.,]\d+)?)[\s]*([‚Ç¨$‚Ç¥]|usd|eur|uah|–≥—Ä–Ω|–≥—Ä–∏–≤–Ω\w*|–¥–æ–ª–∞—Ä\w*|–¥–æ–ª–ª–∞—Ä\w*|—î–≤—Ä–æ|–µ–≤—Ä–æ)/i);
  if (afterAmt) base = normCurrencyToken(afterAmt[2]);

  if (!base && curList.length) base = curList[0];
  if (!quote && curList.length > 1) quote = curList.find(c => c !== base) || null;

  if (!base && /–∫—É—Ä—Å\s+(–≥—Ä–∏–≤–Ω|–≥—Ä–∏–≤–Ω—ñ|uah|–≥—Ä–Ω)/i.test(t)) base = "UAH";
  if (!base && /–∫—É—Ä—Å\s+(–¥–æ–ª–∞—Ä|usd|\$)/i.test(t)) base = "USD";
  if (!base && /–∫—É—Ä—Å\s+(—î–≤—Ä–æ|eur|‚Ç¨)/i.test(t)) base = "EUR";

  if (base && !quote) quote = base === "UAH" ? "USD" : "UAH";

  out.baseCurrency = base || null;
  out.quoteCurrency = quote || null;
  return out;
}