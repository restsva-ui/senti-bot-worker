// src/lib/i18n.js
const DICTS = {
  uk: {
    hello: (name) => `–ü—Ä–∏–≤—ñ—Ç${name ? `, ${name}` : ""}! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?`,
    whoami: "‚ú® –Ø —ñ—Å–Ω—É—é —è–∫ –Ω–µ–∑–∞–ª–µ–∂–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫. –ú–æ—è –º–µ—Ç–∞ ‚Äî –Ω–∞–¥–∞–≤–∞—Ç–∏ –≤–∞–º —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –¥–æ–ø–æ–º–æ–≥—É.",
    learn_hint: "üß† –†–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è.\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–∞—Ç—Ç—é/–≤—ñ–¥–µ–æ –∞–±–æ —Ñ–∞–π–ª (PDF, DOCX, TXT) ‚Äî –¥–æ–¥–∞–º —É —á–µ—Ä–≥—É –Ω–∞–≤—á–∞–Ω–Ω—è.",
    learn_added: "‚úÖ –î–æ–¥–∞–Ω–æ –≤ —á–µ—Ä–≥—É –Ω–∞–≤—á–∞–Ω–Ω—è. –û–ø—Ä–∞—Ü—é—é —É —Ñ–æ–Ω—ñ —Ç–∞ –±—É–¥—É –≥–æ—Ç–æ–≤–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.",
    admin_header: "Admin panel (quick diagnostics):",
    btn_open_checklist: "–í—ñ–¥–∫—Ä–∏—Ç–∏ Checklist",
    btn_energy: "–ö–µ—Ä—É–≤–∞–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—î—é",
    btn_learn: "–ù–∞–≤—á–∞–Ω–Ω—è (Learn)",
  },
  en: {
    hello: (name) => `Hi${name ? `, ${name}` : ""}! How can I help?`,
    whoami: "‚ú® I am an independent assistant. My purpose is to help you with information and tasks.",
    learn_hint: "üß† Learning mode.\nSend me a link to an article/video or a file (PDF, DOCX, TXT). I‚Äôll queue it for learning.",
    learn_added: "‚úÖ Added to learning queue. I‚Äôll process it in the background and be ready to answer questions.",
    admin_header: "Admin panel (quick diagnostics):",
    btn_open_checklist: "Open Checklist",
    btn_energy: "Energy controls",
    btn_learn: "Learning (Learn)",
  },
  ru: {
    hello: (name) => `–ü—Ä–∏–≤–µ—Ç${name ? `, ${name}` : ""}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`,
    whoami: "‚ú® –Ø –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ú–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∑–∞–¥–∞—á–∞–º–∏.",
    learn_hint: "üß† –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è.\n–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é/–≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–∞–π–ª (PDF, DOCX, TXT) ‚Äî –¥–æ–±–∞–≤–ª—é –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—É—á–µ–Ω–∏—è.",
    learn_added: "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—É—á–µ–Ω–∏—è. –û–±—Ä–∞–±–æ—Ç–∞—é –≤ —Ñ–æ–Ω–µ –∏ –±—É–¥—É –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.",
    admin_header: "Admin panel (quick diagnostics):",
    btn_open_checklist: "–û—Ç–∫—Ä—ã—Ç—å Checklist",
    btn_energy: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–µ–π",
    btn_learn: "–û–±—É—á–µ–Ω–∏–µ (Learn)",
  },
  de: {
    hello: (name) => `Hallo${name ? `, ${name}` : ""}! Wobei kann ich helfen?`,
    whoami: "‚ú® Ich bin ein unabh√§ngiger Assistent. Mein Ziel ist, mit Information und Aufgaben zu helfen.",
    learn_hint: "üß† Lernmodus.\nSende mir einen Link (Artikel/Video) oder eine Datei (PDF, DOCX, TXT). Ich stelle es in die Lernwarteschlange.",
    learn_added: "‚úÖ Zur Lernwarteschlange hinzugef√ºgt. Ich verarbeite es im Hintergrund und beantworte sp√§ter Fragen.",
    admin_header: "Admin panel (quick diagnostics):",
    btn_open_checklist: "Checklist √∂ffnen",
    btn_energy: "Energieverwaltung",
    btn_learn: "Lernen (Learn)",
  },
};

export function pickLang(code) {
  const c = String(code || "").toLowerCase();
  if (c.startsWith("uk")) return "uk";
  if (c.startsWith("ru")) return "ru";
  if (c.startsWith("de")) return "de";
  if (c.startsWith("en")) return "en";
  return "en";
}

export function t(lang, key, ...args) {
  const L = DICTS[lang] || DICTS.en;
  const val = L[key] ?? DICTS.en[key] ?? key;
  return typeof val === "function" ? val(...args) : val;
}

/* ---- –°—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑ –≤–∞—à–∏–º–∏ —ñ–º–ø–æ—Ä—Ç–∞–º–∏ ----
   –£ –∫–æ–¥—ñ –∑—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è —ñ–º–ø–æ—Ä—Ç–∏ pickReplyLanguage/detectFromText.
   –î–æ–¥–∞—î–º–æ —ó—Ö —è–∫ –∞–ª—ñ–∞—Å–∏, —â–æ–± –¥–µ–ø–ª–æ–π –Ω–µ –ª–∞–º–∞–≤—Å—è. */
export function pickReplyLanguage(update) {
  const code =
    update?.message?.from?.language_code ||
    update?.callback_query?.from?.language_code ||
    "en";
  return pickLang(code);
}

// –î—É–∂–µ –ø—Ä–æ—Å—Ç–∞ –¥–µ—Ç–µ–∫—Ü—ñ—è –∑–∞ —Ç–µ–∫—Å—Ç–æ–º (fallback). –ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É.
export function detectFromText(text = "") {
  const s = (text || "").toLowerCase();
  if (/[–∞-—è—ñ—ó—î“ë]/.test(s)) return "uk";
  if (/[–∞-—è—ë]/.test(s)) return "ru";
  if (/[a-z]/.test(s)) return "en";
  return "en";
} 
