// src/lib/kvChecklist.js
// –ß–µ–∫–ª—ñ—Å—Ç + –°—Ç–∞—Ç—É—Ç (KV) + Repo/–∞—Ä—Ö—ñ–≤–∏ (R2) + –ª–µ–≥–∫—ñ HTML-—Ä–µ–Ω–¥–µ—Ä–∏.
// –ë–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π ‚Äî —Å—É–º—ñ—Å–Ω–æ –∑ Cloudflare Workers.

/* =========================== –£–¢–ò–õ–Ü–¢–ò ============================ */

function esc(s = "") {
  return String(s)
    .replaceAll("&", "&amp;")
    .replaceAll("<", "&lt;")
    .replaceAll(">", "&gt;");
}

function fmtLocal(dt, tz) {
  try {
    return new Date(dt).toLocaleString("uk-UA", {
      timeZone: tz || "Europe/Kyiv",
      hour12: false,
    });
  } catch {
    return String(dt);
  }
}

function bytesFmt(n) {
  const b = Number(n || 0);
  if (b < 1024) return `${b} B`;
  const kb = b / 1024; if (kb < 1024) return `${kb.toFixed(1)} KB`;
  const mb = kb / 1024; if (mb < 1024) return `${mb.toFixed(1)} MB`;
  const gb = mb / 1024; return `${gb.toFixed(2)} GB`;
}

function pickKV(env) {
  // –ì–Ω—É—á–∫–æ –ø—ñ–¥—Ö–æ–ø–ª—é—î–º–æ –±—É–¥—å-—è–∫–∏–π –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö KV, —â–æ–± –Ω–µ –ø–∞–¥–∞—Ç–∏ –Ω–∞ –¥–µ–≤—ñ
  return env.CHECKLIST_KV || env.STATE_KV || env.TODO_KV || env.LEARN_QUEUE_KV;
}

/* ==================== –ö–õ–Æ–ß–Ü –¢–ê –°–•–ï–ú–ê –£ KV ====================== */

// Checklist
const CHECK_TEXT = "checklist:text";
const CHECK_LOG  = "checklist:log";

// Statut
const STATUT_TEXT = "statut:text";
const STATUT_LOG  = "statut:log";

/* =========================== CHECKLIST ========================== */

export async function readChecklist(env) {
  const kv = pickKV(env);
  return (await kv.get(CHECK_TEXT)) || "";
}

export async function writeChecklist(env, text) {
  const kv = pickKV(env);
  await kv.put(CHECK_TEXT, String(text || ""));
  await appendChecklistLog(env, `‚úçÔ∏è Checklist replaced (${(String(text||"")).length} chars)`);
}

export async function appendChecklist(env, line) {
  const cur = await readChecklist(env);
  const next = cur ? `${cur}\n${line}` : String(line || "");
  await writeChecklist(env, next);
  await appendChecklistLog(env, `‚ûï Checklist appended: ${String(line||"").slice(0,80)}`);
}

async function appendChecklistLog(env, msg) {
  const kv = pickKV(env);
  const cur = (await kv.get(CHECK_LOG)) || "";
  const now = fmtLocal(Date.now(), env.TIMEZONE);
  const line = `[${now}] ${msg}`;
  const next = cur ? `${line}\n${cur}` : line;
  // –æ–±–º–µ–∂–∏–º–æ –ª–æ–≥ –¥–æ ~20–∫ —Å–∏–º–≤–æ–ª—ñ–≤, —â–æ–± –Ω–µ —Ä–æ–∑–¥—É–≤–∞—Ç–∏ KV
  await kv.put(CHECK_LOG, next.slice(0, 20000));
}

export async function readChecklistLog(env) {
  const kv = pickKV(env);
  return (await kv.get(CHECK_LOG)) || "";
}

/* ============================ STATUT ============================ */

export async function readStatut(env) {
  const kv = pickKV(env);
  return (await kv.get(STATUT_TEXT)) || "";
}

export async function writeStatut(env, text) {
  const kv = pickKV(env);
  await kv.put(STATUT_TEXT, String(text || ""));
  await appendStatutLog(env, `‚úçÔ∏è Statut replaced (${(String(text||"")).length} chars)`);
}

export async function appendStatut(env, line) {
  const cur = await readStatut(env);
  const next = cur ? `${cur}\n${line}` : String(line || "");
  await writeStatut(env, next);
  await appendStatutLog(env, `‚ûï Statut appended: ${String(line||"").slice(0,80)}`);
}

async function appendStatutLog(env, msg) {
  const kv = pickKV(env);
  const cur = (await kv.get(STATUT_LOG)) || "";
  const now = fmtLocal(Date.now(), env.TIMEZONE);
  const line = `[${now}] ${msg}`;
  const next = cur ? `${line}\n${cur}` : line;
  await kv.put(STATUT_LOG, next.slice(0, 20000));
}

export async function readStatutLog(env) {
  const kv = pickKV(env);
  return (await kv.get(STATUT_LOG)) || "";
}

/* ============================ REPO (R2) =========================
   –ù–∞—à ‚Äú—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –∑ –∞—Ä—Ö—ñ–≤–∞–º–∏ –Ω–∞ html‚Äù.
   –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞—Ä—Ö—ñ–≤–∏ —É R2 –ø—ñ–¥ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º: repo/<YYYY-MM-DD>/<timestamp>_<name>
   –¢–∞–∫–æ–∂ —É —Ü—å–æ–º—É –∂ –º–æ–¥—É–ª—ñ —î —Ñ—É–Ω–∫—Ü—ñ—è saveArchive(env, reason), —è–∫–∞
   –∑–±–µ—Ä—ñ–≥–∞—î –∞–∫—Ç—É–∞–ª—å–Ω–∏–π Checklist —É –≤–∏–≥–ª—è–¥—ñ txt-—Ñ–∞–π–ª–∞ –¥–æ R2 (–¥–ª—è –±–µ–∫–∞–ø—É).
================================================================= */

function r2(env) { return env?.LEARN_BUCKET || null; }

export async function listRepo(env, { prefix = "repo/", limit = 200 } = {}) {
  const bucket = r2(env);
  if (!bucket) return { ok: true, items: [], note: "No R2 binding" };
  const items = [];
  let cursor = undefined;
  let safety = 0;
  do {
    // Cloudflare R2 API supports list with cursor
    const res = await bucket.list({ prefix, limit: Math.min(1000, limit), cursor });
    for (const o of res.objects || []) {
      items.push({
        key: o.key,
        size: o.size || 0,
        uploaded: o.uploaded || o.etag || "",
      });
      if (items.length >= limit) break;
    }
    cursor = res.truncated ? res.cursor : undefined;
    safety++;
  } while (cursor && items.length < limit && safety < 20);
  // –°–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤—ñ—à–µ –∑–≤–µ—Ä—Ö—É
  items.sort((a, b) => (a.key < b.key ? 1 : -1));
  return { ok: true, items };
}

export async function putRepoFile(env, name, bytes, contentType = "application/octet-stream") {
  const bucket = r2(env);
  if (!bucket) return { ok: false, error: "R2 not bound (LEARN_BUCKET missing)" };
  const date = new Date();
  const day = date.toISOString().slice(0, 10);
  const safe = String(name || "file").replace(/[^\w.\-]+/g, "_").slice(0, 120);
  const key = `repo/${day}/${Date.now()}_${safe}`;
  await bucket.put(key, bytes, { httpMetadata: { contentType } });
  return { ok: true, key };
}

/* ============ –ë–µ–∫–∞–ø —á–µ–∫–ª—ñ—Å—Ç–∞ —É R2 (–∞—Ä—Ö—ñ–≤) ====================== */

export async function saveArchive(env, reason = "manual") {
  const bucket = r2(env);
  const text = await readChecklist(env);
  if (!bucket || !text) {
    await appendChecklistLog(env, `‚õî archive skipped (bucket:${!!bucket}, text:${text ? "yes" : "no"})`);
    return { ok: false, skipped: true };
  }
  const day = new Date().toISOString().slice(0, 10);
  const name = `checklist_${day}_${Date.now()}_${reason}.txt`;
  const key = `repo/${day}/${name.replace(/[^\w.\-]+/g, "_")}`;
  await bucket.put(key, new TextEncoder().encode(text), {
    httpMetadata: { contentType: "text/plain; charset=utf-8" },
  });
  await appendChecklistLog(env, `üì¶ archived checklist ‚Üí R2:${key}`);
  return { ok: true, key };
}

/* =========================== HTML-VIEWS =========================
   –õ–µ–≥–∫—ñ —Ä–µ–Ω–¥–µ—Ä–∏ HTML –¥–ª—è:
   - checklistHtml(env)
   - statutHtml(env)
   - repoHtml(env)
================================================================= */

function baseCss() {
  return `
<style>
  :root { color-scheme: dark; }
  html,body{margin:0;padding:0;background:#0b0f14;color:#e6edf3;
    font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;}
  .wrap{max-width:980px;margin:0 auto;padding:12px}
  .card{background:#11161d;border:1px solid #1f2937;border-radius:12px;padding:14px;margin:10px 0}
  .row{display:flex;gap:10px;align-items:center;justify-content:space-between;flex-wrap:wrap}
  .btn{display:inline-block;padding:10px 14px;border-radius:10px;background:#223449;border:1px solid #2d4f6b;color:#e6edf3;text-decoration:none}
  .btn:hover{background:#2a3f55}
  .mono{font-family: ui-monospace, SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace}
  textarea{width:100%;min-height:200px;border-radius:10px;border:1px solid #2d4f6b;background:#0b1117;color:#e6edf3;padding:10px}
  input[type="text"], input[type="url"]{width:100%;border-radius:10px;border:1px solid #2d4f6b;background:#0b1117;color:#e6edf3;padding:10px}
  pre{white-space:pre-wrap;background:#0b1117;border:1px solid #1f2937;border-radius:10px;padding:10px}
  table{width:100%;border-collapse:collapse}
  th,td{padding:8px;border-bottom:1px solid #1f2937}
  .muted{opacity:.8}
  /* –ú–æ–±—ñ–ª—å–Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü—ñ—è */
  @media (max-width: 720px){
    .wrap{padding:10px}
    .row{gap:8px}
    .btn{padding:9px 12px}
  }
</style>`;
}

/* --------------------------- Checklist -------------------------- */

export async function checklistHtml(env) {
  const css = baseCss();
  const txt = await readChecklist(env);
  const log = await readChecklistLog(env);

  return `
${css}
<div class="wrap">
  <div class="card row">
    <h2 style="margin:0">üìù Checklist</h2>
    <div class="row">
      <a class="btn" href="/admin/checklist/html">–û–Ω–æ–≤–∏—Ç–∏</a>
      <a class="btn" href="/admin/checklist/with-energy/html">–í–∏–≥–ª—è–¥ –∑ –µ–Ω–µ—Ä–≥—ñ—î—é</a>
      <form method="post" action="/admin/checklist?archive" style="display:inline">
        <button class="btn" type="submit">üì¶ –ê—Ä—Ö—ñ–≤—É–≤–∞—Ç–∏ –≤ Repo (R2)</button>
      </form>
    </div>
  </div>

  <div class="card">
    <form method="post" action="/admin/checklist?replace">
      <p class="muted">–ü–æ–≤–Ω–∞ –∑–∞–º—ñ–Ω–∞</p>
      <textarea name="text" placeholder="–í–µ—Å—å —á–µ–∫–ª—ñ—Å—Ç‚Ä¶">${esc(txt)}</textarea>
      <p><button class="btn" type="submit">üíæ –ó–±–µ—Ä–µ–≥—Ç–∏</button></p>
    </form>
  </div>

  <div class="card">
    <form method="post" action="/admin/checklist?append">
      <p class="muted">–î–æ–¥–∞—Ç–∏ —Ä—è–¥–æ–∫</p>
      <input type="text" name="line" placeholder="–ö–æ—Ä–æ—Ç–∫–∞ –∑–º—ñ–Ω–∞ / –ø—É–Ω–∫—Ç" />
      <p><button class="btn" type="submit">‚ûï –î–æ–¥–∞—Ç–∏</button></p>
    </form>
  </div>

  <div class="card">
    <b>–û—Å—Ç–∞–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è</b>
    <pre>${esc(log || "‚Äî")}</pre>
  </div>
</div>`;
}

/* ---------------------------- Statut ---------------------------- */

export async function statutHtml(env) {
  const css = baseCss();
  const txt = await readStatut(env);
  const log = await readStatutLog(env);

  return `
${css}
<div class="wrap">
  <div class="card row">
    <h2 style="margin:0">üìú –°—Ç–∞—Ç—É—Ç</h2>
    <div class="row">
      <a class="btn" href="/admin/statut/html">–û–Ω–æ–≤–∏—Ç–∏</a>
    </div>
  </div>

  <div class="card">
    <form method="post" action="/admin/statut?replace">
      <p class="muted">–ü–æ–≤–Ω–∞ –∑–∞–º—ñ–Ω–∞</p>
      <textarea name="text" placeholder="–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Ç—É‚Ä¶">${esc(txt)}</textarea>
      <p><button class="btn" type="submit">üíæ –ó–±–µ—Ä–µ–≥—Ç–∏</button></p>
    </form>
  </div>

  <div class="card">
    <form method="post" action="/admin/statut?append">
      <p class="muted">–î–æ–¥–∞—Ç–∏ —Ä—è–¥–æ–∫</p>
      <input type="text" name="line" placeholder="–î–æ–¥–∞—Ç–∏ —Ä—è–¥–æ–∫" />
      <p><button class="btn" type="submit">‚ûï –î–æ–¥–∞—Ç–∏</button></p>
    </form>
  </div>

  <div class="card">
    <b>–û—Å—Ç–∞–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è</b>
    <pre>${esc(log || "‚Äî")}</pre>
  </div>
</div>`;
}

/* ------------------------------ Repo ---------------------------- */

export async function repoHtml(env) {
  const css = baseCss();
  const bucket = r2(env);
  if (!bucket) {
    return `
${css}
<div class="wrap">
  <div class="card">
    <h2>üì¶ Repo</h2>
    <p class="muted">R2 bucket –Ω–µ –ø—Ä–∏–≤‚Äô—è–∑–∞–Ω–∏–π (LEARN_BUCKET).</p>
  </div>
</div>`;
  }

  const listing = await listRepo(env, { prefix: "repo/", limit: 400 }).catch(() => ({ ok:false, items:[] }));
  const items = Array.isArray(listing.items) ? listing.items : [];

  const rows = items.length
    ? items.map(o => {
        const name = o.key.split("/").pop();
        const date = o.key.split("/")[1] || "";
        // –§–∞–π–ª–∏ –º–æ–∂–Ω–∞ –≤—ñ–¥–¥–∞–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ signed URL –∞–±–æ –æ–∫—Ä–µ–º–∏–π endpoint; —â–æ–± –Ω–µ —É—Å–∫–ª–∞–¥–Ω—é–≤–∞—Ç–∏,
        // –¥–∞—î–º–æ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∫–ª—é—á (–¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –¥—ñ–π —á–µ—Ä–µ–∑ API).
        return `<tr>
          <td class="mono">${esc(date)}</td>
          <td class="mono" style="word-break:break-all">${esc(name)}</td>
          <td>${bytesFmt(o.size)}</td>
          <td class="mono">${esc(o.uploaded||"")}</td>
        </tr>`;
      }).join("")
    : `<tr><td colspan="4" class="muted">–ü–æ—Ä–æ–∂–Ω—å–æ.</td></tr>`;

  return `
${css}
<div class="wrap">
  <div class="card row">
    <h2 style="margin:0">üì¶ Repo (R2 /repo/*)</h2>
    <div class="row">
      <a class="btn" href="/admin/repo/html">–û–Ω–æ–≤–∏—Ç–∏</a>
      <form method="post" action="/admin/checklist?archive" style="display:inline">
        <button class="btn" type="submit">üì• –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π Checklist —É Repo</button>
      </form>
    </div>
  </div>

  <div class="card">
    <b>–§–∞–π–ª–∏</b>
    <div style="overflow:auto">
      <table>
        <thead><tr><th>–î–∞—Ç–∞</th><th>–ù–∞–∑–≤–∞</th><th>–†–æ–∑–º—ñ—Ä</th><th>Uploaded</th></tr></thead>
        <tbody>${rows}</tbody>
      </table>
    </div>
    <p class="muted">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ UI –º–æ–∂–µ–º–æ –¥–æ–¥–∞—Ç–∏ –æ–∫—Ä–µ–º–∏–º endpoint-–æ–º. –ó–∞—Ä–∞–∑ –∞—Ä—Ö—ñ–≤–∏ –∑‚Äô—è–≤–ª—è—é—Ç—å—Å—è –∞–±–æ —á–µ—Ä–µ–∑ /admin/checklist?archive, –∞–±–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏.</p>
  </div>
</div>`;
}