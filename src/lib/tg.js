// src/lib/tg.js
import { abs } from "../utils/url.js";

// –ö–Ω–æ–ø–∫–∏
export const BTN_DRIVE = "Google Drive";
export const BTN_SENTI = "Senti";
export const BTN_LEARN = "Learn";   // —î –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞—Ö, –∞–ª–µ –≤ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞
export const BTN_ADMIN = "Admin";

// –ì–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞:
// - –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö: [Drive, Senti]
// - –¥–ª—è –∞–¥–º—ñ–Ω–∞:     [Drive, Senti, Learn] + –æ–∫—Ä–µ–º–∞ –Ω–∏–∂–Ω—è [Admin]
export const mainKeyboard = (isAdmin = false) => {
  const firstRow = isAdmin
    ? [{ text: BTN_DRIVE }, { text: BTN_SENTI }, { text: BTN_LEARN }]
    : [{ text: BTN_DRIVE }, { text: BTN_SENTI }];
  const rows = [firstRow];
  if (isAdmin) rows.push([{ text: BTN_ADMIN }]);
  return { keyboard: rows, resize_keyboard: true };
};

// –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Ç—É –ª–æ–∫–∞—Ü—ñ—ó (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —É –ø–æ–≥–æ–¥—ñ)
export const askLocationKeyboard = () => ({
  keyboard: [[{ text: "üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é", request_location: true }], [{ text: BTN_SENTI }]],
  resize_keyboard: true,
  one_time_keyboard: true,
});

// –ü—Ä–æ—Å—Ç–∏–π ACL –¥–ª—è –∞–¥–º—ñ–Ω–∞
export const ADMIN = (env, userId) =>
  String(userId) === String(env.TELEGRAM_ADMIN_ID);

// –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (–µ–Ω–µ—Ä–≥—ñ—è / —á–µ–∫–ª—ñ—Å—Ç / learn)
export function energyLinks(env, userId) {
  const s =
    env.WEBHOOK_SECRET ||
    env.TELEGRAM_SECRET_TOKEN ||
    env.TG_WEBHOOK_SECRET ||
    "";
  const qs = `s=${encodeURIComponent(s)}&u=${encodeURIComponent(String(userId || ""))}`;
  return {
    energy: abs(env, `/admin/energy/html?${qs}`),
    checklist: abs(env, `/admin/checklist/html?${qs}`),
    learn: abs(env, `/admin/learn/html?${qs}`),
  };
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç—É
export async function sendPlain(env, chatId, text, extra = {}) {
  const token = env.TELEGRAM_BOT_TOKEN || env.BOT_TOKEN; // –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –æ–±–æ—Ö –Ω–∞–∑–≤
  const url = `https://api.telegram.org/bot${token}/sendMessage`;
  const body = {
    chat_id: chatId,
    text,
    disable_web_page_preview: true, // —Å—Ç—Ä—ñ–ª–∫–∞ –±–µ–∑ –ø—Ä–µ–≤‚Äô—é
  };
  if (extra.parse_mode) body.parse_mode = extra.parse_mode;
  if (extra.reply_markup) body.reply_markup = extra.reply_markup;

  await fetch(url, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(body),
  }).catch(() => {});
}

// –ó—Ä—É—á–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—ñ–≤
export async function sendMD(env, chatId, text, extra = {}) {
  return sendPlain(env, chatId, text, { ...extra, parse_mode: "Markdown" });
}
export async function sendHTML(env, chatId, html, extra = {}) {
  return sendPlain(env, chatId, html, { ...extra, parse_mode: "HTML" });
}

// /ai –∫–æ–º–∞–Ω–¥a –∑ —Ç–µ–∫—Å—Ç–æ–º –ø—ñ—Å–ª—è –Ω–µ—ó
export function parseAiCommand(text = "") {
  const s = String(text).trim();
  const m = s.match(/^\/ai(?:@[\w_]+)?(?:\s+([\s\S]+))?$/i);
  if (!m) return null;
  return (m[1] || "").trim();
}

// –ï–∫—Å–ø–æ—Ä—Ç —Å–ø—ñ–ª—å–Ω–æ–≥–æ –æ–±‚Äô—î–∫—Ç–∞
export const TG = {
  BTN_DRIVE,
  BTN_SENTI,
  BTN_LEARN,
  BTN_ADMIN,
  mainKeyboard,
  askLocationKeyboard,
  ADMIN,
  energyLinks,
  sendPlain,
  sendMD,
  sendHTML,
  parseAiCommand,
};
