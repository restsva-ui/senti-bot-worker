// src/lib/audit.js
import { appendToChecklist, getAccessToken, driveList } from "./drive.js";

/** –°—Ç–∏—Å–ª–∏–π ISO-—á–∞—Å */
const now = () => new Date().toISOString();

/** –ó–∞–ø–∏—Å —É —á–µ–∫–ª–∏—Å—Ç –∑ —Å–µ—Ä–≤—ñ—Å–Ω–æ–≥–æ –∞–¥–º—ñ–Ω-–¥–∏—Å–∫—É */
async function writeLine(env, line) {
  const token = await getAccessToken(env);
  await appendToChecklist(env, token, line);
}

/** Heartbeat (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫—Ä–æ–Ω–æ–º –∞–±–æ –≤—Ä—É—á–Ω—É) */
export async function logHeartbeat(env, note = "") {
  let extra = "";
  try {
    const token = await getAccessToken(env);
    const files = await driveList(env, token);
    const n = Array.isArray(files?.files) ? files.files.length : 0;
    extra = ` files=${n}`;
  } catch (e) {
    extra = ` drive_err=${String(e).slice(0, 100)}`;
  }
  const line = `‚è±Ô∏è heartbeat ${now()} host=${env.SERVICE_HOST}${extra}${note ? ` ${note}` : ""}`;
  await writeLine(env, line);
  return line;
}

/**
 * –ù–æ—Ç–∞—Ç–∫–∞ –ø—Ä–æ –¥–µ–ø–ª–æ–π (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ CI –∞–±–æ –≤—Ä—É—á–Ω—É).
 * info = { source?, commit?, actor?, deployId? }
 */
export async function logDeploy(env, info = {}) {
  const deployId = info.deployId || env.DEPLOY_ID || "";
  const pieces = [
    "üöÄ deploy", now(),
    `host=${env.SERVICE_HOST}`,
    deployId ? `deploy=${deployId}` : "",
    info.commit ? `commit=${info.commit}` : "",
    info.actor ? `by=${info.actor}` : "",
    info.source ? `src=${info.source}` : "",
  ].filter(Boolean);
  const line = pieces.join(" ");
  await writeLine(env, line);
  return line;
}