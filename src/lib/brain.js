// src/lib/brain.js
// –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π "–º–æ–∑–æ–∫" Senti –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Gemini (GOOGLE_API_KEY) —Ç–∞ OpenRouter (OPENROUTER_API_KEY).
// –ü—Ä–∞—Ü—é—î –∑ –±—É–¥—å-—è–∫–∏–º –æ–¥–Ω–∏–º –∫–ª—é—á–µ–º; —è–∫—â–æ –∫–ª—é—á—ñ–≤ –Ω–µ–º–∞—î ‚Äî –¥–∞—î –º‚Äô—è–∫–∏–π —Ñ–æ–ª–±–µ–∫.

const GEMINI_URL =
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent";

export async function think(env, userText, systemHint = "") {
  const text = String(userText || "").trim();
  if (!text) return "ü§ñ –î–∞–π –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç –∞–±–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ‚Äî —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º.";

  // 1) –°–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ Gemini (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π/–ø—ñ–ª—å–≥–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ —á–∞—Å—Ç–æ —î; –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∞–∫–∞—É–Ω—Ç–∞)
  if (env.GOOGLE_API_KEY) {
    try {
      const body = {
        contents: [
          {
            role: "user",
            parts: [{ text: systemHint ? `${systemHint}\n\n${text}` : text }],
          },
        ],
      };
      const r = await fetch(`${GEMINI_URL}?key=${env.GOOGLE_API_KEY}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });
      const j = await r.json();
      const out =
        j?.candidates?.[0]?.content?.parts?.[0]?.text ||
        j?.candidates?.[0]?.content?.parts?.[0]?.text ||
        "";
      if (r.ok && out) return out;
      // —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞ ‚Äî –ø–∞–¥–∞—î–º–æ —É –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      console.log("Gemini fail:", j);
    } catch (e) {
      console.log("Gemini error:", e);
    }
  }

  // 2) –°–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ OpenRouter (—è–∫—â–æ –º–∞—î—à OPENROUTER_API_KEY; –º–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –º–æ–¥–µ–ª—å, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∞ —É –∞–∫–∞—É–Ω—Ç—ñ)
  if (env.OPENROUTER_API_KEY) {
    try {
      const r = await fetch("https://openrouter.ai/api/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${env.OPENROUTER_API_KEY}`,
        },
        body: JSON.stringify({
          model: env.OPENROUTER_MODEL || "google/gemini-flash-1.5", // –∞–±–æ —ñ–Ω—à—É –ª–µ–≥–∫—É –º–æ–¥–µ–ª—å —Å–≤–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞
          messages: [
            ...(systemHint ? [{ role: "system", content: systemHint }] : []),
            { role: "user", content: text },
          ],
          temperature: 0.7,
        }),
      });
      const j = await r.json();
      const out = j?.choices?.[0]?.message?.content;
      if (r.ok && out) return out;
      console.log("OpenRouter fail:", j);
    } catch (e) {
      console.log("OpenRouter error:", e);
    }
  }

  // 3) –§–æ–ª–±–µ–∫, —è–∫—â–æ –∫–ª—é—á—ñ–≤ –Ω–µ–º–∞—î –∞–±–æ –≤—Å–µ –≤–ø–∞–ª–æ.
  return (
    "üß† –ü–æ–∫–∏ —â–æ —è –ø—Ä–∞—Ü—é—é —É –ª–µ–≥–∫–æ–º—É —Ä–µ–∂–∏–º—ñ –±–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –º–æ–¥–µ–ª–µ–π.\n" +
    "–î–æ–¥–∞–π GOOGLE_API_KEY –∞–±–æ OPENROUTER_API_KEY —É –≤–æ—Ä–∫–µ—Ä ‚Äî —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å—Ç–∞–Ω—É—Ç—å ¬´—Ä–æ–∑—É–º–Ω–∏–º–∏¬ª."
  );
}