// src/lib/brain.js
// "–ú–æ–∑–æ–∫" Senti: —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä (MODEL_ORDER),
// —è–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî –ø—ñ–¥—Ö–æ–ø–ª—é—î –∫–ª—é—á—ñ –Ω–∞–ø—Ä—è–º—É: GEMINI_API_KEY/GOOGLE_API_KEY –∞–±–æ OPENROUTER_API_KEY.

import { askAnyModel } from "./modelRouter.js";

const TRIM = (s) => (s || "").toString().trim();

export async function think(env, userText, systemHint = "") {
  const text = TRIM(userText);
  if (!text) return "ü§ñ –î–∞–π –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç –∞–±–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ‚Äî —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º.";

  // 1) –Ø–∫—â–æ –∑–∞–¥–∞–Ω–æ MODEL_ORDER ‚Äî –∫–æ—Ä–∏—Å—Ç—É—î–º–æ—Å—å —Ä–æ—É—Ç–µ—Ä–æ–º –∑ —Å–∏—Å—Ç–µ–º–Ω–æ—é –ø—ñ–¥–∫–∞–∑–∫–æ—é
  if (TRIM(env.MODEL_ORDER)) {
    try {
      const out = await askAnyModel(env, text, { system: systemHint, temperature: 0.6, max_tokens: 1024 });
      if (TRIM(out)) return out;
    } catch (e) {
      // –ø—Ä–æ–≤–∞–ª–∏–º–æ—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ñ —Ñ–æ–ª–±–µ–∫–∏ –Ω–∏–∂—á–µ
    }
  }

  // 2) –ü—Ä—è–º–∏–π –≤–∏–∫–ª–∏–∫ Gemini (—è–∫—â–æ —î GEMINI_API_KEY –∞–±–æ GOOGLE_API_KEY)
  const GEMINI_KEY = TRIM(env.GEMINI_API_KEY || env.GOOGLE_API_KEY);
  if (GEMINI_KEY) {
    try {
      const model = TRIM(env.GEMINI_MODEL) || "gemini-1.5-flash-latest";
      const url = `https://generativelanguage.googleapis.com/v1beta/models/${encodeURIComponent(model)}:generateContent?key=${encodeURIComponent(GEMINI_KEY)}`;
      const body = {
        contents: [
          {
            role: "user",
            parts: [{ text: systemHint ? `${systemHint}\n\n${text}` : text }],
          },
        ],
        generationConfig: { temperature: 0.6, maxOutputTokens: 1024 },
      };
      const r = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });
      const j = await r.json().catch(() => ({}));
      const out = (j?.candidates?.[0]?.content?.parts || [])
        .map((p) => p?.text)
        .filter(Boolean)
        .join("\n");
      if (r.ok && TRIM(out)) return out;
    } catch (e) {}
  }

  // 3) –ü—Ä—è–º–∏–π –≤–∏–∫–ª–∏–∫ OpenRouter (—è–∫—â–æ —î –∫–ª—é—á)
  const OR_KEY = TRIM(env.OPENROUTER_API_KEY);
  if (OR_KEY) {
    try {
      const model = TRIM(env.OPENROUTER_MODEL) || "openrouter/auto";
      const messages = [];
      if (TRIM(systemHint)) messages.push({ role: "system", content: TRIM(systemHint) });
      messages.push({ role: "user", content: text });

      const r = await fetch("https://openrouter.ai/api/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${OR_KEY}`,
        },
        body: JSON.stringify({
          model,
          messages,
          temperature: 0.6,
          max_tokens: 1024,
        }),
      });
      const j = await r.json().catch(() => ({}));
      const out = j?.choices?.[0]?.message?.content || "";
      if (r.ok && TRIM(out)) return out;
    } catch (e) {}
  }

  // 4) –§–æ–ª–±–µ–∫ ‚Äî –∫–ª—é—á—ñ–≤ –Ω–µ–º–∞—î –∞–±–æ –≤—Å–µ –≤–ø–∞–ª–æ.
  return (
    "üß† –ü–æ–∫–∏ —â–æ —è –ø—Ä–∞—Ü—é—é —É –ª–µ–≥–∫–æ–º—É —Ä–µ–∂–∏–º—ñ –±–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –º–æ–¥–µ–ª–µ–π.\n" +
    "–î–æ–¥–∞–π –æ–¥–∏–Ω —ñ–∑ –∫–ª—é—á—ñ–≤ —É –≤–æ—Ä–∫–µ—Ä:\n" +
    "‚Ä¢ GEMINI_API_KEY –∞–±–æ GOOGLE_API_KEY\n" +
    "‚Ä¢ –∞–±–æ OPENROUTER_API_KEY (+ OPENROUTER_MODEL, –∑–∞ –±–∞–∂–∞–Ω–Ω—è)\n" +
    "‚Äî —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å—Ç–∞–Ω—É—Ç—å ¬´—Ä–æ–∑—É–º–Ω–∏–º–∏¬ª."
  );
}