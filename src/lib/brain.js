// src/lib/brain.js
// "–ú–æ–∑–æ–∫" Senti. –í–º—ñ—î:
// 1) –Ø–∫—â–æ –∑–∞–¥–∞–Ω–æ MODEL_ORDER ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ä–æ—É—Ç–µ—Ä (Gemini / CF / OpenRouter —É –±—É–¥—å-—è–∫–æ–º—É –ø–æ—Ä—è–¥–∫—É).
// 2) –Ø–∫—â–æ MODEL_ORDER –Ω–µ–º–∞—î ‚Äî –ø—Ä–æ–±—É—î Gemini (GEMINI_API_KEY –∞–±–æ GOOGLE_API_KEY),
//    –ø–æ—Ç—ñ–º OpenRouter. –î–∞–ª—ñ –º‚Äô—è–∫–∏–π —Ñ–æ–ª–±–µ–∫.

import { askAnyModel } from "./modelRouter.js";

const GEMINI_BASE =
  "https://generativelanguage.googleapis.com/v1beta/models";

/* –ª–æ–∫–∞–ª—å–Ω–∏–π –≤–∏–∫–ª–∏–∫ Gemini –Ω–∞–ø—Ä—è–º—É (–∫–æ–ª–∏ MODEL_ORDER –Ω–µ –∑–∞–¥–∞–Ω–∏–π) */
async function tryGeminiDirect(env, text, systemHint, opts = {}) {
  const key = env.GEMINI_API_KEY || env.GOOGLE_API_KEY;
  if (!key) return null;

  const modelId = "gemini-1.5-flash-latest";
  const url = `${GEMINI_BASE}/${encodeURIComponent(
    modelId
  )}:generateContent?key=${key}`;

  const body = {
    contents: [
      {
        role: "user",
        parts: [{ text: systemHint ? `${systemHint}\n\n${text}` : text }],
      },
    ],
    generationConfig: {
      temperature: opts.temperature ?? 0.6,
      maxOutputTokens: opts.max_tokens ?? 1024,
    },
  };

  const r = await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body),
  });

  const j = await r.json().catch(() => ({}));
  if (!r.ok) {
    // —Ç–∏—Ö–æ –¥–∞—î–º–æ —à–∞–Ω—Å —ñ–Ω—à–∏–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
    return null;
  }
  return j?.candidates?.[0]?.content?.parts?.[0]?.text || null;
}

async function tryOpenRouterDirect(env, text, systemHint, opts = {}) {
  if (!env.OPENROUTER_API_KEY) return null;

  const r = await fetch("https://openrouter.ai/api/v1/chat/completions", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${env.OPENROUTER_API_KEY}`,
    },
    body: JSON.stringify({
      model: env.OPENROUTER_MODEL || "google/gemini-flash-1.5",
      messages: [
        ...(systemHint ? [{ role: "system", content: systemHint }] : []),
        { role: "user", content: text },
      ],
      temperature: opts.temperature ?? 0.6,
      max_tokens: opts.max_tokens ?? 1024,
    }),
  });

  const j = await r.json().catch(() => ({}));
  if (!r.ok) return null;
  return j?.choices?.[0]?.message?.content || null;
}

export async function think(env, userText, systemHint = "") {
  const text = String(userText || "").trim();
  if (!text) return "ü§ñ –î–∞–π –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç –∞–±–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ‚Äî —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º.";

  // 0) –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ—É—Ç–µ—Ä
  if (env.MODEL_ORDER) {
    try {
      const merged =
        systemHint ? `${systemHint}\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${text}` : text;
      return await askAnyModel(env, merged, { temperature: 0.6, max_tokens: 1024 });
    } catch (e) {
      // –≤–ø–∞–¥–µ–º–æ —É —Ä–µ–∑–µ—Ä–≤–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
      console.log("Router failed:", e?.message || e);
    }
  }

  // 1) Gemini –Ω–∞–ø—Ä—è–º—É (–ø—Ä–∞—Ü—é—î –∑ GEMINI_API_KEY –∞–±–æ GOOGLE_API_KEY)
  try {
    const g = await tryGeminiDirect(env, text, systemHint, {
      temperature: 0.6,
      max_tokens: 1024,
    });
    if (g) return g;
  } catch (e) {
    console.log("Gemini direct error:", e?.message || e);
  }

  // 2) OpenRouter —è–∫ —Ä–µ–∑–µ—Ä–≤
  try {
    const o = await tryOpenRouterDirect(env, text, systemHint, {
      temperature: 0.6,
      max_tokens: 1024,
    });
    if (o) return o;
  } catch (e) {
    console.log("OpenRouter direct error:", e?.message || e);
  }

  // 3) –ú‚Äô—è–∫–∏–π —Ñ–æ–ª–±–µ–∫
  const tips = [];
  if (!env.GEMINI_API_KEY && !env.GOOGLE_API_KEY)
    tips.push("‚Ä¢ –î–æ–¥–∞–π GEMINI_API_KEY –∞–±–æ GOOGLE_API_KEY (AI Studio)");
  if (!env.OPENROUTER_API_KEY)
    tips.push("‚Ä¢ –ê–±–æ OPENROUTER_API_KEY (+ OPENROUTER_MODEL, –∑–∞ –±–∞–∂–∞–Ω–Ω—è)");
  if (!env.CF_ACCOUNT_ID || !env.CLOUDFLARE_API_TOKEN)
    tips.push("‚Ä¢ –ê–±–æ —É–≤—ñ–º–∫–Ω–∏ Cloudflare Workers AI (CF_ACCOUNT_ID + CLOUDFLARE_API_TOKEN) —ñ –∑–∞–¥–∞–π MODEL_ORDER");

  return (
    "üß† –ü–æ–∫–∏ —â–æ —è –ø—Ä–∞—Ü—é—é —É –ª–µ–≥–∫–æ–º—É —Ä–µ–∂–∏–º—ñ –±–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –º–æ–¥–µ–ª–µ–π.\n" +
    (tips.length ? "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ —É–≤—ñ–º–∫–Ω—É—Ç–∏:\n" + tips.join("\n") + "\n" : "") +
    "–ó–∞ –±–∞–∂–∞–Ω–Ω—è, –≤–∏–∑–Ω–∞—á –ø–æ—Ä—è–¥–æ–∫ —É MODEL_ORDER (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: gemini:gemini-1.5-flash-latest,cf:@cf/meta/llama-3-8b-instruct,openrouter:deepseek/deepseek-chat)."
  );
}