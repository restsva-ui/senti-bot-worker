// src/lib/brain.js
// "–ú–æ–∑–æ–∫" Senti: —Ç–µ–ø–µ—Ä –≤–º—ñ—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ MODEL_ORDER (gemini/cf/openrouter)
// —ñ –ø—ñ–¥—Ç—Ä–∏–º—É—î —è–∫ GOOGLE_API_KEY, —Ç–∞–∫ —ñ GEMINI_API_KEY.

import { askAnyModel } from "./modelRouter.js";

const GEMINI_URL =
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent";

export async function think(env, userText, systemHint = "") {
  const text = String(userText || "").trim();
  if (!text) return "ü§ñ –î–∞–π –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç –∞–±–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ‚Äî —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º.";

  const combined = systemHint ? `${systemHint}\n\n${text}` : text;

  // 0) –Ø–∫—â–æ –∑–∞–¥–∞–Ω–æ MODEL_ORDER ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Ä–æ—É—Ç–µ—Ä
  if (env.MODEL_ORDER) {
    try {
      const out = await askAnyModel(env, combined, { temperature: 0.4, max_tokens: 1024 });
      if (out) return out;
    } catch (e) {
      // –≤–ø–∞–¥–µ–º–æ —É –ª–æ–∫–∞–ª—å–Ω—ñ –∑–∞–ø–∞—Å–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –Ω–∏–∂—á–µ
      console.log("modelRouter fail:", e?.message || e);
    }
  }

  // 1) –ü—Ä—è–º–∞ —Å–ø—Ä–æ–±–∞ Gemini (—á–∏—Ç–∞—î GOOGLE_API_KEY –∞–±–æ GEMINI_API_KEY)
  const gemKey = env.GOOGLE_API_KEY || env.GEMINI_API_KEY;
  if (gemKey) {
    try {
      const body = {
        contents: [{ role: "user", parts: [{ text: combined }]}],
        generationConfig: { temperature: 0.4, maxOutputTokens: 1024 },
      };
      const r = await fetch(`${GEMINI_URL}?key=${gemKey}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });
      const j = await r.json().catch(() => ({}));
      const out =
        j?.candidates?.[0]?.content?.parts?.[0]?.text ??
        "";
      if (r.ok && out) return out;
      console.log("Gemini direct fail:", j);
    } catch (e) {
      console.log("Gemini direct error:", e);
    }
  }

  // 2) –†–µ–∑–µ—Ä–≤: OpenRouter (—è–∫—â–æ —î –∫–ª—é—á)
  if (env.OPENROUTER_API_KEY) {
    try {
      const r = await fetch("https://openrouter.ai/api/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${env.OPENROUTER_API_KEY}`,
        },
        body: JSON.stringify({
          model: env.OPENROUTER_MODEL || "google/gemini-flash-1.5",
          messages: [{ role: "user", content: combined }],
          temperature: 0.4,
          max_tokens: 1024,
        }),
      });
      const j = await r.json().catch(() => ({}));
      const out = j?.choices?.[0]?.message?.content;
      if (r.ok && out) return out;
      console.log("OpenRouter fallback fail:", j);
    } catch (e) {
      console.log("OpenRouter fallback error:", e);
    }
  }

  // 3) –§–æ–ª–±–µ–∫ –±–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –º–æ–¥–µ–ª–µ–π
  return (
    "üß† –ü–æ–∫–∏ —â–æ —è –ø—Ä–∞—Ü—é—é —É –ª–µ–≥–∫–æ–º—É —Ä–µ–∂–∏–º—ñ –±–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –º–æ–¥–µ–ª–µ–π.\n" +
    "–£–≤—ñ–º–∫–Ω–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏:\n" +
    "‚Ä¢ –î–æ–¥–∞–π GEMINI_API_KEY –∞–±–æ GOOGLE_API_KEY (AI Studio), –∞–±–æ\n" +
    "‚Ä¢ –ü—ñ–¥–∫–ª—é—á–∏ Cloudflare Workers AI (CF_ACCOUNT_ID + CLOUDFLARE_API_TOKEN)\n" +
    "—Ç–∞ –∑–∞–¥–∞–π MODEL_ORDER. –ü—Ä–∏–∫–ª–∞–¥: gemini:gemini-1.5-flash-latest,cf:@cf/meta/llama-3-8b-instruct"
  );
}