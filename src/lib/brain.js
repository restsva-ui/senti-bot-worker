// src/lib/brain.js
// "–ú–æ–∑–æ–∫" Senti: —Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ MODEL_ORDER —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä (Gemini/CF/OpenRouter),
// –¥–∞–ª—ñ ‚Äî –ø—Ä—è–º—ñ —Ñ–æ–ª–±–µ–∫–∏ (Gemini –∞–±–æ OpenRouter), —ñ –ª–∏—à–µ —Ç–æ–¥—ñ ‚Äî –ª–µ–≥–∫–∏–π —Ä–µ–∂–∏–º.

import { askAnyModel } from "./modelRouter.js";

const GEMINI_FALLBACK_MODEL = "gemini-1.5-flash-latest";

export async function think(env, userText, systemHint = "") {
  const text = String(userText || "").trim();
  if (!text) return "ü§ñ –î–∞–π –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç –∞–±–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ‚Äî —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º.";

  const prompt = systemHint ? `${systemHint}\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${text}` : text;

  // ‚îÄ‚îÄ 1) –Ø–∫—â–æ –∑–∞–¥–∞–Ω–æ MODEL_ORDER ‚Äî –ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä
  if (env.MODEL_ORDER) {
    try {
      return await askAnyModel(env, prompt, { temperature: 0.4, max_tokens: 1024 });
    } catch (e) {
      // –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ –ø—Ä–∏—á–∏–Ω—É —É —Ñ–æ–ª–±–µ–∫ –Ω–∏–∂—á–µ, –∞–ª–µ –Ω–µ –∑—É–ø–∏–Ω—è—î–º–æ—Å—å
      console.log("Router fail:", e?.status, e?.message);
    }
  }

  // ‚îÄ‚îÄ 2) –ü—Ä—è–º–∏–π Gemini (—è–∫—â–æ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∫–ª—é—á)
  const gKey = env.GEMINI_API_KEY || env.GOOGLE_API_KEY;
  if (gKey) {
    try {
      const url = `https://generativelanguage.googleapis.com/v1beta/models/${encodeURIComponent(GEMINI_FALLBACK_MODEL)}:generateContent?key=${gKey}`;
      const r = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          contents: [{ role: "user", parts: [{ text: prompt }] }],
          generationConfig: { temperature: 0.4, maxOutputTokens: 1024 },
        }),
      });
      const j = await r.json();
      const out = j?.candidates?.[0]?.content?.parts?.[0]?.text;
      if (r.ok && out) return out;
      console.log("Gemini direct fail:", j);
    } catch (e) {
      console.log("Gemini direct error:", e);
    }
  }

  // ‚îÄ‚îÄ 3) –ü—Ä—è–º–∏–π OpenRouter —è–∫ –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
  if (env.OPENROUTER_API_KEY) {
    try {
      const r = await fetch("https://openrouter.ai/api/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${env.OPENROUTER_API_KEY}`,
        },
        body: JSON.stringify({
          model: env.OPENROUTER_MODEL || "deepseek/deepseek-chat",
          messages: [{ role: "user", content: prompt }],
          temperature: 0.5,
        }),
      });
      const j = await r.json();
      const out = j?.choices?.[0]?.message?.content;
      if (r.ok && out) return out;
      console.log("OpenRouter direct fail:", j);
    } catch (e) {
      console.log("OpenRouter direct error:", e);
    }
  }

  // ‚îÄ‚îÄ 4) –õ–µ–≥–∫–∏–π —Ä–µ–∂–∏–º
  return (
    "üß† –ü–æ–∫–∏ —â–æ —è –ø—Ä–∞—Ü—é—é —É –ª–µ–≥–∫–æ–º—É —Ä–µ–∂–∏–º—ñ –±–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –º–æ–¥–µ–ª–µ–π.\n" +
    "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ —É–≤—ñ–º–∫–Ω—É—Ç–∏:\n" +
    "‚Ä¢ –î–æ–¥–∞–π GEMINI_API_KEY –∞–±–æ GOOGLE_API_KEY (AI Studio), –∞–±–æ\n" +
    "‚Ä¢ –ü—ñ–¥–∫–ª—é—á–∏ Cloudflare Workers AI (CF_ACCOUNT_ID + CLOUDFLARE_API_TOKEN) —ñ –∑–∞–¥–∞–π MODEL_ORDER, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n" +
    "  gemini:gemini-1.5-flash-latest,cf:@cf/meta/llama-3-8b-instruct"
  );
}