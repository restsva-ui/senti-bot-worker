// src/lib/brain.js
// –°–ø–µ—Ä—à—É –ø—Ä–æ–±—É—î–º–æ MODEL_ORDER —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä, –¥–∞–ª—ñ –ø—Ä—è–º—ñ –≤–∏–∫–ª–∏–∫–∏, —ñ —è–∫—â–æ –≤—Å–µ –≤–ø–∞–ª–æ ‚Äî –ø–æ—è—Å–Ω—é—î–º–æ —á–æ–º—É.

import { askAnyModel } from "./modelRouter.js";

const GEMINI_FALLBACK_MODEL = "gemini-1.5-flash-latest";

export async function think(env, userText, systemHint = "", opts = {}) {
  const text = String(userText || "").trim();
  if (!text) return "ü§ñ –î–∞–π –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç –∞–±–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ‚Äî —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º.";
  const prompt = systemHint ? `${systemHint}\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${text}` : text;

  // 1) MODEL_ORDER
  if (env.MODEL_ORDER) {
    try {
      return await askAnyModel(env, prompt, { temperature: 0.4, max_tokens: 1024, ...opts });
    } catch (e) {
      // –ø–æ–∫–∞–∂–µ–º–æ –∑—Ä–æ–∑—É–º—ñ–ª–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è
      const why = `${e?.message || "router error"}${e?.payload?.errors ? " ‚Äî " + JSON.stringify(e.payload.errors) : ""}`;
      return "üß† –ó–∞—Ä–∞–∑ –Ω–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—é –º–æ–¥–µ–ª—å.\n–ü—Ä–∏—á–∏–Ω–∞: " + why +
        "\n\n–©–æ –∑—Ä–æ–±–∏—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ:\n‚Ä¢ –£–≤—ñ–º–∫–Ω–∏ Gemini (GEMINI_API_KEY –∞–±–æ GOOGLE_API_KEY)\n" +
        "‚Ä¢ –∞–±–æ Cloudflare Workers AI (CF_ACCOUNT_ID + CLOUDFLARE_API_TOKEN).\n" +
        "‚Ä¢ –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤ –∫–µ—Ä—É—î—Ç—å—Å—è MODEL_ORDER (–Ω–∞–ø—Ä.: gemini:gemini-1.5-flash-latest,cf:@cf/meta/llama-3-8b-instruct).";
    }
  }

  // 2) –ü—Ä—è–º–∏–π Gemini
  const gKey = env.GEMINI_API_KEY || env.GOOGLE_API_KEY;
  if (gKey) {
    try {
      const url = `https://generativelanguage.googleapis.com/v1beta/models/${encodeURIComponent(GEMINI_FALLBACK_MODEL)}:generateContent?key=${gKey}`;
      const r = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          contents: [{ role: "user", parts: [{ text: prompt }] }],
          generationConfig: { temperature: 0.4, maxOutputTokens: 1024 },
        }),
      });
      const j = await r.json();
      const out = j?.candidates?.[0]?.content?.parts?.[0]?.text;
      if (r.ok && out) return out;
      return `üß† Gemini –≤—ñ–¥–ø–æ–≤—ñ–≤ –ø–æ–º–∏–ª–∫–æ—é (${r.status}). ${j?.error?.message || ""}`;
    } catch (e) {
      return `üß† Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: ${String(e)}`;
    }
  }

  // 3) –ü—Ä—è–º–∏–π OpenRouter
  if (env.OPENROUTER_API_KEY) {
    try {
      const r = await fetch("https://openrouter.ai/api/v1/chat/completions", {
        method: "POST",
        headers: { "Content-Type": "application/json", Authorization: `Bearer ${env.OPENROUTER_API_KEY}` },
        body: JSON.stringify({
          model: env.OPENROUTER_MODEL || "deepseek/deepseek-chat",
          messages: [{ role: "user", content: prompt }],
          temperature: 0.5,
        }),
      });
      const j = await r.json();
      const out = j?.choices?.[0]?.message?.content;
      if (r.ok && out) return out;
      return `üß† OpenRouter –ø–æ–º–∏–ª–∫–∞ (${r.status}).`;
    } catch (e) {
      return `üß† OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: ${String(e)}`;
    }
  }

  // 4) –õ–µ–≥–∫–∏–π —Ä–µ–∂–∏–º
  return (
    "üß† –ü–æ–∫–∏ —â–æ —è –ø—Ä–∞—Ü—é—é —É –ª–µ–≥–∫–æ–º—É —Ä–µ–∂–∏–º—ñ –±–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –º–æ–¥–µ–ª–µ–π.\n" +
    "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ —É–≤—ñ–º–∫–Ω—É—Ç–∏:\n" +
    "‚Ä¢ –î–æ–¥–∞–π GEMINI_API_KEY –∞–±–æ GOOGLE_API_KEY (AI Studio), –∞–±–æ\n" +
    "‚Ä¢ –ü—ñ–¥–∫–ª—é—á–∏ Cloudflare Workers AI (CF_ACCOUNT_ID + CLOUDFLARE_API_TOKEN)\n" +
    "  —ñ –∑–∞–¥–∞–π MODEL_ORDER, –Ω–∞–ø—Ä.: gemini:gemini-1.5-flash-latest,cf:@cf/meta/llama-3-8b-instruct"
  );
}