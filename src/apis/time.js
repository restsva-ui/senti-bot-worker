// src/apis/time.js

// ---------- —É—Ç–∏–ª—ñ—Ç–∏ —á–∞—Å—É/–¥–∞—Ç–∏ ----------
const DEFAULT_TZ = "Europe/Kyiv";

export function resolveTz(env, fallback = DEFAULT_TZ) {
  const tz =
    env?.TIMEZONE ||
    env?.DEFAULT_TIMEZONE ||
    fallback;
  return tz || DEFAULT_TZ;
}

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î Date, ¬´–ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π¬ª –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó TZ.
 * –¶–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è ‚Äî –º–∏ —Ä–µ–∞–ª—å–Ω–æ –±—É–¥—É—î–º–æ –æ–±‚Äô—î–∫—Ç Date –∑—ñ –∑–º—ñ—â–µ–Ω–∏–º —á–∞—Å–æ–º.
 */
function toZonedDate(baseUtcDate, tz) {
  // –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏–º–æ UTC-–¥–∞—Ç—É –Ω–∞ —Ä—è–¥–æ–∫ —É –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π TZ, –∞ –ø–æ—Ç—ñ–º –Ω–∞–∑–∞–¥ —É Date
  return new Date(baseUtcDate.toLocaleString("en-US", { timeZone: tz }));
}

/**
 * –ó—Å—É–Ω—É—Ç–∏ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—É –¥–∞—Ç—É –Ω–∞ N –¥–Ω—ñ–≤ (N –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥‚Äô—î–º–Ω–∏–º).
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 86_400_000 –º—Å. –¢–∞–∫, –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞/–∑ DST –º–æ–∂–ª–∏–≤–µ ¬±1 –≥–æ–¥ —É time,
 * –∞–ª–µ –¥–ª—è ¬´–¥–∞—Ç–∏¬ª —Ü–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ ‚Äî –º–∏ –≤—Å–µ –æ–¥–Ω–æ –¥—ñ—Å—Ç–∞—î–º–æ –ª–∏—à–µ —Ä—ñ–∫/–º—ñ—Å—è—Ü—å/–¥–µ–Ω—å.
 */
function shiftDays(zonedDate, offsetDays = 0) {
  const MS_PER_DAY = 86_400_000;
  return new Date(zonedDate.getTime() + offsetDays * MS_PER_DAY);
}

/**
 * –†–æ–∑–∫–ª–∞–¥–∞—î –¥–∞—Ç—É –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ (—Ä—ñ–∫, –º—ñ—Å—è—Ü—å ENG, –¥–µ–Ω—å, HH:mm) —É –¥–∞–Ω—ñ–π TZ
 */
function partsOf(dateObj, tz) {
  const fmt = new Intl.DateTimeFormat("en-GB", {
    timeZone: tz,
    year: "numeric",
    month: "long",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
    hour12: false,
  });
  const parts = Object.fromEntries(fmt.formatToParts(dateObj).map(p => [p.type, p.value]));
  return {
    year: Number(parts.year),
    monthName: parts.month,        // –∞–Ω–≥–ª. –Ω–∞–∑–≤–∞ –º—ñ—Å—è—Ü—è (en-GB)
    day: parts.day,
    time: `${parts.hour}:${parts.minute}`,
  };
}

/**
 * –ê–∫—Ç—É–∞–ª—å–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏ –¥–ª—è ¬´–∑–∞—Ä–∞–∑¬ª —É TZ
 */
function nowParts(tz) {
  const dUtc = new Date();
  const zoned = toZonedDate(dUtc, tz);
  return { ...partsOf(zoned, tz), date: zoned };
}

// ---------- –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è –º—ñ—Å—è—Ü—ñ–≤ ----------
function monthUk(m) {
  const map = {
    January: "—Å—ñ—á–Ω—è", February: "–ª—é—Ç–æ–≥–æ",   March: "–±–µ—Ä–µ–∑–Ω—è",
    April:   "–∫–≤—ñ—Ç–Ω—è", May:      "—Ç—Ä–∞–≤–Ω—è",  June:  "—á–µ—Ä–≤–Ω—è",
    July:    "–ª–∏–ø–Ω—è",  August:   "—Å–µ—Ä–ø–Ω—è",  September: "–≤–µ—Ä–µ—Å–Ω—è",
    October: "–∂–æ–≤—Ç–Ω—è", November: "–ª–∏—Å—Ç–æ–ø–∞–¥–∞", December: "–≥—Ä—É–¥–Ω—è",
  };
  return map[m] || m;
}
function monthRu(m) {
  const map = {
    January: "—è–Ω–≤–∞—Ä—è", February: "—Ñ–µ–≤—Ä–∞–ª—è", March: "–º–∞—Ä—Ç–∞",
    April:   "–∞–ø—Ä–µ–ª—è", May:      "–º–∞—è",     June:  "–∏—é–Ω—è",
    July:    "–∏—é–ª—è",   August:   "–∞–≤–≥—É—Å—Ç–∞", September: "—Å–µ–Ω—Ç—è–±—Ä—è",
    October: "–æ–∫—Ç—è–±—Ä—è", November: "–Ω–æ—è–±—Ä—è", December: "–¥–µ–∫–∞–±—Ä—è",
  };
  return map[m] || m;
}
function monthDe(m) {
  const map = {
    January: "Januar", February: "Februar", March: "M√§rz",
    April:   "April",  May:      "Mai",     June:  "Juni",
    July:    "Juli",   August:   "August",  September: "September",
    October: "Oktober", November: "November", December: "Dezember",
  };
  return map[m] || m;
}
function monthFr(m) {
  const map = {
    January: "janvier", February: "f√©vrier", March: "mars",
    April:   "avril",   May:      "mai",     June:  "juin",
    July:    "juillet", August:   "ao√ªt",    September: "septembre",
    October: "octobre", November: "novembre", December: "d√©cembre",
  };
  return map[m] || m;
}

function formatDateLang(parts, lang = "uk") {
  const d = parts.day;
  const y = parts.year;
  const m = parts.monthName;

  switch ((lang || "uk").slice(0, 2)) {
    case "uk": return `${Number(d)} ${monthUk(m)} ${y} —Ä–æ–∫—É`;
    case "ru": return `${Number(d)} ${monthRu(m)} ${y} –≥–æ–¥–∞`;
    case "de": return `${Number(d)}. ${monthDe(m)} ${y}`;
    case "fr": return `${Number(d)} ${monthFr(m)} ${y}`;
    default:   return `${m} ${Number(d)}, ${y}`; // en
  }
}

function phraseToday(lang = "uk") {
  switch ((lang || "uk").slice(0, 2)) {
    case "uk": return "–°—å–æ–≥–æ–¥–Ω—ñ";
    case "ru": return "–°–µ–≥–æ–¥–Ω—è";
    case "de": return "Heute";
    case "fr": return "Aujourd‚Äôhui";
    default:   return "Today";
  }
}
function phraseTomorrow(lang = "uk") {
  switch ((lang || "uk").slice(0, 2)) {
    case "uk": return "–ó–∞–≤—Ç—Ä–∞";
    case "ru": return "–ó–∞–≤—Ç—Ä–∞";
    case "de": return "Morgen";
    case "fr": return "Demain";
    default:   return "Tomorrow";
  }
}
function phraseYesterday(lang = "uk") {
  switch ((lang || "uk").slice(0, 2)) {
    case "uk": return "–í—á–æ—Ä–∞";
    case "ru": return "–í—á–µ—Ä–∞";
    case "de": return "Gestern";
    case "fr": return "Hier";
    default:   return "Yesterday";
  }
}
function phraseNow(lang = "uk") {
  switch ((lang || "uk").slice(0, 2)) {
    case "uk": return "–ó–∞—Ä–∞–∑";
    case "ru": return "–°–µ–π—á–∞—Å";
    case "de": return "Jetzt";
    case "fr": return "Maintenant";
    default:   return "Now";
  }
}

// ---------- —ñ–Ω—Ç–µ–Ω—Ç–∏ ----------
export function dateIntent(text = "") {
  const s = String(text).trim().toLowerCase();
  if (!s) return false;

  if (s.includes("—Å—å–æ–≥–æ–¥–Ω—ñ") && (s.includes("–¥–∞—Ç–∞") || s.includes("–¥–µ–Ω—å"))) return true;

  const phrases = [
    // uk
    "—è–∫–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–∞—Ç–∞", "—Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—è –¥–∞—Ç–∞", "—è–∫–∏–π —Å—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å",
    // ru
    "–∫–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –¥–∞—Ç–∞", "–∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å",
    // en
    "what is the date", "what is the date today", "what's the date", "date today",
    // de
    "welches datum", "welches datum ist heute",
    // fr
    "quelle est la date", "quelle date sommes-nous"
  ];
  return phrases.some(p => s.includes(p));
}

export function tomorrowDateIntent(text = "") {
  const s = String(text).trim().toLowerCase();
  if (!s) return false;

  const phrases = [
    // uk
    "—è–∫–∞ –∑–∞–≤—Ç—Ä–∞ –¥–∞—Ç–∞", "–¥–∞—Ç–∞ –∑–∞–≤—Ç—Ä–∞", "–∑–∞–≤—Ç—Ä–∞—à–Ω—è –¥–∞—Ç–∞",
    // ru
    "–∫–∞–∫–∞—è –∑–∞–≤—Ç—Ä–∞ –¥–∞—Ç–∞", "–¥–∞—Ç–∞ –∑–∞–≤—Ç—Ä–∞",
    // en
    "what is the date tomorrow", "tomorrow date", "what's the date tomorrow",
    // de
    "welches datum ist morgen", "datum morgen",
    // fr
    "quelle est la date demain", "date demain"
  ];
  return phrases.some(p => s.includes(p));
}

export function yesterdayDateIntent(text = "") {
  const s = String(text).trim().toLowerCase();
  if (!s) return false;

  const phrases = [
    // uk
    "—è–∫–∞ –≤—á–æ—Ä–∞ –±—É–ª–∞ –¥–∞—Ç–∞", "—è–∫–∞ –±—É–ª–∞ –≤—á–æ—Ä–∞ –¥–∞—Ç–∞", "–≤—á–æ—Ä–∞—à–Ω—è –¥–∞—Ç–∞",
    // ru
    "–∫–∞–∫–∞—è –≤—á–µ—Ä–∞ –±—ã–ª–∞ –¥–∞—Ç–∞", "–≤—á–µ—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞",
    // en
    "what was the date yesterday", "yesterday date",
    // de
    "welches datum war gestern", "datum gestern",
    // fr
    "quelle √©tait la date hier", "date hier"
  ];
  return phrases.some(p => s.includes(p));
}

export function timeIntent(text = "") {
  const s = String(text).trim().toLowerCase();
  if (!s) return false;

  const hasCore =
    s.includes("–∫–æ—Ç—Ä–∞ –≥–æ–¥–∏–Ω–∞") ||
    s.includes("—Å–∫—ñ–ª—å–∫–∏ —á–∞—Å") ||
    s.includes("–∫–æ—Ç—Ä–∏–π —á–∞—Å") ||
    s.includes("–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å") ||
    s.includes("—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏") ||
    s.includes("time is it") ||
    s.includes("what time") ||
    s.includes("time now") ||
    s === "—á–∞—Å" || s === "–≤—Ä–µ–º—è";

  return hasCore;
}

// ---------- –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ----------
export function replyCurrentDate(env, lang = "uk") {
  const tz = resolveTz(env);
  const parts = nowParts(tz);
  const dateText = formatDateLang(parts, lang);
  const prefix = phraseToday(lang);
  const calEmoji = "üóìÔ∏è";
  return `${calEmoji} ${prefix} ${dateText}.`;
}

export function replyTomorrowDate(env, lang = "uk") {
  const tz = resolveTz(env);
  const zonedNow = toZonedDate(new Date(), tz);
  const target = shiftDays(zonedNow, 1);
  const p = partsOf(target, tz);
  const calEmoji = "üóìÔ∏è";
  return `${calEmoji} ${phraseTomorrow(lang)}, ${formatDateLang(p, lang)}.`;
}

export function replyYesterdayDate(env, lang = "uk") {
  const tz = resolveTz(env);
  const zonedNow = toZonedDate(new Date(), tz);
  const target = shiftDays(zonedNow, -1);
  const p = partsOf(target, tz);
  const calEmoji = "üóìÔ∏è";
  return `${calEmoji} ${phraseYesterday(lang)}, ${formatDateLang(p, lang)}.`;
}

export function replyCurrentTime(env, lang = "uk") {
  const tz = resolveTz(env);
  const parts = nowParts(tz);
  const clockEmoji = "üïí";
  const nowWord = phraseNow(lang);
  return `${clockEmoji} ${nowWord} ${parts.time} (${tz}).`;
}