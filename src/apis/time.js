// src/apis/time.js

// ---------- —É—Ç–∏–ª—ñ—Ç–∏ —á–∞—Å—É/–¥–∞—Ç–∏ ----------
const DEFAULT_TZ = "Europe/Kyiv";

export function resolveTz(env, fallback = DEFAULT_TZ) {
  const tz =
    env?.TIMEZONE ||
    env?.DEFAULT_TIMEZONE ||
    fallback;
  return tz || DEFAULT_TZ;
}

function nowParts(tz) {
  const d = new Date();
  // –±–µ—Ä–µ–º–æ ‚Äú—á–∞—Å—Ç–∏–Ω–∏‚Äù —á–µ—Ä–µ–∑ Intl, —â–æ–± –∫–æ—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –±—É–¥—å-—è–∫–æ—ó TZ
  const fmt = new Intl.DateTimeFormat("en-GB", {
    timeZone: tz,
    year: "numeric",
    month: "long",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
    hour12: false,
  });
  const parts = Object.fromEntries(fmt.formatToParts(d).map(p => [p.type, p.value]));
  return {
    year: Number(parts.year),
    monthName: parts.month,        // –∞–Ω–≥–ª. –Ω–∞–∑–≤–∞ –º—ñ—Å—è—Ü—è (en-GB)
    day: parts.day,
    time: `${parts.hour}:${parts.minute}`,
    date: new Date(d.toLocaleString("en-US", { timeZone: tz })) // ‚Äú–ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π‚Äù Date
  };
}

function monthUk(m) {
  // –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏–º–æ en-GB month ‚Üí —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –Ω–∞–∑–≤—É –≤ —Ä–æ–¥–æ–≤–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É
  const map = {
    January: "—Å—ñ—á–Ω—è",
    February: "–ª—é—Ç–æ–≥–æ",
    March: "–±–µ—Ä–µ–∑–Ω—è",
    April: "–∫–≤—ñ—Ç–Ω—è",
    May: "—Ç—Ä–∞–≤–Ω—è",
    June: "—á–µ—Ä–≤–Ω—è",
    July: "–ª–∏–ø–Ω—è",
    August: "—Å–µ—Ä–ø–Ω—è",
    September: "–≤–µ—Ä–µ—Å–Ω—è",
    October: "–∂–æ–≤—Ç–Ω—è",
    November: "–ª–∏—Å—Ç–æ–ø–∞–¥–∞",
    December: "–≥—Ä—É–¥–Ω—è",
  };
  return map[m] || m;
}

function monthRu(m) {
  const map = {
    January: "—è–Ω–≤–∞—Ä—è",
    February: "—Ñ–µ–≤—Ä–∞–ª—è",
    March: "–º–∞—Ä—Ç–∞",
    April: "–∞–ø—Ä–µ–ª—è",
    May: "–º–∞—è",
    June: "–∏—é–Ω—è",
    July: "–∏—é–ª—è",
    August: "–∞–≤–≥—É—Å—Ç–∞",
    September: "—Å–µ–Ω—Ç—è–±—Ä—è",
    October: "–æ–∫—Ç—è–±—Ä—è",
    November: "–Ω–æ—è–±—Ä—è",
    December: "–¥–µ–∫–∞–±—Ä—è",
  };
  return map[m] || m;
}

function monthDe(m) {
  const map = {
    January: "Januar",
    February: "Februar",
    March: "M√§rz",
    April: "April",
    May: "Mai",
    June: "Juni",
    July: "Juli",
    August: "August",
    September: "September",
    October: "Oktober",
    November: "November",
    December: "Dezember",
  };
  return map[m] || m;
}

function monthFr(m) {
  const map = {
    January: "janvier",
    February: "f√©vrier",
    March: "mars",
    April: "avril",
    May: "mai",
    June: "juin",
    July: "juillet",
    August: "ao√ªt",
    September: "septembre",
    October: "octobre",
    November: "novembre",
    December: "d√©cembre",
  };
  return map[m] || m;
}

function formatDateLang(parts, lang = "uk") {
  const d = parts.day;
  const y = parts.year;
  const m = parts.monthName;

  switch ((lang || "uk").slice(0, 2)) {
    case "uk":
      return `${Number(d)} ${monthUk(m)} ${y} —Ä–æ–∫—É`;
    case "ru":
      return `${Number(d)} ${monthRu(m)} ${y} –≥–æ–¥–∞`;
    case "de":
      return `${Number(d)}. ${monthDe(m)} ${y}`;
    case "fr":
      return `${Number(d)} ${monthFr(m)} ${y}`;
    default:
      // en
      return `${m} ${Number(d)}, ${y}`;
  }
}

function phraseToday(lang = "uk") {
  switch ((lang || "uk").slice(0, 2)) {
    case "uk": return "–°—å–æ–≥–æ–¥–Ω—ñ";
    case "ru": return "–°–µ–≥–æ–¥–Ω—è";
    case "de": return "Heute";
    case "fr": return "Aujourd‚Äôhui";
    default:   return "Today";
  }
}

function phraseNow(lang = "uk") {
  switch ((lang || "uk").slice(0, 2)) {
    case "uk": return "–ó–∞—Ä–∞–∑";
    case "ru": return "–°–µ–π—á–∞—Å";
    case "de": return "Jetzt";
    case "fr": return "Maintenant";
    default:   return "Now";
  }
}

// ---------- —ñ–Ω—Ç–µ–Ω—Ç–∏ ----------
export function dateIntent(text = "") {
  const s = String(text).trim().toLowerCase();
  if (!s) return false;

  // –±—É–¥—å-—è–∫–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è ‚Äú—Å—å–æ–≥–æ–¥–Ω—ñ‚Äù + ‚Äú–¥–∞—Ç–∞/–¥–µ–Ω—å‚Äù
  if (s.includes("—Å—å–æ–≥–æ–¥–Ω—ñ") && (s.includes("–¥–∞—Ç–∞") || s.includes("–¥–µ–Ω—å"))) return true;

  const phrases = [
    // uk
    "—è–∫–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–∞—Ç–∞", "—Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—è –¥–∞—Ç–∞", "—è–∫–∏–π —Å—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å",
    // ru
    "–∫–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –¥–∞—Ç–∞", "–∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å",
    // en
    "what is the date", "what is the date today", "what's the date", "date today",
    // de
    "welches datum", "welches datum ist heute",
    // fr
    "quelle est la date", "quelle date sommes-nous"
  ];
  return phrases.some(p => s.includes(p));
}

export function timeIntent(text = "") {
  const s = String(text).trim().toLowerCase();
  if (!s) return false;

  // —à–∏—Ä–æ–∫–∞ –ª–æ–≥—ñ–∫–∞: –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –ø—Ä–æ —á–∞—Å
  const hasCore =
    s.includes("–∫–æ—Ç—Ä–∞ –≥–æ–¥–∏–Ω–∞") ||
    s.includes("—Å–∫—ñ–ª—å–∫–∏ —á–∞—Å") ||
    s.includes("–∫–æ—Ç—Ä–∏–π —á–∞—Å") ||
    s.includes("–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å") ||
    s.includes("—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏") ||
    s.includes("time is it") ||
    s.includes("what time") ||
    s.includes("time now") ||
    s === "—á–∞—Å" || s === "–≤—Ä–µ–º—è";

  return hasCore;
}

// ---------- –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ----------
export function replyCurrentDate(env, lang = "uk") {
  const tz = resolveTz(env);
  const parts = nowParts(tz);
  const dateText = formatDateLang(parts, lang);
  const prefix = phraseToday(lang);
  const calEmoji = "üóìÔ∏è";
  return `${calEmoji} ${prefix} ${dateText}.`;
}

export function replyCurrentTime(env, lang = "uk") {
  const tz = resolveTz(env);
  const parts = nowParts(tz);
  const clockEmoji = "üïí";
  const nowWord = phraseNow(lang);
  // –¥–æ–¥–∞–º–æ –ø–æ–∑–Ω–∞—á–∫—É TZ –≤ –¥—É–∂–∫–∞—Ö, —â–æ–± –±—É–ª–æ –∑—Ä–æ–∑—É–º—ñ–ª–æ
  return `${clockEmoji} ${nowWord} ${parts.time} (${tz}).`;
}