// src/apis/weather.js
//
// Open-Meteo based weather helper.
// –§–æ–∫—É—Å—É—î—Ç—å—Å—è –Ω–∞ "–∑–∞—Ä–∞–∑", –∫–æ—Ä–µ–∫—Ç–Ω–æ–º—É TZ —ñ –∞–∫—É—Ä–∞—Ç–Ω–æ–º—É –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—ñ.

const UA_CODE = "UA";
const DEFAULT_TZ = "Europe/Kyiv";

// -----------------------------
// Intent + –ø–∞—Ä—Å–µ—Ä –º—ñ—Å—Ç–∞ –∑ —Ç–µ–∫—Å—Ç—É
// -----------------------------
export function weatherIntent(text = "") {
  const s = String(text || "").toLowerCase();
  if (!s) return false;
  // –¥—É–∂–µ –ø—Ä–æ—Å—Ç—ñ —Ç—Ä–∏–≥–µ—Ä–∏
  return (
    /–ø–æ–≥–æ–¥–∞|weather|–¥–æ—â|–æ–ø–∞–¥|–≤—ñ—Ç–µ—Ä|–≤–µ—Ç–µ—Ä|—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä/i.test(s) ||
    /^—è–∫–∞.*–ø–æ–≥–æ–¥–∞\b/i.test(s)
  );
}

// –í–∏—Ç—è–≥–∞—î–º–æ –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É –∑ —Ñ—Ä–∞–∑ —Ç–∏–ø—É:
// "–ø–æ–≥–æ–¥–∞ —É –ö–∏—î–≤—ñ", "–ø–æ–≥–æ–¥–∞ –≤ –í—ñ–Ω–Ω–∏—Ü—ñ", "–ø–æ–≥–æ–¥–∞ —É Lviv", "–ø–æ–≥–æ–¥–∞ –≤ Warsaw" —Ç–æ—â–æ.
export function parsePlaceFromText(text = "") {
  const s = String(text || "");
  // –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –∫—ñ–ª—å–∫–æ—Ö –º–æ–≤–Ω–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π "—É/–≤/–≤ –º—ñ—Å—Ç—ñ/in/bei/in der"
  // –ù–∞–∑–≤–∞: –¥–æ–∑–≤–æ–ª—è—î–º–æ –ª—ñ—Ç–µ—Ä–∏, –¥–µ—Ñ—ñ—Å, –∫—Ä–∞–ø–∫—É, –∞–ø–æ—Å—Ç—Ä–æ—Ñ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏ (2..50 —Å–∏–º–≤–æ–ª—ñ–≤)
  const re =
    /(?:\b–≤|—É|—É\s+–º—ñ—Å—Ç—ñ|–≤\s+–º—ñ—Å—Ç—ñ|in|at|√†|en|bei|in der|in dem)\s+([\p{L}\-.\' ]{2,50})/iu;
  const m = s.match(re);
  if (m?.[1]) {
    return m[1].trim().replace(/\s+/g, " ");
  }
  // fallback: —è–∫—â–æ –ø—Ä–æ—Å—Ç–æ –æ–¥–Ω–µ —Å–ª–æ–≤–æ –ø—ñ—Å–ª—è "–ø–æ–≥–æ–¥–∞"
  const fallback = s.match(/–ø–æ–≥–æ–¥–∞\s+(?:–≤|—É)\s+([\p{L}\-.\' ]{2,50})/iu);
  if (fallback?.[1]) return fallback[1].trim();
  return null;
}

// -----------------------------
// –ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Open-Meteo
// -----------------------------
async function geocodeOpenMeteo(name, { preferUA = true, lang = "uk" } = {}) {
  const url =
    "https://geocoding-api.open-meteo.com/v1/search?" +
    new URLSearchParams({
      name: String(name || ""),
      count: "8",
      language: lang,
      format: "json",
    }).toString();

  const r = await fetch(url);
  if (!r.ok) throw new Error("geocoding failed");
  const data = await r.json().catch(() => null);
  const results = Array.isArray(data?.results) ? data.results : [];

  if (!results.length) return null;

  // 1) –ü–µ—Ä—à–æ—á–µ—Ä–≥–æ–≤–æ ‚Äî –º—ñ—Å—Ç–∞ –£–∫—Ä–∞—ó–Ω–∏
  let list = results;
  if (preferUA) {
    const ua = results.filter((x) => x.country_code === UA_CODE);
    if (ua.length) list = ua;
  }

  // 2) –í –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ –Ω–∞—Å–µ–ª–µ–Ω—ñ –ø—É–Ω–∫—Ç–∏ (feature_class 'P')
  list.sort((a, b) => {
    const aIsP = (a.feature_class || "").toUpperCase() === "P";
    const bIsP = (b.feature_class || "").toUpperCase() === "P";
    if (aIsP && !bIsP) return -1;
    if (!aIsP && bIsP) return 1;
    // –±–ª–∏–∂—á–µ –¥–æ —Ü–µ–Ω—Ç—Ä—É –∫—Ä–∞—ó–Ω–∏ –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ ‚Äî –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –ø—ñ–¥—Ö–æ–¥—è—â–∏–π
    return 0;
  });

  const best = list[0];
  return best
    ? {
        name: best.name,
        lat: best.latitude,
        lon: best.longitude,
        country_code: best.country_code,
        admin1: best.admin1 || "",
      }
    : null;
}

// -----------------------------
// –ó–∞–ø–∏—Ç –ø–æ–≥–æ–¥–∏ (–ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è)
// -----------------------------
async function fetchCurrentWeather(lat, lon, tz = DEFAULT_TZ) {
  // –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤—ñ—Ç–µ—Ä, –æ–ø–∞–¥–∏ + weather_code
  const url =
    "https://api.open-meteo.com/v1/forecast?" +
    new URLSearchParams({
      latitude: String(lat),
      longitude: String(lon),
      current:
        "temperature_2m,apparent_temperature,precipitation,weather_code,wind_speed_10m",
      hourly: "precipitation_probability,temperature_2m",
      timezone: tz || DEFAULT_TZ, // —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π TZ
      forecast_days: "1",
    }).toString();

  const r = await fetch(url);
  if (!r.ok) throw new Error(`weather http ${r.status}`);
  const data = await r.json().catch(() => null);

  const cur = data?.current || {};
  const hourly = data?.hourly || {};
  const nowTime = cur?.time;
  let precipProb = null;

  if (nowTime && Array.isArray(hourly?.time)) {
    const idx = hourly.time.indexOf(nowTime);
    if (idx >= 0 && Array.isArray(hourly.precipitation_probability)) {
      precipProb = hourly.precipitation_probability[idx];
    }
  }

  return {
    temperature: toNumber(cur.temperature_2m),
    feels: toNumber(cur.apparent_temperature),
    wind: toNumber(cur.wind_speed_10m),
    precipitation: toNumber(cur.precipitation),
    code: cur.weather_code,
    precipProb: toNumber(precipProb),
    time: nowTime,
    tz: data?.timezone || tz || DEFAULT_TZ,
  };
}

function toNumber(v) {
  const n = Number(v);
  return Number.isFinite(n) ? n : null;
}

function weatherEmoji(code) {
  // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –º–∞–ø–∞ —ñ–∫–æ–Ω–æ–∫ –∑–∞ weather_code
  if (code === 0) return "‚òÄÔ∏è";
  if ([1, 2, 3].includes(code)) return "üå§Ô∏è";
  if ([45, 48].includes(code)) return "üå´Ô∏è";
  if ([51, 53, 55, 56, 57, 61, 63, 65].includes(code)) return "üåßÔ∏è";
  if ([66, 67, 80, 81, 82].includes(code)) return "üå¶Ô∏è";
  if ([71, 73, 75, 77, 85, 86].includes(code)) return "‚ùÑÔ∏è";
  if ([95, 96, 97].includes(code)) return "‚õàÔ∏è";
  return "üå°Ô∏è";
}

function fmtTemp(t) {
  if (t == null) return "";
  const v = Math.round(t);
  return `${v}¬∞C`;
}

function sentence(text) {
  let s = String(text || "").trim();
  if (!s) return s;
  s = s[0].toUpperCase() + s.slice(1);
  if (!/[.!?‚Ä¶]$/.test(s)) s += ".";
  return s;
}

// -----------------------------
// –ü—É–±–ª—ñ—á–Ω—ñ —Ñ–∞—Å–∞–¥–∏
// -----------------------------
export async function weatherSummaryByCoords(lat, lon, { tz = DEFAULT_TZ, lang = "uk" } = {}) {
  const cur = await fetchCurrentWeather(lat, lon, tz);
  const em = weatherEmoji(cur.code);
  const parts = [];

  // –ë–∞–∑–æ–≤–∏–π —Ç–µ–∫—Å—Ç
  let main = `–ó–∞—Ä–∞–∑ ${fmtTemp(cur.temperature)}`;
  // feels like
  if (cur.feels != null && Math.abs(cur.feels - cur.temperature) >= 2) {
    main += ` (–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ ${fmtTemp(cur.feels)})`;
  }
  parts.push(main);

  // –æ–ø–∞–¥–∏
  if (cur.precipitation != null && cur.precipitation > 0) {
    parts.push("–π–¥–µ –¥–æ—â");
  } else if (cur.precipProb != null) {
    if (cur.precipProb >= 60) parts.push("–≤—ñ—Ä–æ–≥—ñ–¥–Ω—ñ –æ–ø–∞–¥–∏");
    else if (cur.precipProb >= 30) parts.push("–º–æ–∂–ª–∏–≤—ñ –∫–æ—Ä–æ—Ç–∫–æ—á–∞—Å–Ω—ñ –æ–ø–∞–¥–∏");
    else parts.push("–æ–ø–∞–¥—ñ–≤ –Ω–µ –æ—á—ñ–∫—É—î—Ç—å—Å—è");
  }

  // –≤—ñ—Ç–µ—Ä
  if (cur.wind != null) {
    if (cur.wind < 4) parts.push("–≤—ñ—Ç–µ—Ä —Å–ª–∞–±–∫–∏–π");
    else if (cur.wind < 9) parts.push("–≤—ñ—Ç–µ—Ä –ø–æ–º—ñ—Ä–Ω–∏–π");
    else parts.push("–≤—ñ—Ç–µ—Ä –ø–æ—Ä–∏–≤—á–∞—Å—Ç–∏–π");
  }

  const text = `${em} ${sentence(parts.join(", "))}`;
  return { text, timezone: cur.tz || tz || DEFAULT_TZ, raw: cur };
}

export async function weatherSummaryByPlace(place, { lang = "uk", preferUA = true, tz = DEFAULT_TZ } = {}) {
  const g = await geocodeOpenMeteo(place, { preferUA, lang });
  if (!g) return { text: "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–∞–∫–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç.", timezone: tz };

  // –Ø–∫—â–æ Open-Mete–æ –ø–æ–≤–µ—Ä–Ω—É–≤ —Å–≤—ñ–π TZ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ; —ñ–Ω–∞–∫—à–µ —Ñ–æ–ª–±–µ–∫
  const out = await weatherSummaryByCoords(g.lat, g.lon, { tz, lang });
  return out;
}