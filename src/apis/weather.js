// src/apis/weather.js
// –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –ø–æ–≥–æ–¥–∞ —á–µ—Ä–µ–∑ Open-Meteo (–∂–æ–¥–Ω–∏—Ö –∫–ª—é—á—ñ–≤)

const WMO = {
  0: "clear", 1: "mainly clear", 2: "partly cloudy", 3: "overcast",
  45: "fog", 48: "rime fog", 51: "light drizzle", 53: "drizzle", 55: "dense drizzle",
  56: "freezing drizzle", 57: "freezing drizzle",
  61: "light rain", 63: "rain", 65: "heavy rain",
  66: "freezing rain", 67: "freezing rain",
  71: "light snow", 73: "snow", 75: "heavy snow",
  77: "snow grains",
  80: "light showers", 81: "showers", 82: "violent showers",
  85: "snow showers", 86: "heavy snow showers",
  95: "thunderstorm", 96: "thunderstorm w/ hail", 99: "thunderstorm w/ heavy hail"
};

function wmoText(code = 0, lang = "en") {
  const en = WMO[code] || "weather";
  // –î—É–∂–µ –ø—Ä–æ—Å—Ç–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ –∫–ª—é—á–æ–≤–∏—Ö —Å—Ç–∞–Ω—ñ–≤ (–¥–æ—Å–∏—Ç—å –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ)
  const map = {
    uk: {
      "clear":"—è—Å–Ω–æ","mainly clear":"–ø–µ—Ä–µ–≤–∞–∂–Ω–æ —è—Å–Ω–æ","partly cloudy":"–º—ñ–Ω–ª–∏–≤–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å","overcast":"—Ö–º–∞—Ä–Ω–æ",
      "fog":"—Ç—É–º–∞–Ω","rime fog":"–ø–∞–º–æ—Ä–æ–∑—å","light drizzle":"—Å–ª–∞–±–∫–∞ –º–∂–∏—á–∫–∞","drizzle":"–º–∂–∏—á–∫–∞","dense drizzle":"—Å–∏–ª—å–Ω–∞ –º–∂–∏—á–∫–∞",
      "freezing drizzle":"–∫—Ä–∏–∂–∞–Ωa –º–∂–∏—á–∫–∞","light rain":"—Å–ª–∞–±–∫–∏–π –¥–æ—â","rain":"–¥–æ—â","heavy rain":"—Å–∏–ª—å–Ω–∏–π –¥–æ—â",
      "freezing rain":"–∫—Ä–∏–∂–∞–Ω–∏–π –¥–æ—â","light snow":"—Å–ª–∞–±–∫–∏–π —Å–Ω—ñ–≥","snow":"—Å–Ω—ñ–≥","heavy snow":"—Å–∏–ª—å–Ω–∏–π —Å–Ω—ñ–≥",
      "snow grains":"—Å–Ω—ñ–≥–æ–≤—ñ –∑–µ—Ä–Ω–∞","light showers":"–∫–æ—Ä–æ—Ç–∫–æ—á–∞—Å–Ω—ñ –æ–ø–∞–¥–∏","showers":"–∑–ª–∏–≤–∏","violent showers":"—Å–∏–ª—å–Ω—ñ –∑–ª–∏–≤–∏",
      "snow showers":"—Å–Ω—ñ–≥–æ–≤—ñ –∑–ª–∏–≤–∏","heavy snow showers":"—Å–∏–ª—å–Ω—ñ —Å–Ω—ñ–≥–æ–≤—ñ –∑–ª–∏–≤–∏",
      "thunderstorm":"–≥—Ä–æ–∑–∞","thunderstorm w/ hail":"–≥—Ä–æ–∑–∞ –∑ –≥—Ä–∞–¥–æ–º","thunderstorm w/ heavy hail":"–≥—Ä–æ–∑–∞ –∑ —Å–∏–ª—å–Ω–∏–º –≥—Ä–∞–¥–æ–º",
      "weather":"–ø–æ–≥–æ–¥–∞"
    },
    ru: {
      "clear":"—è—Å–Ω–æ","mainly clear":"–≤ –æ—Å–Ω–æ–≤–Ω–æ–º —è—Å–Ω–æ","partly cloudy":"–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å","overcast":"–ø–∞—Å–º—É—Ä–Ω–æ",
      "fog":"—Ç—É–º–∞–Ω","rime fog":"–∏–∑–º–æ—Ä–æ–∑—å","light drizzle":"—Å–ª–∞–±–∫–∞—è –º–æ—Ä–æ—Å—å","drizzle":"–º–æ—Ä–æ—Å—å","dense drizzle":"—Å–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å",
      "freezing drizzle":"–ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å","light rain":"–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å","rain":"–¥–æ–∂–¥—å","heavy rain":"—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
      "freezing rain":"–ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å","light snow":"–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥","snow":"—Å–Ω–µ–≥","heavy snow":"—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
      "snow grains":"—Å–Ω–µ–∂–Ω–∞—è –∫—Ä—É–ø–∞","light showers":"–∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Å–∞–¥–∫–∏","showers":"–ª–∏–≤–Ω–∏","violent showers":"—Å–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏",
      "snow showers":"—Å–Ω–µ–∂–Ω—ã–µ –∑–∞—Ä—è–¥—ã","heavy snow showers":"—Å–∏–ª—å–Ω—ã–µ —Å–Ω–µ–∂–Ω—ã–µ –∑–∞—Ä—è–¥—ã",
      "thunderstorm":"–≥—Ä–æ–∑–∞","thunderstorm w/ hail":"–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º","thunderstorm w/ heavy hail":"–≥—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω—ã–º –≥—Ä–∞–¥–æ–º",
      "weather":"–ø–æ–≥–æ–¥–∞"
    },
    fr: { "clear":"d√©gag√©","partly cloudy":"nuageux","overcast":"couvert","rain":"pluie","snow":"neige","thunderstorm":"orage","weather":"m√©t√©o" },
    de: { "clear":"heiter","partly cloudy":"wolkig","overcast":"bedeckt","rain":"Regen","snow":"Schnee","thunderstorm":"Gewitter","weather":"Wetter" }
  };
  return (map[lang]?.[en]) || en;
}

function emojiFor(code = 0, isDay = 1) {
  if ([61,63,65,80,81,82].includes(code)) return "üåßÔ∏è";
  if ([71,73,75,85,86,77].includes(code)) return "‚ùÑÔ∏è";
  if ([45,48].includes(code)) return "üå´Ô∏è";
  if ([95,96,99].includes(code)) return "‚õàÔ∏è";
  if ([2,3].includes(code)) return "‚õÖ";
  return isDay ? "‚òÄÔ∏è" : "üåô";
}

export async function geocodePlace(q, lang = "en") {
  const url = `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(q)}&count=1&language=${lang}&format=json`;
  const r = await fetch(url);
  const j = await r.json().catch(() => null);
  const p = j?.results?.[0];
  if (!p) return null;
  return { name: p.name, country: p.country_code || p.country, lat: p.latitude, lon: p.longitude, tz: p.timezone };
}

export async function getCurrentWeather({ lat, lon, tz = "auto" }) {
  const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}`
    + `&current=temperature_2m,apparent_temperature,is_day,precipitation,weather_code,wind_speed_10m`
    + `&timezone=${encodeURIComponent(tz)}`;
  const r = await fetch(url);
  const j = await r.json().catch(() => null);
  const c = j?.current;
  if (!c) return null;
  return {
    temp: c.temperature_2m,
    feels: c.apparent_temperature,
    isDay: c.is_day,
    code: c.weather_code,
    wind: c.wind_speed_10m
  };
}

export function formatWeatherSummary({ place, current, lang = "en" }) {
  const e = emojiFor(current.code, current.isDay);
  const cond = wmoText(current.code, lang);
  const t = Math.round(current.temp);
  const f = Math.round(current.feels);
  const w = Math.round(current.wind);
  if (lang === "uk") return `${e} –£ ${place} –∑–∞—Ä–∞–∑ ${t}¬∞C (–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ ${f}¬∞C), ${cond}. –í—ñ—Ç–µ—Ä ${w} –º/—Å.`;
  if (lang === "ru") return `${e} –í ${place} —Å–µ–π—á–∞—Å ${t}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${f}¬∞C), ${cond}. –í–µ—Ç–µ—Ä ${w} –º/—Å.`;
  if (lang === "fr") return `${e} √Ä ${place} il fait ${t}¬∞C (ressenti ${f}¬∞C), ${cond}. Vent ${w} m/s.`;
  if (lang === "de") return `${e} In ${place} jetzt ${t}¬∞C (gef√ºhlt ${f}¬∞C), ${cond}. Wind ${w} m/s.`;
  return `${e} In ${place} it's ${t}¬∞C (feels ${f}¬∞C), ${cond}. Wind ${w} m/s.`;
}

// –ü—Ä–æ—Å—Ç–∞ –¥–µ—Ç–µ–∫—Ü—ñ—è –Ω–∞–º—ñ—Ä—É —Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥ –º—ñ—Å—Ç–∞
export function weatherIntent(text = "") {
  const s = String(text).trim();
  const m1 = s.match(/^\/weather\s+(.+)/i);
  if (m1) return { place: m1[1].trim() };
  const m2 = s.match(/\b(?:weather|–ø–æ–≥–æ–¥–∞|meteo)\s+(?:in|—É|–≤)\s+([A-Za-z√Ä-√øƒÄ-≈æ–Å—ë–ê-–Ø–∞-—è–á—ó–Ü—ñ–Ñ—î“ê“ë\-\s]{2,})/i);
  if (m2) return { place: m2[1].trim() };
  const m3 = s.match(/^(?:–ø–æ–≥–æ–¥–∞|weather)\??$/i);
  if (m3) return { place: null }; // –ø–æ–ø—Ä–æ—Å–∏–º–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–±–æ –º—ñ—Å—Ç–æ
  return null;
}

export async function weatherSummaryByPlace(query, lang = "en") {
  const g = await geocodePlace(query, lang);
  if (!g) return null;
  const cur = await getCurrentWeather({ lat: g.lat, lon: g.lon, tz: g.tz || "auto" });
  if (!cur) return null;
  const place = [g.name, g.country].filter(Boolean).join(", ");
  return formatWeatherSummary({ place, current: cur, lang });
}

export async function weatherSummaryByCoords({ lat, lon, label = "your location", lang = "en", tz = "auto" }) {
  const cur = await getCurrentWeather({ lat, lon, tz });
  if (!cur) return null;
  return formatWeatherSummary({ place: label, current: cur, lang });
}