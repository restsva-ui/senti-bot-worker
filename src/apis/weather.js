// src/apis/weather.js
//
// Open-Meteo: https://open-meteo.com/
// –ú–∏ —Ä–æ–±–∏–º–æ: (1) –ø—Ä–æ—Å—Ç–∏–π intent, (2) –ø–∞—Ä—Å–∏–Ω–≥ –º—ñ—Å—Ü—è –∑ —Ç–µ–∫—Å—Ç—É,
// (3) –≥–µ–æ–∫–æ–¥–∏–Ω–≥ -> –ø—Ä–æ–≥–Ω–æ–∑ -> –∫–æ—Ä–æ—Ç–∫–∏–π –ø—ñ–¥—Å—É–º–æ–∫,
// (4) –ª—ñ–Ω–∫ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑.

const OM_GEOCODE = "https://geocoding-api.open-meteo.com/v1/search";
const OM_FORECAST = "https://api.open-meteo.com/v1/forecast";

/** ----- –ù–û–†–ú–ê–õ–Ü–ó–ê–¶–Ü–Ø –¢–û–ü–û–ù–Ü–ú–Ü–í (—É–∫—Ä./ru/en/de/fr) ----- */
function normalizePlace(raw = "") {
  let s = String(raw || "").trim();

  // –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –ª–∞–ø–∫–∏, –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
  s = s.replace(/[¬´¬ª‚Äú‚Äù"']/g, "").replace(/\s+/g, " ");

  // –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –ø—Ä–∏–π–º–µ–Ω–Ω–∏–∫–∏ —Ç–∏–ø—É "–≤/—É/—É –º—ñ—Å—Ç—ñ/in/at/en/bei/in der ..."
  // (–¥–µ–∫—ñ–ª—å–∫–∞ –º–æ–≤ —ñ —Ñ–æ—Ä–º, –±–µ–∑ –∂–æ–¥–Ω–∏—Ö –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö –µ–∫—Ä–∞–Ω—É–≤–∞–Ω—å)
  s = s.replace(
    /^(?:–≤|—É|—É\s+–º—ñ—Å—Ç—ñ|–≤\s+–º—ñ—Å—Ç—ñ|–≤\s+–≥–æ—Ä–æ–¥–µ|—É\s+–≥–æ—Ä–æ–¥—ñ|in|at|en|bei|in der|im|√†|au|aux)\s+/iu,
    ""
  );

  // –¥—É–∂–µ —á–∞—Å—Ç—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –º—ñ—Å—Ü–µ–≤—ñ –≤—ñ–¥–º—ñ–Ω–∫–∏:
  // –õ—å–≤–æ–≤—ñ -> –õ—å–≤—ñ–≤, –•–∞—Ä–∫–æ–≤—ñ -> –•–∞—Ä–∫—ñ–≤, –ö–∏—î–≤—ñ -> –ö–∏—ó–≤, –í—ñ–Ω–Ω–∏—Ü—ñ -> –í—ñ–Ω–Ω–∏—Ü—è, –ü–æ–ª—Ç–∞–≤—ñ -> –ü–æ–ª—Ç–∞–≤–∞ —Ç–æ—â–æ
  const uaCases = [
    [/(—î–≤—ñ)$/i, "—ó–≤"],      // –ö–∏—î–≤—ñ -> –ö–∏—ó–≤
    [/(–æ–≤—ñ)$/i, "—ñ–≤"],      // –õ—å–≤–æ–≤—ñ/–•–∞—Ä–∫–æ–≤—ñ -> –õ—å–≤—ñ–≤/–•–∞—Ä–∫—ñ–≤
    [/–Ω–∏—Ü—ñ$/i, "–Ω–∏—Ü—è"],     // –í—ñ–Ω–Ω–∏—Ü—ñ -> –í—ñ–Ω–Ω–∏—Ü—è
    [/—Ç—ñ$/i, "—Ç–∞"],         // –ü–æ–ª—Ç–∞–≤—ñ -> –ü–æ–ª—Ç–∞–≤–∞ (–ø—Ä–∞—Ü—é—î —ñ –¥–ª—è –±–∞–≥–∞—Ç—å–æ—Ö —ñ–Ω.)
    [/–¥—ñ$/i, "–¥–∞"],         // –ö—Ä–µ–º–µ–Ω—á—É—Ü—ñ -> –ö—Ä–µ–º–µ–Ω—á—É–∫ (—á–∞—Å—Ç–∫–æ–≤–æ)
  ];
  for (const [rx, rep] of uaCases) {
    if (rx.test(s)) {
      s = s.replace(rx, rep);
      break;
    }
  }

  // —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ/–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –≤–∏–Ω—è—Ç–∫–∏
  const SPECIAL = {
    "–∫–∏—î–≤—ñ": "–∫–∏—ó–≤",
    "–ª—å–≤–æ–≤—ñ": "–ª—å–≤—ñ–≤",
    "—Ö–∞—Ä–∫–æ–≤—ñ": "—Ö–∞—Ä–∫—ñ–≤",
    "–¥–Ω—ñ–ø—Ä—ñ": "–¥–Ω—ñ–ø—Ä–æ",
    "–æ–¥–µ—Å—ñ": "–æ–¥–µ—Å–∞",
  };
  if (SPECIAL[s.toLowerCase()]) s = SPECIAL[s.toLowerCase()];

  // –æ–±—Ä—ñ–∑–∞—î–º–æ –ª–∏—à–Ω—ñ –∫–æ–º–∏/–∫—Ä–∞–ø–∫–∏ –≤ —Ö–≤–æ—Å—Ç—ñ
  s = s.replace(/[.,;:!?]$/g, "");

  return s;
}

/** –í–∏—Ç—è–≥–Ω—É—Ç–∏ –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É –∑ —Ç–µ–∫—Å—Ç—É (–∫—ñ–ª—å–∫–∞ –º–æ–≤) */
function parsePlaceFromText(text = "") {
  const s = String(text || "").trim();

  // –ø—Ä–∏–∫–ª–∞–¥–∏: "–ø–æ–≥–æ–¥–∞ —É –ö–∏—î–≤—ñ", "–ø–æ–≥–æ–¥–∞ –≤ –õ—å–≤–æ–≤—ñ", "weather in New York today", "Wetter heute in Wien"
  const rx =
    /(?:–ø–æ–≥–æ–¥–∞|–ø–æ–≥–æ–¥—É|–ø–æ–≥–æ–¥–∏|weather|wetter|m√©t√©o)\s+(?:–Ω–∞|–≤|—É|in|at|en|bei|√†|au|aux)?\s*(.+)$/i;
  const m = s.match(rx);
  return m?.[1] ? normalizePlace(m[1]) : null;
}

/** –ü—Ä–æ—Å—Ç–∏–π intent –Ω–∞ "–ø–æ–≥–æ–¥—É" (–±—É–¥—å-—è–∫–æ—é –º–æ–≤–æ—é) */
export function weatherIntent(text = "") {
  const s = String(text || "").toLowerCase();
  return /(–ø–æ–≥–æ–¥|weather|wetter|m√©t√©o)/i.test(s);
}

/** –ì–µ–æ–∫–æ–¥–∏–Ω–≥ Open-Meteo */
async function geocode(place, lang = "uk") {
  const url =
    `${OM_GEOCODE}?name=${encodeURIComponent(place)}&count=5&language=${encodeURIComponent(lang)}&format=json`;
  const r = await fetch(url);
  const data = await r.json().catch(() => null);
  const results = Array.isArray(data?.results) ? data.results : [];
  return results;
}

/** –Ø–∫—â–æ –≥–µ–æ–∫–æ–¥–∏–Ω–≥ –Ω—ñ—á–æ–≥–æ –Ω–µ –¥–∞–≤ ‚Äî –ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑ –∑ ¬´–ø—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–º¬ª —Å–ª–æ–≤–æ–º */
async function smartGeocode(place, lang = "uk") {
  let res = await geocode(place, lang);
  if (res.length) return res;

  // –ø—Ä–æ–±—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è —É–∫—Ä. –ª–æ–∫–∞—Ç–∏–≤—ñ–≤
  const tries = [];
  if (/(—î–≤—ñ)$/i.test(place)) tries.push(place.replace(/—î–≤—ñ$/i, "—ó–≤"));
  if (/(–æ–≤—ñ)$/i.test(place)) tries.push(place.replace(/–æ–≤—ñ$/i, "—ñ–≤"));
  if (/–Ω–∏—Ü—ñ$/i.test(place))  tries.push(place.replace(/–Ω–∏—Ü—ñ$/i, "–Ω–∏—Ü—è"));

  for (const t of tries) {
    res = await geocode(t, lang);
    if (res.length) return res;
  }
  return [];
}

/** –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç-–ø—ñ–¥—Å—É–º–æ–∫ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ OM */
function summarizeWeather(json, lang = "uk") {
  const curT = json?.current?.temperature_2m;
  const code = json?.current?.weather_code;
  const wind = json?.current?.wind_speed_10m;

  // –¥—É–∂–µ –ø—Ä–æ—Å—Ç—ñ –æ–ø–∏—Å–∏ –∑–∞ –∫–æ–¥–æ–º –ø–æ–≥–æ–¥–∏
  let icon = "üå§Ô∏è";
  let desc = "";
  const W = Number(code);
  if ([0].includes(W))                 { icon = "‚òÄÔ∏è"; desc = {uk:"—Å–æ–Ω—è—á–Ω–æ", ru:"—Å–æ–ª–Ω–µ—á–Ω–æ", en:"sunny", de:"sonnig", fr:"ensoleill√©"}; }
  else if ([1,2,3].includes(W))        { icon = "üå§Ô∏è"; desc = {uk:"—Ö–º–∞—Ä–Ω–æ –∑ –ø—Ä–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏", ru:"–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å", en:"partly cloudy", de:"wolkig", fr:"nuageux"}; }
  else if ([45,48].includes(W))        { icon = "üå´Ô∏è"; desc = {uk:"—Ç—É–º–∞–Ω", ru:"—Ç—É–º–∞–Ω", en:"fog", de:"Nebel", fr:"brouillard"}; }
  else if ([51,53,55,56,57].includes(W)){ icon = "üå¶Ô∏è"; desc = {uk:"–º—Ä—è–∫–∞/–¥–æ—â", ru:"–º–æ—Ä–æ—Å—å/–¥–æ–∂–¥—å", en:"drizzle/rain", de:"Niesel/regen", fr:"bruine/pluie"}; }
  else if ([61,63,65,80,81,82].includes(W)){ icon = "üåßÔ∏è"; desc = {uk:"–¥–æ—â", ru:"–¥–æ–∂–¥—å", en:"rain", de:"Regen", fr:"pluie"}; }
  else if ([71,73,75,77,85,86].includes(W)){ icon = "‚ùÑÔ∏è"; desc = {uk:"—Å–Ω—ñ–≥", ru:"—Å–Ω–µ–≥", en:"snow", de:"Schnee", fr:"neige"}; }
  else if ([95,96,99].includes(W))     { icon = "‚õàÔ∏è"; desc = {uk:"–≥—Ä–æ–∑–∞", ru:"–≥—Ä–æ–∑–∞", en:"thunderstorm", de:"Gewitter", fr:"orage"}; }

  const d = (m) => (desc[m] || desc.uk);
  const text = `${icon} ${d(lang.slice(0,2)) || d("uk")}. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±–ª–∏–∑—å–∫–æ ${Math.round(curT)}¬∞C. –í—ñ—Ç–µ—Ä ${Math.round(wind)} –º/—Å.`;
  return text;
}

/** –ü—ñ–¥—Å—É–º–æ–∫ –ø–æ–≥–æ–¥–∏ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ */
export async function weatherSummaryByCoords(lat, lon, lang = "uk") {
  const url = `${OM_FORECAST}?latitude=${lat}&longitude=${lon}`
    + `&current=temperature_2m,weather_code,wind_speed_10m`
    + `&timezone=auto`;
  const r = await fetch(url);
  const data = await r.json().catch(() => null);
  if (!data) return { text: "‚ö†Ô∏è Weather API error." };

  const text = summarizeWeather(data, lang);
  const link = `https://open-meteo.com/en/#location=${lat},${lon}`;
  return { text: `${text}\nüîó ${link}`, timezone: data.timezone || "UTC" };
}

/** –ü—ñ–¥—Å—É–º–æ–∫ –ø–æ–≥–æ–¥–∏ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º-–∑–∞–ø–∏—Ç–æ–º (–º—ñ—Å—Ç–æ –∑ —Ñ—Ä–∞–∑–∏) */
export async function weatherSummaryByPlace(env, userText, lang = "uk") {
  let place = parsePlaceFromText(userText);
  if (!place) {
    // —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç–∞–≤ —Ç—ñ–ª—å–∫–∏ ¬´—è–∫–∞ –ø–æ–≥–æ–¥–∞?¬ª, –ø—Ä–æ–±—É—î–º–æ –º—ñ—Å—Ç–æ –∑ –ø—Ä–æ—Ñ—ñ–ª—é / –∞–±–æ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
    return { text: "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–∞–∫–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç." };
  }

  // –≥–µ–æ–∫–æ–¥–∏–º–æ –∑ —Ä–æ–∑—É–º–Ω–∏–º–∏ –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏
  let results = await smartGeocode(place, lang);
  if (!results.length) {
    // –æ—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞ ‚Äî –±–µ–∑ –º–æ–≤–∏ (—ñ–Ω–æ–¥—ñ OM –∫—Ä–∞—â–µ –º–∞—Ç—á–∏—Ç—å –∞–Ω–≥–ª.)
    results = await geocode(place, "en");
  }
  if (!results.length) return { text: "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–∞–∫–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç." };

  const best = results[0];
  const lat = best.latitude;
  const lon = best.longitude;
  const cityName = best.name;

  const { text, timezone } = await weatherSummaryByCoords(lat, lon, lang);
  // —Ä–æ–±–∏–º–æ –ø—ñ–¥–ø–∏—Å ¬´—É <–º—ñ—Å—Ç–æ>¬ª
  const pre = { uk: "–£", ru: "–í", en: "In", de: "In", fr: "√Ä" }[lang.slice(0,2)] || "–£";
  return { text: text.replace(/^([^\s]+)/, `$1 ${pre} ${cityName}`), timezone };
}

export default {
  weatherIntent,
  weatherSummaryByPlace,
  weatherSummaryByCoords,
};