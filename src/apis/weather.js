// src/apis/weather.js
//
// Open-Meteo + —Ä–æ–∑—É–º–Ω–∏–π –ø–∞—Ä—Å–µ—Ä –º—ñ—Å—Ç–∞.
// –í—ñ–¥–ø–æ–≤—ñ–¥—å –º—ñ—Å—Ç–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç —ñ –º—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω—É –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω—É —Å—Ç—Ä—ñ–ª–∫—É ‚ÜóÔ∏é (Markdown).

const OM_GEOCODE = "https://geocoding-api.open-meteo.com/v1/search";
const OM_FORECAST = "https://api.open-meteo.com/v1/forecast";

/** ---------- –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–æ–ø–æ–Ω—ñ–º—ñ–≤ (—É–∫—Ä./ru/en/de/fr) ---------- */
function normalizePlace(raw = "") {
  let s = String(raw || "").trim();

  // –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –ª–∞–ø–∫–∏/–∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏/—Ö–≤–æ—Å—Ç–æ–≤—É –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—é
  s = s.replace(/[¬´¬ª‚Äú‚Äù"‚Äô']/g, "").replace(/\s+/g, " ").replace(/[.,;:!?]$/g, "");

  // –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –ø—Ä–∏–π–º–µ–Ω–Ω–∏–∫–∏: "–≤/—É/—É –º—ñ—Å—Ç—ñ/in/at/en/bei/√†/au/aux/..."
  s = s.replace(/^(?:–≤|—É|—É\s+–º—ñ—Å—Ç—ñ|–≤\s+–º—ñ—Å—Ç—ñ|–≤\s+–≥–æ—Ä–æ–¥–µ|—É\s+–≥–æ—Ä–æ–¥—ñ|in|at|en|bei|in der|im|√†|au|aux)\s+/iu, "");

  // —á–∞—Å—Ç—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ª–æ–∫–∞—Ç–∏–≤–∏ -> –Ω–∞–∑–∏–≤–Ω–∏–π
  const uaCases = [
    [/(—î–≤—ñ)$/i, "—ó–≤"],   // –ö–∏—î–≤—ñ -> –ö–∏—ó–≤
    [/(–æ–≤—ñ)$/i, "—ñ–≤"],   // –õ—å–≤–æ–≤—ñ/–•–∞—Ä–∫–æ–≤—ñ -> –õ—å–≤—ñ–≤/–•–∞—Ä–∫—ñ–≤
    [/–Ω–∏—Ü—ñ$/i, "–Ω–∏—Ü—è"],  // –í—ñ–Ω–Ω–∏—Ü—ñ -> –í—ñ–Ω–Ω–∏—Ü—è
    [/—Ç—ñ$/i, "—Ç–∞"],      // –ü–æ–ª—Ç–∞–≤—ñ -> –ü–æ–ª—Ç–∞–≤–∞
  ];
  for (const [rx, rep] of uaCases) {
    if (rx.test(s)) { s = s.replace(rx, rep); break; }
  }

  const SPECIAL = { "–∫–∏—î–≤—ñ": "–∫–∏—ó–≤", "–ª—å–≤–æ–≤—ñ": "–ª—å–≤—ñ–≤", "—Ö–∞—Ä–∫–æ–≤—ñ": "—Ö–∞—Ä–∫—ñ–≤", "–¥–Ω—ñ–ø—Ä—ñ": "–¥–Ω—ñ–ø—Ä–æ", "–æ–¥–µ—Å—ñ": "–æ–¥–µ—Å–∞" };
  if (SPECIAL[s.toLowerCase()]) s = SPECIAL[s.toLowerCase()];

  return s;
}

/** –í–∏—Ç—è–≥–Ω—É—Ç–∏ –º—ñ—Å—Ç–æ –∑ —Ñ—Ä–∞–∑–∏ (–±–∞–≥–∞—Ç–æ–º–æ–≤–Ω–æ, –±–µ—Ä–µ ¬´–æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–µ–≥–º–µ–Ω—Ç –ø—ñ—Å–ª—è in/–≤/—É¬ª —ñ —Ä—ñ–∂–µ —Å–ª–æ–≤–∞ —Ç–∏–ø—É today/heute/—Å—å–æ–≥–æ–¥–Ω—ñ) */
function parsePlaceFromText(text = "") {
  let s = String(text || "").trim();

  // –∑–∞–≥–∞–ª—å–Ω–∏–π —Ö—É–∫ –Ω–∞ "–ø–æ–≥–æ–¥–∞/weather/wetter/m√©t√©o" ‚Äî —è–∫—â–æ —î, –±–µ—Ä–µ–º–æ –≤—Å–µ –ø—ñ—Å–ª—è –Ω–µ—ó
  const m = s.match(/(?:–ø–æ–≥–æ–¥–∞|–ø–æ–≥–æ–¥—É|–ø–æ–≥–æ–¥–∏|weather|wetter|m√©t√©o)\s+(.*)$/i);
  let chunk = m?.[1] || s;

  // —è–∫—â–æ —î " in/–≤/—É " ‚Äî –±–µ—Ä–µ–º–æ —á–∞—Å—Ç–∏–Ω—É –ü–Ü–°–õ–Ø –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è
  const split = chunk.split(/\s(?:in|at|en|bei|√†|au|aux|–≤|—É)\s/i);
  if (split.length > 1) chunk = split[split.length - 1];

  // –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Å–ª–æ–≤–∞ —á–∞—Å—É
  chunk = chunk
    .replace(/\b(—Å—å–æ–≥–æ–¥–Ω—ñ|—Å–µ–≥–æ–¥–Ω—è|today|heute|aujourd'hui|oggi|now|jetzt|maintenant)\b/ig, "")
    .trim();

  // –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–ª–∏—à–∫–æ–≤—ñ –∑–Ω–∞–∫–∏/–ª–∞–ø–∫–∏
  chunk = chunk.replace(/[¬´¬ª‚Äú‚Äù"‚Äô']/g, "").replace(/[.,;:!?]$/g, "");

  return chunk ? normalizePlace(chunk) : null;
}

/** Intent –Ω–∞ –ø–æ–≥–æ–¥—É */
export function weatherIntent(text = "") {
  return /(–ø–æ–≥–æ–¥|weather|wetter|m√©t√©o)/i.test(String(text || "").toLowerCase());
}

/** –ì–µ–æ–∫–æ–¥–µ—Ä Open-Mete–æ */
async function geocode(place, lang = "uk") {
  const url = `${OM_GEOCODE}?name=${encodeURIComponent(place)}&count=5&language=${encodeURIComponent(lang)}&format=json`;
  const r = await fetch(url);
  const data = await r.json().catch(() => null);
  return Array.isArray(data?.results) ? data.results : [];
}

/** Smart-–≥–µ–æ–∫–æ–¥–µ—Ä (—Ä–æ–±–∏—Ç—å –∫—ñ–ª—å–∫–∞ –∞–≤—Ç–æ–ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫) */
async function smartGeocode(place, lang = "uk") {
  let res = await geocode(place, lang);
  if (res.length) return res;

  const tries = [];
  if (/(—î–≤—ñ)$/i.test(place)) tries.push(place.replace(/—î–≤—ñ$/i, "—ó–≤"));
  if (/(–æ–≤—ñ)$/i.test(place)) tries.push(place.replace(/–æ–≤—ñ$/i, "—ñ–≤"));
  if (/–Ω–∏—Ü—ñ$/i.test(place))  tries.push(place.replace(/–Ω–∏—Ü—ñ$/i, "–Ω–∏—Ü—è"));

  for (const t of tries) {
    res = await geocode(t, lang);
    if (res.length) return res;
  }
  // –æ—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞ ‚Äî –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é
  res = await geocode(place, "en");
  return res;
}

/** –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –∑–∞ –∫–æ–¥–∞–º–∏ –ø–æ–≥–æ–¥–∏ */
function summarizeWeather(json, lang = "uk") {
  const curT = json?.current?.temperature_2m;
  const code = json?.current?.weather_code;
  const wind = json?.current?.wind_speed_10m;

  let icon = "üå§Ô∏è";
  let desc = { uk: "—Ö–º–∞—Ä–Ω–æ –∑ –ø—Ä–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏", ru: "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å", en: "partly cloudy", de: "wolkig", fr: "nuageux" };
  const W = Number(code);
  if ([0].includes(W))                   { icon = "‚òÄÔ∏è"; desc = {uk:"—Å–æ–Ω—è—á–Ω–æ",ru:"—Å–æ–ª–Ω–µ—á–Ω–æ",en:"sunny",de:"sonnig",fr:"ensoleill√©"}; }
  else if ([45,48].includes(W))          { icon = "üå´Ô∏è"; desc = {uk:"—Ç—É–º–∞–Ω",ru:"—Ç—É–º–∞–Ω",en:"fog",de:"Nebel",fr:"brouillard"}; }
  else if ([51,53,55,56,57].includes(W)) { icon = "üå¶Ô∏è"; desc = {uk:"–º—Ä—è–∫–∞/–¥–æ—â",ru:"–º–æ—Ä–æ—Å—å/–¥–æ–∂–¥—å",en:"drizzle/rain",de:"Niesel/Regen",fr:"bruine/pluie"}; }
  else if ([61,63,65,80,81,82].includes(W)){ icon = "üåßÔ∏è"; desc = {uk:"–¥–æ—â",ru:"–¥–æ–∂–¥—å",en:"rain",de:"Regen",fr:"pluie"}; }
  else if ([71,73,75,77,85,86].includes(W)){ icon = "‚ùÑÔ∏è"; desc = {uk:"—Å–Ω—ñ–≥",ru:"—Å–Ω–µ–≥",en:"snow",de:"Schnee",fr:"neige"}; }
  else if ([95,96,99].includes(W))       { icon = "‚õàÔ∏è"; desc = {uk:"–≥—Ä–æ–∑–∞",ru:"–≥—Ä–æ–∑–∞",en:"thunderstorm",de:"Gewitter",fr:"orage"}; }

  const d = (m) => (desc[m] || desc.uk);
  return `${icon} ${d(lang.slice(0,2)) || d("uk")}. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±–ª–∏–∑—å–∫–æ ${Math.round(curT)}¬∞C. –í—ñ—Ç–µ—Ä ${Math.round(wind)} –º/—Å.`;
}

/** –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ */
export async function weatherSummaryByCoords(lat, lon, lang = "uk") {
  const url = `${OM_FORECAST}?latitude=${lat}&longitude=${lon}` +
              `&current=temperature_2m,weather_code,wind_speed_10m` +
              `&timezone=auto`;
  const r = await fetch(url);
  const data = await r.json().catch(() => null);
  if (!data) return { text: "‚ö†Ô∏è Weather API error." };

  const text = summarizeWeather(data, lang);

  // –ù–∞–¥—ñ–π–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: –≤—ñ–¥–∫—Ä–∏—î –∫–∞—Ä—Ç—É –∑ —Ç–æ—á–∫–æ—é (–±–µ–∑ 404)
  const maps = `https://maps.google.com/?q=${lat},${lon}`;
  const arrow = `[‚ÜóÔ∏é](${maps})`;   // –º—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–∞ —Å—Ç—Ä—ñ–ª–∫–∞
  return { text: `${text}\n${arrow}`, mode: "Markdown", timezone: data.timezone || "UTC" };
}

/** –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞ –Ω–∞–∑–≤–æ—é –º—ñ—Å—Ç–∞ (–≤–∏—Ç—è–≥—É—î–º–æ –∑ —Ñ—Ä–∞–∑–∏) */
export async function weatherSummaryByPlace(env, userText, lang = "uk") {
  let place = parsePlaceFromText(userText);
  if (!place) return { text: "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–∞–∫–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç." };

  let results = await smartGeocode(place, lang);
  if (!results.length) return { text: "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–∞–∫–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç." };

  const best = results[0];
  const { latitude: lat, longitude: lon, name } = best;

  const out = await weatherSummaryByCoords(lat, lon, lang);
  // –ø—Ä–∏—Ä–æ–¥–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞: "–£ –ö–∏—î–≤—ñ: ..." (–±–µ–∑ –Ω–∞–º–∞–≥–∞–Ω–Ω—è –≤—ñ–¥–º—ñ–Ω—é–≤–∞—Ç–∏)
  const pre = { uk: "–£", ru: "–í", en: "In", de: "In", fr: "√Ä" }[(lang || "uk").slice(0,2)] || "–£";
  const header = `${pre} ${name}:`;
  return { text: `${header} ${out.text}`, mode: out.mode, timezone: out.timezone };
}

export default {
  weatherIntent,
  weatherSummaryByPlace,
  weatherSummaryByCoords,
};