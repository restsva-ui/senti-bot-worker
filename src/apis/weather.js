// src/apis/weather.js

// –ù–µ–≤–µ–ª–∏—á–∫—ñ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
const L = {
  now: { uk: "–ó–∞—Ä–∞–∑", ru: "–°–µ–π—á–∞—Å", en: "Now", de: "Jetzt", fr: "Maintenant" },
  in:  { uk: "–£",    ru: "–í",       en: "In",  de: "In",   fr: "√Ä" },
  wind:{ uk: "–í—ñ—Ç–µ—Ä", ru: "–í–µ—Ç–µ—Ä",  en: "Wind",de: "Wind", fr: "Vent" },
  none:{ uk: "–±–µ–∑ –æ–ø–∞–¥—ñ–≤", ru: "–±–µ–∑ –æ—Å–∞–¥–∫–æ–≤", en: "no precipitation", de:"kein Niederschlag", fr:"pas de pr√©cipitations" },
  light:{ uk: "–ª–µ–≥–∫–∏–π", ru:"–ª–µ–≥–∫–∏–π", en:"light", de:"leicht", fr:"l√©ger" },
  errorNotFound: {
    uk: "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–∞–∫–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç.",
    ru: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç.",
    en: "Could not find that place.",
    de: "Dieser Ort wurde nicht gefunden.",
    fr: "Impossible de trouver ce lieu."
  }
};

// ---- –º–∞–ø–∞ –∫–æ–¥—ñ–≤ –ø–æ–≥–æ–¥–∏ Open-Meteo (—Å–∫–æ—Ä–æ—á–µ–Ω–æ, –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–ª—è —Å—Ç–∏—Å–ª–æ–≥–æ –æ–ø–∏—Å—É)
const WMO = (code, lang="uk") => {
  const map = {
    0:{ uk:"—è—Å–Ω–æ", ru:"—è—Å–Ω–æ", en:"clear", de:"klar", fr:"d√©gag√©" },
    1:{ uk:"–ø–µ—Ä–µ–≤–∞–∂–Ω–æ —è—Å–Ω–æ", ru:"–≤ –æ—Å–Ω–æ–≤–Ω–æ–º —è—Å–Ω–æ", en:"mostly clear", de:"meist klar", fr:"plut√¥t d√©gag√©" },
    2:{ uk:"—Ö–º–∞—Ä–Ω–æ –∑ –ø—Ä–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏", ru:"–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å", en:"partly cloudy", de:"wolkig", fr:"partiellement nuageux" },
    3:{ uk:"—Ö–º–∞—Ä–Ω–æ", ru:"–æ–±–ª–∞—á–Ω–æ", en:"overcast", de:"bew√∂lkt", fr:"couvert" },
    45:{ uk:"—Ç—É–º–∞–Ω", ru:"—Ç—É–º–∞–Ω", en:"fog", de:"Nebel", fr:"brouillard" },
    48:{ uk:"—Ç—É–º–∞–Ω –∑ —ñ–Ω–µ—î–º", ru:"–∏–∑–º–æ—Ä–æ–∑—å, —Ç—É–º–∞–Ω", en:"depositing rime fog", de:"Reifnebel", fr:"brouillard givrant" },
    51:{ uk:"–¥—Ä—ñ–±–Ω–∏–π –¥–æ—â", ru:"—Å–ª–∞–±–∞—è –º–æ—Ä–æ—Å—å", en:"light drizzle", de:"leichter Nieselregen", fr:"bruine faible" },
    53:{ uk:"–º—Ä—è–∫–∞", ru:"–º–æ—Ä–æ—Å—å", en:"drizzle", de:"Nieselregen", fr:"bruine" },
    55:{ uk:"—Å–∏–ª—å–Ω–∞ –º—Ä—è–∫–∞", ru:"—Å–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å", en:"dense drizzle", de:"starker Niesel", fr:"bruine forte" },
    61:{ uk:"–ª–µ–≥–∫–∏–π –¥–æ—â", ru:"—Å–ª–∞–±—ã–π –¥–æ–∂–¥—å", en:"light rain", de:"leichter Regen", fr:"pluie faible" },
    63:{ uk:"–¥–æ—â", ru:"–¥–æ–∂–¥—å", en:"rain", de:"Regen", fr:"pluie" },
    65:{ uk:"—Å–∏–ª—å–Ω–∏–π –¥–æ—â", ru:"—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å", en:"heavy rain", de:"starker Regen", fr:"pluie forte" },
    71:{ uk:"–ª–µ–≥–∫–∏–π —Å–Ω—ñ–≥", ru:"—Å–ª–∞–±—ã–π —Å–Ω–µ–≥", en:"light snow", de:"leichter Schnee", fr:"neige faible" },
    73:{ uk:"—Å–Ω—ñ–≥", ru:"—Å–Ω–µ–≥", en:"snow", de:"Schnee", fr:"neige" },
    75:{ uk:"—Å–∏–ª—å–Ω–∏–π —Å–Ω—ñ–≥", ru:"—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥", en:"heavy snow", de:"starker Schnee", fr:"fortes chutes de neige" },
    80:{ uk:"–∫–æ—Ä–æ—Ç–∫–æ—á–∞—Å–Ω—ñ –¥–æ—â—ñ", ru:"–ª–∏–≤–Ω–∏", en:"rain showers", de:"Regenschauer", fr:"averses" },
    95:{ uk:"–≥—Ä–æ–∑–∞", ru:"–≥—Ä–æ–∑–∞", en:"thunderstorm", de:"Gewitter", fr:"orage" }
  };
  return (map[code]?.[lang.slice(0,2)] || map[2]?.[lang.slice(0,2)]); // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º "partly cloudy"
};

// ---- –í–∏—Ç—è–≥–Ω—É—Ç–∏ –º—ñ—Å—Ç–æ –∑ —Ç–µ–∫—Å—Ç—É (–ø—Ä–æ—Å—Ç–∏–π, –∞–ª–µ —Å—Ç—ñ–π–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç)
function extractPlace(text = "") {
  const s = String(text).trim();

  // –ø—Ä–∏–∫–ª–∞–¥–∏: "—É –ö–∏—î–≤—ñ", "–≤ –õ—å–≤–æ–≤—ñ", "–≤ –≥–æ—Ä–æ–¥–µ –û–¥–µ—Å—Å–∞", "in New York", "bei Berlin"
  const m = s.match(
    /(?:—É|–≤|–≤\s–º—ñ—Å—Ç—ñ|–≤\s–≥–æ—Ä–æ–¥–µ|in|at|en|bei|√†|au|aux|nach|f√ºr)\s+([A-Za-z\u00C0-\u024F\u0400-\u04FF'‚Äô\-\. ]{2,50})/iu
  );
  if (m?.[1]) return m[1].trim();

  // –∑–∞–ø–∞—Å–Ω–∏–π: —è–∫—â–æ –ø—Ä–æ—Å—Ç–æ –æ–¥–Ω–µ-–¥–≤—ñ —Å–ª–æ–≤–∞ –ø—ñ—Å–ª—è —Å–ª–æ–≤–∞ "–ø–æ–≥–æ–¥–∞"
  const m2 = s.match(/–ø–æ–≥–æ–¥–∞\s+(?:–≤|—É)?\s*([A-Za-z\u00C0-\u024F\u0400-\u04FF'‚Äô\-\. ]{2,50})/iu);
  if (m2?.[1]) return m2[1].trim();

  return null;
}

// ---- –ß–∏ —Ü–µ —ñ–Ω—Ç–µ–Ω–¥ –ø–æ–≥–æ–¥–∏ (—Å—Ç—ñ–π–∫–æ –¥–æ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π –∑ "–¥–∞—Ç–∞/—á–∞—Å")
export function weatherIntent(text = "") {
  const s = String(text).trim().toLowerCase();
  if (!s) return false;

  const hasWeatherWord =
    s.includes("–ø–æ–≥–æ–¥–∞") || s.includes("weather") || s.includes("wetter") || s.includes("m√©t√©o");

  const hasCombo =
    /(?:–ø–æ–≥–æ–¥–∞|weather|wetter|m√©t√©o)\s*(?:—ñ|—Ç–∞|–∏|and|und|et)\s*(?:–¥–∞—Ç–∞|—á–∞—Å|time|date)/i.test(s) ||
    /(?:–¥–∞—Ç–∞|—á–∞—Å|time|date)\s*(?:—ñ|—Ç–∞|–∏|and|und|et)\s*(?:–ø–æ–≥–æ–¥–∞|weather|wetter|m√©t√©o)/i.test(s);

  const hasPlace =
    /(?:—É|–≤|in|bei|√†|au|aux|nach|f√ºr)\s+[A-Za-z\u00C0-\u024F\u0400-\u04FF]/i.test(s);

  return hasWeatherWord || hasCombo || hasPlace;
}

// ---- –ì–µ–æ–∫–æ–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ Open-Meteo
async function geocodePlace(place, lang = "uk") {
  const url = `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(place)}&count=1&language=${encodeURIComponent(lang)}&format=json`;
  const r = await fetch(url);
  if (!r.ok) throw new Error("geocoding failed");
  const data = await r.json();
  const item = data?.results?.[0];
  if (!item) return null;
  return {
    name: item.name,
    country: item.country,
    lat: item.latitude,
    lon: item.longitude
  };
}

// ---- –û—Ç—Ä–∏–º–∞—Ç–∏ ‚Äú–∑–∞—Ä–∞–∑‚Äù –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
async function getCurrentWeather(lat, lon) {
  const url =
    `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}` +
    `&current=temperature_2m,precipitation,wind_speed_10m,weather_code` +
    `&timezone=auto`;
  const r = await fetch(url);
  if (!r.ok) throw new Error("weather failed");
  const data = await r.json();
  return {
    tz: data?.timezone || "UTC",
    t: data?.current?.temperature_2m,
    p: data?.current?.precipitation,
    w: data?.current?.wind_speed_10m,
    code: data?.current?.weather_code
  };
}

// ---- –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
function makeWeatherText({ placeLabel, t, p, w, code, lang="uk" }) {
  const flag = "üå§Ô∏è";
  const cc = WMO(Number(code || 2), lang);
  const unitT = "¬∞C";
  const windLabel = L.wind[lang.slice(0,2)] || L.wind.uk;

  // –æ–ø–∞–¥–∏: —è–∫—â–æ p –¥—É–∂–µ –º–∞–ª—ñ ‚Äî –≤–∫–∞–∂–µ–º–æ ‚Äú–±–µ–∑ –æ–ø–∞–¥—ñ–≤‚Äù
  let precipText;
  if (p == null) precipText = "";
  else if (Number(p) < 0.2) precipText = L.none[lang.slice(0,2)] || L.none.uk;
  else precipText = `${p} mm`;

  const bits = [];
  bits.push(`${flag} ${L.in[lang.slice(0,2)] || L.in.uk} ${placeLabel} ${cc}.`);
  if (t != null) bits.push(`–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±–ª–∏–∑—å–∫–æ ${Math.round(t)}${unitT}.`);
  if (w != null) bits.push(`${windLabel} ${Math.round(w)} –º/—Å${precipText ? "," : "."}`);
  if (precipText) bits.push(`${precipText}.`);

  // –∑‚Äô—î–¥–Ω–∞—î–º–æ —É –¥–≤–∞-—Ç—Ä–∏ –ø—Ä–æ—Å—Ç–∏—Ö —Ä–µ—á–µ–Ω–Ω—è
  return bits.join(" ");
}

// ---- –ü—É–±–ª—ñ—á–Ω—ñ API: –∑–∞ –º—ñ—Å—Ü–µ–º
export async function weatherSummaryByPlace(textOrPlace, lang = "uk") {
  const place = extractPlace(textOrPlace) || String(textOrPlace).trim();
  if (!place) {
    return { text: L.errorNotFound[lang.slice(0,2)] || L.errorNotFound.uk, timezone: "UTC" };
  }

  const geo = await geocodePlace(place, lang);
  if (!geo) {
    return { text: L.errorNotFound[lang.slice(0,2)] || L.errorNotFound.uk, timezone: "UTC" };
  }

  const cur = await getCurrentWeather(geo.lat, geo.lon);
  const label = geo.country ? `${geo.name}, ${geo.country}` : geo.name;

  return {
    text: makeWeatherText({
      placeLabel: label,
      t: cur.t, p: cur.p, w: cur.w, code: cur.code, lang
    }),
    timezone: cur.tz
  };
}

// ---- –ü—É–±–ª—ñ—á–Ω—ñ API: –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
export async function weatherSummaryByCoords(lat, lon, lang = "uk", placeLabel = "") {
  const cur = await getCurrentWeather(lat, lon);
  const text = makeWeatherText({
    placeLabel: placeLabel || "–≤–∞—à—ñ–π –ª–æ–∫–∞—Ü—ñ—ó",
    t: cur.t, p: cur.p, w: cur.w, code: cur.code, lang
  });
  return { text, timezone: cur.tz };
}